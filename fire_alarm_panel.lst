                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module fire_alarm_panel
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LOWM
                                     12 	.globl _LOWB
                                     13 	.globl _ISO2H
                                     14 	.globl _ISO1H
                                     15 	.globl _ISO2
                                     16 	.globl _ISO1
                                     17 	.globl _TEVQ
                                     18 	.globl _TLAMP
                                     19 	.globl _TEXT4
                                     20 	.globl _OPEN
                                     21 	.globl _SHORT
                                     22 	.globl _FIRE
                                     23 	.globl _TZONE2
                                     24 	.globl _TZONE1
                                     25 	.globl _TEXT3
                                     26 	.globl _TEXT2
                                     27 	.globl _TEXT1
                                     28 	.globl _LINE2
                                     29 	.globl _LINE1
                                     30 	.globl _INIT_COMMANDS
                                     31 	.globl _main
                                     32 	.globl _SHORT2
                                     33 	.globl _OPEN2
                                     34 	.globl _FIRE2
                                     35 	.globl _SHORT1
                                     36 	.globl _OPEN1
                                     37 	.globl _FIRE1
                                     38 	.globl _CFTLR
                                     39 	.globl _CFLR
                                     40 	.globl _BUZ
                                     41 	.globl _HOT
                                     42 	.globl _EN
                                     43 	.globl _RS
                                     44 	.globl _EVQ
                                     45 	.globl _SIL
                                     46 	.globl _LAMP
                                     47 	.globl _LB
                                     48 	.globl _BL
                                     49 	.globl _ZONE2
                                     50 	.globl _ZONE1
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _TH2
                                    145 	.globl _TL2
                                    146 	.globl _RCAP2H
                                    147 	.globl _RCAP2L
                                    148 	.globl _T2CON
                                    149 	.globl _B
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _PR2
                                    171 	.globl _PR1
                                    172 	.globl _LISO
                                    173 	.globl _SLC2
                                    174 	.globl _SLC1
                                    175 	.globl _Z2
                                    176 	.globl _Z1
                                    177 	.globl _set_indicators_PARM_4
                                    178 	.globl _set_indicators_PARM_3
                                    179 	.globl _set_indicators_PARM_2
                                    180 	.globl _L
                                    181 	.globl _U
                                    182 	.globl _BUZZER_COUNTER
                                    183 	.globl _P1_INDICATORS
                                    184 	.globl _RAP
                                    185 	.globl _BL_TIMER
                                    186 	.globl _BLT1
                                    187 	.globl _init_system
                                    188 	.globl _prz1
                                    189 	.globl _prz2
                                    190 	.globl _receive
                                    191 	.globl _send_data
                                    192 	.globl _silence_alarms
                                    193 	.globl _spliter
                                    194 	.globl _move
                                    195 	.globl _move1
                                    196 	.globl _lcd_cmd
                                    197 	.globl _lcd_data
                                    198 	.globl _lcd_disp
                                    199 	.globl _lcd_disp1
                                    200 	.globl _delay2
                                    201 	.globl _delay1
                                    202 	.globl _delay
                                    203 	.globl _set_indicators
                                    204 	.globl _update_indicators
                                    205 ;--------------------------------------------------------
                                    206 ; special function registers
                                    207 ;--------------------------------------------------------
                                    208 	.area RSEG    (ABS,DATA)
      000000                        209 	.org 0x0000
                           000080   210 _P0	=	0x0080
                           000081   211 _SP	=	0x0081
                           000082   212 _DPL	=	0x0082
                           000083   213 _DPH	=	0x0083
                           000087   214 _PCON	=	0x0087
                           000088   215 _TCON	=	0x0088
                           000089   216 _TMOD	=	0x0089
                           00008A   217 _TL0	=	0x008a
                           00008B   218 _TL1	=	0x008b
                           00008C   219 _TH0	=	0x008c
                           00008D   220 _TH1	=	0x008d
                           000090   221 _P1	=	0x0090
                           000098   222 _SCON	=	0x0098
                           000099   223 _SBUF	=	0x0099
                           0000A0   224 _P2	=	0x00a0
                           0000A8   225 _IE	=	0x00a8
                           0000B0   226 _P3	=	0x00b0
                           0000B8   227 _IP	=	0x00b8
                           0000D0   228 _PSW	=	0x00d0
                           0000E0   229 _ACC	=	0x00e0
                           0000F0   230 _B	=	0x00f0
                           0000C8   231 _T2CON	=	0x00c8
                           0000CA   232 _RCAP2L	=	0x00ca
                           0000CB   233 _RCAP2H	=	0x00cb
                           0000CC   234 _TL2	=	0x00cc
                           0000CD   235 _TH2	=	0x00cd
                                    236 ;--------------------------------------------------------
                                    237 ; special function bits
                                    238 ;--------------------------------------------------------
                                    239 	.area RSEG    (ABS,DATA)
      000000                        240 	.org 0x0000
                           000080   241 _P0_0	=	0x0080
                           000081   242 _P0_1	=	0x0081
                           000082   243 _P0_2	=	0x0082
                           000083   244 _P0_3	=	0x0083
                           000084   245 _P0_4	=	0x0084
                           000085   246 _P0_5	=	0x0085
                           000086   247 _P0_6	=	0x0086
                           000087   248 _P0_7	=	0x0087
                           000088   249 _IT0	=	0x0088
                           000089   250 _IE0	=	0x0089
                           00008A   251 _IT1	=	0x008a
                           00008B   252 _IE1	=	0x008b
                           00008C   253 _TR0	=	0x008c
                           00008D   254 _TF0	=	0x008d
                           00008E   255 _TR1	=	0x008e
                           00008F   256 _TF1	=	0x008f
                           000090   257 _P1_0	=	0x0090
                           000091   258 _P1_1	=	0x0091
                           000092   259 _P1_2	=	0x0092
                           000093   260 _P1_3	=	0x0093
                           000094   261 _P1_4	=	0x0094
                           000095   262 _P1_5	=	0x0095
                           000096   263 _P1_6	=	0x0096
                           000097   264 _P1_7	=	0x0097
                           000098   265 _RI	=	0x0098
                           000099   266 _TI	=	0x0099
                           00009A   267 _RB8	=	0x009a
                           00009B   268 _TB8	=	0x009b
                           00009C   269 _REN	=	0x009c
                           00009D   270 _SM2	=	0x009d
                           00009E   271 _SM1	=	0x009e
                           00009F   272 _SM0	=	0x009f
                           0000A0   273 _P2_0	=	0x00a0
                           0000A1   274 _P2_1	=	0x00a1
                           0000A2   275 _P2_2	=	0x00a2
                           0000A3   276 _P2_3	=	0x00a3
                           0000A4   277 _P2_4	=	0x00a4
                           0000A5   278 _P2_5	=	0x00a5
                           0000A6   279 _P2_6	=	0x00a6
                           0000A7   280 _P2_7	=	0x00a7
                           0000A8   281 _EX0	=	0x00a8
                           0000A9   282 _ET0	=	0x00a9
                           0000AA   283 _EX1	=	0x00aa
                           0000AB   284 _ET1	=	0x00ab
                           0000AC   285 _ES	=	0x00ac
                           0000AF   286 _EA	=	0x00af
                           0000B0   287 _P3_0	=	0x00b0
                           0000B1   288 _P3_1	=	0x00b1
                           0000B2   289 _P3_2	=	0x00b2
                           0000B3   290 _P3_3	=	0x00b3
                           0000B4   291 _P3_4	=	0x00b4
                           0000B5   292 _P3_5	=	0x00b5
                           0000B6   293 _P3_6	=	0x00b6
                           0000B7   294 _P3_7	=	0x00b7
                           0000B0   295 _RXD	=	0x00b0
                           0000B1   296 _TXD	=	0x00b1
                           0000B2   297 _INT0	=	0x00b2
                           0000B3   298 _INT1	=	0x00b3
                           0000B4   299 _T0	=	0x00b4
                           0000B5   300 _T1	=	0x00b5
                           0000B6   301 _WR	=	0x00b6
                           0000B7   302 _RD	=	0x00b7
                           0000B8   303 _PX0	=	0x00b8
                           0000B9   304 _PT0	=	0x00b9
                           0000BA   305 _PX1	=	0x00ba
                           0000BB   306 _PT1	=	0x00bb
                           0000BC   307 _PS	=	0x00bc
                           0000D0   308 _P	=	0x00d0
                           0000D1   309 _F1	=	0x00d1
                           0000D2   310 _OV	=	0x00d2
                           0000D3   311 _RS0	=	0x00d3
                           0000D4   312 _RS1	=	0x00d4
                           0000D5   313 _F0	=	0x00d5
                           0000D6   314 _AC	=	0x00d6
                           0000D7   315 _CY	=	0x00d7
                           0000AD   316 _ET2	=	0x00ad
                           0000BD   317 _PT2	=	0x00bd
                           0000C8   318 _T2CON_0	=	0x00c8
                           0000C9   319 _T2CON_1	=	0x00c9
                           0000CA   320 _T2CON_2	=	0x00ca
                           0000CB   321 _T2CON_3	=	0x00cb
                           0000CC   322 _T2CON_4	=	0x00cc
                           0000CD   323 _T2CON_5	=	0x00cd
                           0000CE   324 _T2CON_6	=	0x00ce
                           0000CF   325 _T2CON_7	=	0x00cf
                           0000C8   326 _CP_RL2	=	0x00c8
                           0000C9   327 _C_T2	=	0x00c9
                           0000CA   328 _TR2	=	0x00ca
                           0000CB   329 _EXEN2	=	0x00cb
                           0000CC   330 _TCLK	=	0x00cc
                           0000CD   331 _RCLK	=	0x00cd
                           0000CE   332 _EXF2	=	0x00ce
                           0000CF   333 _TF2	=	0x00cf
                           0000A4   334 _ZONE1	=	0x00a4
                           0000A5   335 _ZONE2	=	0x00a5
                           0000A7   336 _BL	=	0x00a7
                           0000A2   337 _LB	=	0x00a2
                           0000A6   338 _LAMP	=	0x00a6
                           0000A0   339 _SIL	=	0x00a0
                           0000A1   340 _EVQ	=	0x00a1
                           000086   341 _RS	=	0x0086
                           000087   342 _EN	=	0x0087
                           000094   343 _HOT	=	0x0094
                           000095   344 _BUZ	=	0x0095
                           000096   345 _CFLR	=	0x0096
                           000097   346 _CFTLR	=	0x0097
                           000080   347 _FIRE1	=	0x0080
                           000081   348 _OPEN1	=	0x0081
                           000082   349 _SHORT1	=	0x0082
                           000083   350 _FIRE2	=	0x0083
                           000084   351 _OPEN2	=	0x0084
                           000085   352 _SHORT2	=	0x0085
                                    353 ;--------------------------------------------------------
                                    354 ; overlayable register banks
                                    355 ;--------------------------------------------------------
                                    356 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        357 	.ds 8
                                    358 ;--------------------------------------------------------
                                    359 ; internal ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area DSEG    (DATA)
      000000                        362 _BLT1::
      000000                        363 	.ds 1
      000001                        364 _BL_TIMER::
      000001                        365 	.ds 2
      000003                        366 _RAP::
      000003                        367 	.ds 1
      000004                        368 _P1_INDICATORS::
      000004                        369 	.ds 1
      000005                        370 _BUZZER_COUNTER::
      000005                        371 	.ds 1
      000006                        372 _U::
      000006                        373 	.ds 1
      000007                        374 _L::
      000007                        375 	.ds 1
      000008                        376 _set_indicators_PARM_2:
      000008                        377 	.ds 1
      000009                        378 _set_indicators_PARM_3:
      000009                        379 	.ds 1
      00000A                        380 _set_indicators_PARM_4:
      00000A                        381 	.ds 1
                                    382 ;--------------------------------------------------------
                                    383 ; overlayable items in internal ram
                                    384 ;--------------------------------------------------------
                                    385 	.area	OSEG    (OVR,DATA)
                                    386 	.area	OSEG    (OVR,DATA)
                                    387 	.area	OSEG    (OVR,DATA)
                                    388 	.area	OSEG    (OVR,DATA)
                                    389 	.area	OSEG    (OVR,DATA)
                                    390 ;--------------------------------------------------------
                                    391 ; Stack segment in internal ram
                                    392 ;--------------------------------------------------------
                                    393 	.area SSEG
      000000                        394 __start__stack:
      000000                        395 	.ds	1
                                    396 
                                    397 ;--------------------------------------------------------
                                    398 ; indirectly addressable internal ram data
                                    399 ;--------------------------------------------------------
                                    400 	.area ISEG    (DATA)
                                    401 ;--------------------------------------------------------
                                    402 ; absolute internal ram data
                                    403 ;--------------------------------------------------------
                                    404 	.area IABS    (ABS,DATA)
                                    405 	.area IABS    (ABS,DATA)
                                    406 ;--------------------------------------------------------
                                    407 ; bit data
                                    408 ;--------------------------------------------------------
                                    409 	.area BSEG    (BIT)
      000000                        410 _Z1::
      000000                        411 	.ds 1
      000001                        412 _Z2::
      000001                        413 	.ds 1
      000002                        414 _SLC1::
      000002                        415 	.ds 1
      000003                        416 _SLC2::
      000003                        417 	.ds 1
      000004                        418 _LISO::
      000004                        419 	.ds 1
      000005                        420 _PR1::
      000005                        421 	.ds 1
      000006                        422 _PR2::
      000006                        423 	.ds 1
                                    424 ;--------------------------------------------------------
                                    425 ; paged external ram data
                                    426 ;--------------------------------------------------------
                                    427 	.area PSEG    (PAG,XDATA)
                                    428 ;--------------------------------------------------------
                                    429 ; uninitialized external ram data
                                    430 ;--------------------------------------------------------
                                    431 	.area XSEG    (XDATA)
                                    432 ;--------------------------------------------------------
                                    433 ; absolute external ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area XABS    (ABS,XDATA)
                                    436 ;--------------------------------------------------------
                                    437 ; initialized external ram data
                                    438 ;--------------------------------------------------------
                                    439 	.area XISEG   (XDATA)
                                    440 	.area HOME    (CODE)
                                    441 	.area GSINIT0 (CODE)
                                    442 	.area GSINIT1 (CODE)
                                    443 	.area GSINIT2 (CODE)
                                    444 	.area GSINIT3 (CODE)
                                    445 	.area GSINIT4 (CODE)
                                    446 	.area GSINIT5 (CODE)
                                    447 	.area GSINIT  (CODE)
                                    448 	.area GSFINAL (CODE)
                                    449 	.area CSEG    (CODE)
                                    450 ;--------------------------------------------------------
                                    451 ; interrupt vector
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
      000000                        454 __interrupt_vect:
      000000 02r00r00         [24]  455 	ljmp	__sdcc_gsinit_startup
                                    456 ; restartable atomic support routines
      000003                        457 	.ds	5
      000008                        458 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  459 	nop
      000009 00               [12]  460 	nop
      00000A                        461 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  462 	movx	a, @r0
      00000B FB               [12]  463 	mov	r3, a
      00000C EA               [12]  464 	mov	a, r2
      00000D F2               [24]  465 	movx	@r0, a
      00000E 80 2C            [24]  466 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  467 	nop
      000011 00               [12]  468 	nop
      000012                        469 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  470 	movx	a, @dptr
      000013 FB               [12]  471 	mov	r3, a
      000014 EA               [12]  472 	mov	a, r2
      000015 F0               [24]  473 	movx	@dptr, a
      000016 80 24            [24]  474 	sjmp	sdcc_atomic_exchange_exit
      000018                        475 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  476 	mov	a, @r0
      000019 B5 02 02         [24]  477 	cjne	a, ar2, .+#5
      00001C EB               [12]  478 	mov	a, r3
      00001D F6               [12]  479 	mov	@r0, a
      00001E 22               [24]  480 	ret
      00001F 00               [12]  481 	nop
      000020                        482 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  483 	movx	a, @r0
      000021 B5 02 02         [24]  484 	cjne	a, ar2, .+#5
      000024 EB               [12]  485 	mov	a, r3
      000025 F2               [24]  486 	movx	@r0, a
      000026 22               [24]  487 	ret
      000027 00               [12]  488 	nop
      000028                        489 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  490 	movx	a, @dptr
      000029 B5 02 02         [24]  491 	cjne	a, ar2, .+#5
      00002C EB               [12]  492 	mov	a, r3
      00002D F0               [24]  493 	movx	@dptr, a
      00002E 22               [24]  494 	ret
      00002F                        495 sdcc_atomic_exchange_rollback_end::
                                    496 
      00002F                        497 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  498 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  499 	mov	r0, dpl
      000034 20 F5 D3         [24]  500 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        501 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  502 	mov	a, r2
      000038 C6               [12]  503 	xch	a, @r0
      000039 F5 82            [12]  504 	mov	dpl, a
      00003B 22               [24]  505 	ret
      00003C                        506 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  507 	mov	dpl, r3
      00003E 22               [24]  508 	ret
      00003F                        509 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  510 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  511 	mov	r0, dpl
      000044 20 F5 D9         [24]  512 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  513 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    514 ;--------------------------------------------------------
                                    515 ; global & static initialisations
                                    516 ;--------------------------------------------------------
                                    517 	.area HOME    (CODE)
                                    518 	.area GSINIT  (CODE)
                                    519 	.area GSFINAL (CODE)
                                    520 	.area GSINIT  (CODE)
                                    521 	.globl __sdcc_gsinit_startup
                                    522 	.globl __sdcc_program_startup
                                    523 	.globl __start__stack
                                    524 	.globl __mcs51_genXINIT
                                    525 	.globl __mcs51_genXRAMCLEAR
                                    526 	.globl __mcs51_genRAMCLEAR
                                    527 ;	fire_alarm_panel.c:28: __bit Z1 = 0;          // ISO Zone 1
                                    528 ;	assignBit
      000000 C2*00            [12]  529 	clr	_Z1
                                    530 ;	fire_alarm_panel.c:29: __bit Z2 = 0;          // ISO Zone 2
                                    531 ;	assignBit
      000002 C2*01            [12]  532 	clr	_Z2
                                    533 ;	fire_alarm_panel.c:30: __bit SLC1 = 0;        // Silence Zone 1
                                    534 ;	assignBit
      000004 C2*02            [12]  535 	clr	_SLC1
                                    536 ;	fire_alarm_panel.c:31: __bit SLC2 = 0;        // Silence Zone 2
                                    537 ;	assignBit
      000006 C2*03            [12]  538 	clr	_SLC2
                                    539 ;	fire_alarm_panel.c:32: __bit LISO = 0;        // Low battery silence
                                    540 ;	assignBit
      000008 C2*04            [12]  541 	clr	_LISO
                                    542 ;	fire_alarm_panel.c:33: __bit PR1 = 0;         // Zone 1 Problem
                                    543 ;	assignBit
      00000A C2*05            [12]  544 	clr	_PR1
                                    545 ;	fire_alarm_panel.c:34: __bit PR2 = 0;         // Zone 2 Problem
                                    546 ;	assignBit
      00000C C2*06            [12]  547 	clr	_PR2
                                    548 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  549 	ljmp	__sdcc_program_startup
                                    550 ;--------------------------------------------------------
                                    551 ; Home
                                    552 ;--------------------------------------------------------
                                    553 	.area HOME    (CODE)
                                    554 	.area HOME    (CODE)
      000049                        555 __sdcc_program_startup:
      000049 02r00r00         [24]  556 	ljmp	_main
                                    557 ;	return from main will return to caller
                                    558 ;--------------------------------------------------------
                                    559 ; code
                                    560 ;--------------------------------------------------------
                                    561 	.area CSEG    (CODE)
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'main'
                                    564 ;------------------------------------------------------------
                                    565 ;R0            Allocated to registers r7 
                                    566 ;buzzer_state  Allocated to registers r7 
                                    567 ;------------------------------------------------------------
                                    568 ;	fire_alarm_panel.c:92: void main(void)
                                    569 ;	-----------------------------------------
                                    570 ;	 function main
                                    571 ;	-----------------------------------------
      000000                        572 _main:
                           000007   573 	ar7 = 0x07
                           000006   574 	ar6 = 0x06
                           000005   575 	ar5 = 0x05
                           000004   576 	ar4 = 0x04
                           000003   577 	ar3 = 0x03
                           000002   578 	ar2 = 0x02
                           000001   579 	ar1 = 0x01
                           000000   580 	ar0 = 0x00
                                    581 ;	fire_alarm_panel.c:96: init_system();
      000000 12r04rB3         [24]  582 	lcall	_init_system
                                    583 ;	fire_alarm_panel.c:100: while(R0 < 15) {
      000003 7F 00            [12]  584 	mov	r7,#0x00
      000005                        585 00101$:
      000005 BF 0F 00         [24]  586 	cjne	r7,#0x0f,00703$
      000008                        587 00703$:
      000008 50 13            [24]  588 	jnc	00103$
                                    589 ;	fire_alarm_panel.c:101: lcd_cmd(INIT_COMMANDS);
      00000A 90r00r00         [24]  590 	mov	dptr,#_INIT_COMMANDS
      00000D 75 F0 80         [24]  591 	mov	b, #0x80
      000010 C0 07            [24]  592 	push	ar7
      000012 12r06rCA         [24]  593 	lcall	_lcd_cmd
                                    594 ;	fire_alarm_panel.c:102: delay();
      000015 12r07rAB         [24]  595 	lcall	_delay
      000018 D0 07            [24]  596 	pop	ar7
                                    597 ;	fire_alarm_panel.c:103: R0++;
      00001A 0F               [12]  598 	inc	r7
      00001B 80 E8            [24]  599 	sjmp	00101$
      00001D                        600 00103$:
                                    601 ;	fire_alarm_panel.c:107: lcd_cmd(LINE1);
      00001D 90r00r07         [24]  602 	mov	dptr,#_LINE1
      000020 75 F0 80         [24]  603 	mov	b, #0x80
      000023 12r06rCA         [24]  604 	lcall	_lcd_cmd
                                    605 ;	fire_alarm_panel.c:108: lcd_disp(TEXT2);
      000026 90r00r1E         [24]  606 	mov	dptr,#_TEXT2
      000029 75 F0 80         [24]  607 	mov	b, #0x80
      00002C 12r07r1E         [24]  608 	lcall	_lcd_disp
                                    609 ;	fire_alarm_panel.c:109: delay();
      00002F 12r07rAB         [24]  610 	lcall	_delay
                                    611 ;	fire_alarm_panel.c:110: lcd_cmd(LINE2);
      000032 90r00r0B         [24]  612 	mov	dptr,#_LINE2
      000035 75 F0 80         [24]  613 	mov	b, #0x80
      000038 12r06rCA         [24]  614 	lcall	_lcd_cmd
                                    615 ;	fire_alarm_panel.c:111: lcd_disp1(TEXT1);
      00003B 90r00r0D         [24]  616 	mov	dptr,#_TEXT1
      00003E 75 F0 80         [24]  617 	mov	b, #0x80
      000041 12r07r53         [24]  618 	lcall	_lcd_disp1
                                    619 ;	fire_alarm_panel.c:113: while(1) {
      000044                        620 00234$:
                                    621 ;	fire_alarm_panel.c:115: if(RI) {
      000044 30 98 03         [24]  622 	jnb	_RI,00105$
                                    623 ;	fire_alarm_panel.c:116: receive();
      000047 12r05rE5         [24]  624 	lcall	_receive
      00004A                        625 00105$:
                                    626 ;	fire_alarm_panel.c:120: if (!PR1 && !PR2 && !LB && !LAMP && EVQ) { // Normal condition
      00004A 20*05 23         [24]  627 	jb	_PR1,00110$
      00004D 20*06 20         [24]  628 	jb	_PR2,00110$
      000050 20 A2 1D         [24]  629 	jb	_LB,00110$
      000053 20 A6 1A         [24]  630 	jb	_LAMP,00110$
      000056 30 A1 17         [24]  631 	jnb	_EVQ,00110$
                                    632 ;	fire_alarm_panel.c:121: if(BL_TIMER > 0) {
      000059 E5*01            [12]  633 	mov	a,_BL_TIMER
      00005B 45*02            [12]  634 	orl	a,(_BL_TIMER + 1)
      00005D 60 0D            [24]  635 	jz	00107$
                                    636 ;	fire_alarm_panel.c:122: BL_TIMER--;
      00005F 15*01            [12]  637 	dec	_BL_TIMER
      000061 74 FF            [12]  638 	mov	a,#0xff
      000063 B5*01 02         [24]  639 	cjne	a,_BL_TIMER,00712$
      000066 15*02            [12]  640 	dec	(_BL_TIMER + 1)
      000068                        641 00712$:
                                    642 ;	fire_alarm_panel.c:123: BL = 1; // Keep backlight ON for 5 minutes
                                    643 ;	assignBit
      000068 D2 A7            [12]  644 	setb	_BL
      00006A 80 0C            [24]  645 	sjmp	00111$
      00006C                        646 00107$:
                                    647 ;	fire_alarm_panel.c:125: BL = 0; // Turn OFF after 5 minutes
                                    648 ;	assignBit
      00006C C2 A7            [12]  649 	clr	_BL
      00006E 80 08            [24]  650 	sjmp	00111$
      000070                        651 00110$:
                                    652 ;	fire_alarm_panel.c:129: BL = 1;
                                    653 ;	assignBit
      000070 D2 A7            [12]  654 	setb	_BL
                                    655 ;	fire_alarm_panel.c:130: BL_TIMER = BL_TIMEOUT; // Reset timer when returning to normal
      000072 75*01 2C         [24]  656 	mov	_BL_TIMER,#0x2c
      000075 75*02 01         [24]  657 	mov	(_BL_TIMER + 1),#0x01
      000078                        658 00111$:
                                    659 ;	fire_alarm_panel.c:139: if(!PR1 && !PR2 && !LB) {
      000078 20*05 18         [24]  660 	jb	_PR1,00117$
      00007B 20*06 15         [24]  661 	jb	_PR2,00117$
      00007E 20 A2 12         [24]  662 	jb	_LB,00117$
                                    663 ;	fire_alarm_panel.c:140: lcd_cmd(LINE1);
      000081 90r00r07         [24]  664 	mov	dptr,#_LINE1
      000084 75 F0 80         [24]  665 	mov	b, #0x80
      000087 12r06rCA         [24]  666 	lcall	_lcd_cmd
                                    667 ;	fire_alarm_panel.c:141: lcd_disp(TEXT1);
      00008A 90r00r0D         [24]  668 	mov	dptr,#_TEXT1
      00008D 75 F0 80         [24]  669 	mov	b, #0x80
      000090 12r07r1E         [24]  670 	lcall	_lcd_disp
      000093                        671 00117$:
                                    672 ;	fire_alarm_panel.c:146: lcd_cmd(LINE1);
      000093 90r00r07         [24]  673 	mov	dptr,#_LINE1
      000096 75 F0 80         [24]  674 	mov	b, #0x80
      000099 12r06rCA         [24]  675 	lcall	_lcd_cmd
                                    676 ;	fire_alarm_panel.c:147: lcd_data('F'); lcd_data('1'); lcd_data(':'); lcd_data(FIRE1 ? '1' : '0');
      00009C 75 82 46         [24]  677 	mov	dpl, #0x46
      00009F 12r07r0D         [24]  678 	lcall	_lcd_data
      0000A2 75 82 31         [24]  679 	mov	dpl, #0x31
      0000A5 12r07r0D         [24]  680 	lcall	_lcd_data
      0000A8 75 82 3A         [24]  681 	mov	dpl, #0x3a
      0000AB 12r07r0D         [24]  682 	lcall	_lcd_data
      0000AE 30 80 04         [24]  683 	jnb	_FIRE1,00238$
      0000B1 7F 31            [12]  684 	mov	r7,#0x31
      0000B3 80 02            [24]  685 	sjmp	00239$
      0000B5                        686 00238$:
      0000B5 7F 30            [12]  687 	mov	r7,#0x30
      0000B7                        688 00239$:
      0000B7 8F 82            [24]  689 	mov	dpl,r7
      0000B9 12r07r0D         [24]  690 	lcall	_lcd_data
                                    691 ;	fire_alarm_panel.c:148: lcd_data(' '); lcd_data('S'); lcd_data('1'); lcd_data(':'); lcd_data(SHORT1 ? '1' : '0');
      0000BC 75 82 20         [24]  692 	mov	dpl, #0x20
      0000BF 12r07r0D         [24]  693 	lcall	_lcd_data
      0000C2 75 82 53         [24]  694 	mov	dpl, #0x53
      0000C5 12r07r0D         [24]  695 	lcall	_lcd_data
      0000C8 75 82 31         [24]  696 	mov	dpl, #0x31
      0000CB 12r07r0D         [24]  697 	lcall	_lcd_data
      0000CE 75 82 3A         [24]  698 	mov	dpl, #0x3a
      0000D1 12r07r0D         [24]  699 	lcall	_lcd_data
      0000D4 30 82 04         [24]  700 	jnb	_SHORT1,00240$
      0000D7 7F 31            [12]  701 	mov	r7,#0x31
      0000D9 80 02            [24]  702 	sjmp	00241$
      0000DB                        703 00240$:
      0000DB 7F 30            [12]  704 	mov	r7,#0x30
      0000DD                        705 00241$:
      0000DD 8F 82            [24]  706 	mov	dpl,r7
      0000DF 12r07r0D         [24]  707 	lcall	_lcd_data
                                    708 ;	fire_alarm_panel.c:149: lcd_data(' '); lcd_data('Z'); lcd_data('1'); lcd_data(':'); lcd_data(ZONE1 ? '1' : '0');
      0000E2 75 82 20         [24]  709 	mov	dpl, #0x20
      0000E5 12r07r0D         [24]  710 	lcall	_lcd_data
      0000E8 75 82 5A         [24]  711 	mov	dpl, #0x5a
      0000EB 12r07r0D         [24]  712 	lcall	_lcd_data
      0000EE 75 82 31         [24]  713 	mov	dpl, #0x31
      0000F1 12r07r0D         [24]  714 	lcall	_lcd_data
      0000F4 75 82 3A         [24]  715 	mov	dpl, #0x3a
      0000F7 12r07r0D         [24]  716 	lcall	_lcd_data
      0000FA 30 A4 04         [24]  717 	jnb	_ZONE1,00242$
      0000FD 7F 31            [12]  718 	mov	r7,#0x31
      0000FF 80 02            [24]  719 	sjmp	00243$
      000101                        720 00242$:
      000101 7F 30            [12]  721 	mov	r7,#0x30
      000103                        722 00243$:
      000103 8F 82            [24]  723 	mov	dpl,r7
      000105 12r07r0D         [24]  724 	lcall	_lcd_data
                                    725 ;	fire_alarm_panel.c:151: if(RI) {
      000108 30 98 03         [24]  726 	jnb	_RI,00121$
                                    727 ;	fire_alarm_panel.c:152: receive();
      00010B 12r05rE5         [24]  728 	lcall	_receive
      00010E                        729 00121$:
                                    730 ;	fire_alarm_panel.c:156: if(!ZONE1) {
      00010E 20 A4 42         [24]  731 	jb	_ZONE1,00137$
                                    732 ;	fire_alarm_panel.c:158: Z1 = 0; // Mark as healthy/not isolated
                                    733 ;	assignBit
      000111 C2*00            [12]  734 	clr	_Z1
                                    735 ;	fire_alarm_panel.c:161: if(FIRE1 && OPEN1 && SHORT1) {
      000113 30 80 30         [24]  736 	jnb	_FIRE1,00123$
      000116 30 81 2D         [24]  737 	jnb	_OPEN1,00123$
      000119 30 82 2A         [24]  738 	jnb	_SHORT1,00123$
                                    739 ;	fire_alarm_panel.c:163: PR1 = 0;
                                    740 ;	assignBit
      00011C C2*05            [12]  741 	clr	_PR1
                                    742 ;	fire_alarm_panel.c:164: SLC1 = 0;
                                    743 ;	assignBit
      00011E C2*02            [12]  744 	clr	_SLC1
                                    745 ;	fire_alarm_panel.c:165: lcd_cmd(LINE2);
      000120 90r00r0B         [24]  746 	mov	dptr,#_LINE2
      000123 75 F0 80         [24]  747 	mov	b, #0x80
      000126 12r06rCA         [24]  748 	lcall	_lcd_cmd
                                    749 ;	fire_alarm_panel.c:166: lcd_disp(ISO1H); // Show "ZONE-01 HEALTHY"
      000129 90r00rEA         [24]  750 	mov	dptr,#_ISO1H
      00012C 75 F0 80         [24]  751 	mov	b, #0x80
      00012F 12r07r1E         [24]  752 	lcall	_lcd_disp
                                    753 ;	fire_alarm_panel.c:167: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000132 75*08 00         [24]  754 	mov	_set_indicators_PARM_2,#0x00
      000135 75*09 01         [24]  755 	mov	_set_indicators_PARM_3,#0x01
      000138 75*0A 00         [24]  756 	mov	_set_indicators_PARM_4,#0x00
      00013B 75 82 01         [24]  757 	mov	dpl, #0x01
      00013E 12r07rB4         [24]  758 	lcall	_set_indicators
                                    759 ;	fire_alarm_panel.c:168: delay1();
      000141 12r07r98         [24]  760 	lcall	_delay1
      000144 80 05            [24]  761 	sjmp	00124$
      000146                        762 00123$:
                                    763 ;	fire_alarm_panel.c:171: PR1 = 1;
                                    764 ;	assignBit
      000146 D2*05            [12]  765 	setb	_PR1
                                    766 ;	fire_alarm_panel.c:172: prz1();
      000148 12r04rF9         [24]  767 	lcall	_prz1
      00014B                        768 00124$:
                                    769 ;	fire_alarm_panel.c:174: if(RI) receive();
      00014B 30 98 36         [24]  770 	jnb	_RI,00138$
      00014E 12r05rE5         [24]  771 	lcall	_receive
      000151 80 31            [24]  772 	sjmp	00138$
      000153                        773 00137$:
                                    774 ;	fire_alarm_panel.c:177: Z1 = 1; // Mark as isolated
                                    775 ;	assignBit
      000153 D2*00            [12]  776 	setb	_Z1
                                    777 ;	fire_alarm_panel.c:180: if(FIRE1 && OPEN1 && SHORT1) {
      000155 30 80 21         [24]  778 	jnb	_FIRE1,00130$
      000158 30 81 1E         [24]  779 	jnb	_OPEN1,00130$
      00015B 30 82 1B         [24]  780 	jnb	_SHORT1,00130$
                                    781 ;	fire_alarm_panel.c:182: PR1 = 0;
                                    782 ;	assignBit
      00015E C2*05            [12]  783 	clr	_PR1
                                    784 ;	fire_alarm_panel.c:183: SLC1 = 0;
                                    785 ;	assignBit
      000160 C2*02            [12]  786 	clr	_SLC1
                                    787 ;	fire_alarm_panel.c:184: lcd_cmd(LINE2);
      000162 90r00r0B         [24]  788 	mov	dptr,#_LINE2
      000165 75 F0 80         [24]  789 	mov	b, #0x80
      000168 12r06rCA         [24]  790 	lcall	_lcd_cmd
                                    791 ;	fire_alarm_panel.c:185: lcd_disp(ISO1); // Show "ZONE-01 ISOLATE" only when healthy
      00016B 90r00rC8         [24]  792 	mov	dptr,#_ISO1
      00016E 75 F0 80         [24]  793 	mov	b, #0x80
      000171 12r07r1E         [24]  794 	lcall	_lcd_disp
                                    795 ;	fire_alarm_panel.c:186: delay1();
      000174 12r07r98         [24]  796 	lcall	_delay1
      000177 80 05            [24]  797 	sjmp	00131$
      000179                        798 00130$:
                                    799 ;	fire_alarm_panel.c:189: PR1 = 1;
                                    800 ;	assignBit
      000179 D2*05            [12]  801 	setb	_PR1
                                    802 ;	fire_alarm_panel.c:190: prz1();
      00017B 12r04rF9         [24]  803 	lcall	_prz1
      00017E                        804 00131$:
                                    805 ;	fire_alarm_panel.c:192: if(RI) receive();
      00017E 30 98 03         [24]  806 	jnb	_RI,00138$
      000181 12r05rE5         [24]  807 	lcall	_receive
      000184                        808 00138$:
                                    809 ;	fire_alarm_panel.c:196: if(!ZONE2) {
      000184 20 A5 42         [24]  810 	jb	_ZONE2,00154$
                                    811 ;	fire_alarm_panel.c:198: Z2 = 0; // Mark as healthy/not isolated
                                    812 ;	assignBit
      000187 C2*01            [12]  813 	clr	_Z2
                                    814 ;	fire_alarm_panel.c:201: if(FIRE2 && OPEN2 && SHORT2) {
      000189 30 83 30         [24]  815 	jnb	_FIRE2,00140$
      00018C 30 84 2D         [24]  816 	jnb	_OPEN2,00140$
      00018F 30 85 2A         [24]  817 	jnb	_SHORT2,00140$
                                    818 ;	fire_alarm_panel.c:203: PR2 = 0;
                                    819 ;	assignBit
      000192 C2*06            [12]  820 	clr	_PR2
                                    821 ;	fire_alarm_panel.c:204: SLC2 = 0;
                                    822 ;	assignBit
      000194 C2*03            [12]  823 	clr	_SLC2
                                    824 ;	fire_alarm_panel.c:205: lcd_cmd(LINE2);
      000196 90r00r0B         [24]  825 	mov	dptr,#_LINE2
      000199 75 F0 80         [24]  826 	mov	b, #0x80
      00019C 12r06rCA         [24]  827 	lcall	_lcd_cmd
                                    828 ;	fire_alarm_panel.c:206: lcd_disp(ISO2H); // Show "ZONE-02 HEALTHY"
      00019F 90r00rFB         [24]  829 	mov	dptr,#_ISO2H
      0001A2 75 F0 80         [24]  830 	mov	b, #0x80
      0001A5 12r07r1E         [24]  831 	lcall	_lcd_disp
                                    832 ;	fire_alarm_panel.c:207: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      0001A8 75*08 00         [24]  833 	mov	_set_indicators_PARM_2,#0x00
      0001AB 75*09 01         [24]  834 	mov	_set_indicators_PARM_3,#0x01
      0001AE 75*0A 00         [24]  835 	mov	_set_indicators_PARM_4,#0x00
      0001B1 75 82 01         [24]  836 	mov	dpl, #0x01
      0001B4 12r07rB4         [24]  837 	lcall	_set_indicators
                                    838 ;	fire_alarm_panel.c:208: delay1();
      0001B7 12r07r98         [24]  839 	lcall	_delay1
      0001BA 80 05            [24]  840 	sjmp	00141$
      0001BC                        841 00140$:
                                    842 ;	fire_alarm_panel.c:211: PR2 = 1;
                                    843 ;	assignBit
      0001BC D2*06            [12]  844 	setb	_PR2
                                    845 ;	fire_alarm_panel.c:212: prz2();
      0001BE 12r05r6F         [24]  846 	lcall	_prz2
      0001C1                        847 00141$:
                                    848 ;	fire_alarm_panel.c:214: if(RI) receive();
      0001C1 30 98 36         [24]  849 	jnb	_RI,00155$
      0001C4 12r05rE5         [24]  850 	lcall	_receive
      0001C7 80 31            [24]  851 	sjmp	00155$
      0001C9                        852 00154$:
                                    853 ;	fire_alarm_panel.c:217: Z2 = 1; // Mark as isolated
                                    854 ;	assignBit
      0001C9 D2*01            [12]  855 	setb	_Z2
                                    856 ;	fire_alarm_panel.c:220: if(FIRE2 && OPEN2 && SHORT2) {
      0001CB 30 83 21         [24]  857 	jnb	_FIRE2,00147$
      0001CE 30 84 1E         [24]  858 	jnb	_OPEN2,00147$
      0001D1 30 85 1B         [24]  859 	jnb	_SHORT2,00147$
                                    860 ;	fire_alarm_panel.c:222: PR2 = 0;
                                    861 ;	assignBit
      0001D4 C2*06            [12]  862 	clr	_PR2
                                    863 ;	fire_alarm_panel.c:223: SLC2 = 0;
                                    864 ;	assignBit
      0001D6 C2*03            [12]  865 	clr	_SLC2
                                    866 ;	fire_alarm_panel.c:224: lcd_cmd(LINE2);
      0001D8 90r00r0B         [24]  867 	mov	dptr,#_LINE2
      0001DB 75 F0 80         [24]  868 	mov	b, #0x80
      0001DE 12r06rCA         [24]  869 	lcall	_lcd_cmd
                                    870 ;	fire_alarm_panel.c:225: lcd_disp(ISO2); // Show "ZONE-02 ISOLATE" only when healthy
      0001E1 90r00rD9         [24]  871 	mov	dptr,#_ISO2
      0001E4 75 F0 80         [24]  872 	mov	b, #0x80
      0001E7 12r07r1E         [24]  873 	lcall	_lcd_disp
                                    874 ;	fire_alarm_panel.c:226: delay1();
      0001EA 12r07r98         [24]  875 	lcall	_delay1
      0001ED 80 05            [24]  876 	sjmp	00148$
      0001EF                        877 00147$:
                                    878 ;	fire_alarm_panel.c:229: PR2 = 1;
                                    879 ;	assignBit
      0001EF D2*06            [12]  880 	setb	_PR2
                                    881 ;	fire_alarm_panel.c:230: prz2();
      0001F1 12r05r6F         [24]  882 	lcall	_prz2
      0001F4                        883 00148$:
                                    884 ;	fire_alarm_panel.c:232: if(RI) receive();
      0001F4 30 98 03         [24]  885 	jnb	_RI,00155$
      0001F7 12r05rE5         [24]  886 	lcall	_receive
      0001FA                        887 00155$:
                                    888 ;	fire_alarm_panel.c:236: if(!ZONE1 && !ZONE2) {
      0001FA 20 A4 2D         [24]  889 	jb	_ZONE1,00159$
      0001FD 20 A5 2A         [24]  890 	jb	_ZONE2,00159$
                                    891 ;	fire_alarm_panel.c:237: lcd_cmd(LINE2);
      000200 90r00r0B         [24]  892 	mov	dptr,#_LINE2
      000203 75 F0 80         [24]  893 	mov	b, #0x80
      000206 12r06rCA         [24]  894 	lcall	_lcd_cmd
                                    895 ;	fire_alarm_panel.c:238: lcd_disp(TEXT3);
      000209 90r00r2F         [24]  896 	mov	dptr,#_TEXT3
      00020C 75 F0 80         [24]  897 	mov	b, #0x80
      00020F 12r07r1E         [24]  898 	lcall	_lcd_disp
                                    899 ;	fire_alarm_panel.c:240: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000212 75*08 00         [24]  900 	mov	_set_indicators_PARM_2,#0x00
      000215 75*09 01         [24]  901 	mov	_set_indicators_PARM_3,#0x01
      000218 75*0A 00         [24]  902 	mov	_set_indicators_PARM_4,#0x00
      00021B 75 82 01         [24]  903 	mov	dpl, #0x01
      00021E 12r07rB4         [24]  904 	lcall	_set_indicators
                                    905 ;	fire_alarm_panel.c:241: delay1();
      000221 12r07r98         [24]  906 	lcall	_delay1
                                    907 ;	fire_alarm_panel.c:242: if(RI) receive();
      000224 30 98 03         [24]  908 	jnb	_RI,00159$
      000227 12r05rE5         [24]  909 	lcall	_receive
      00022A                        910 00159$:
                                    911 ;	fire_alarm_panel.c:246: if(!SIL) {
      00022A 20 A0 03         [24]  912 	jb	_SIL,00162$
                                    913 ;	fire_alarm_panel.c:247: silence_alarms();
      00022D 12r06r83         [24]  914 	lcall	_silence_alarms
      000230                        915 00162$:
                                    916 ;	fire_alarm_panel.c:251: if(RI) receive();
      000230 30 98 03         [24]  917 	jnb	_RI,00164$
      000233 12r05rE5         [24]  918 	lcall	_receive
      000236                        919 00164$:
                                    920 ;	fire_alarm_panel.c:253: if(!LAMP) { // Lamp test button pressed (active low)
      000236 30 A6 03         [24]  921 	jnb	_LAMP,00743$
      000239 02r02rC6         [24]  922 	ljmp	00171$
      00023C                        923 00743$:
                                    924 ;	fire_alarm_panel.c:255: lcd_cmd(LINE1);
      00023C 90r00r07         [24]  925 	mov	dptr,#_LINE1
      00023F 75 F0 80         [24]  926 	mov	b, #0x80
      000242 12r06rCA         [24]  927 	lcall	_lcd_cmd
                                    928 ;	fire_alarm_panel.c:256: lcd_disp(TLAMP);
      000245 90r00rA6         [24]  929 	mov	dptr,#_TLAMP
      000248 75 F0 80         [24]  930 	mov	b, #0x80
      00024B 12r07r1E         [24]  931 	lcall	_lcd_disp
                                    932 ;	fire_alarm_panel.c:257: lcd_cmd(LINE2);
      00024E 90r00r0B         [24]  933 	mov	dptr,#_LINE2
      000251 75 F0 80         [24]  934 	mov	b, #0x80
      000254 12r06rCA         [24]  935 	lcall	_lcd_cmd
                                    936 ;	fire_alarm_panel.c:258: lcd_disp(TZONE1);
      000257 90r00r40         [24]  937 	mov	dptr,#_TZONE1
      00025A 75 F0 80         [24]  938 	mov	b, #0x80
      00025D 12r07r1E         [24]  939 	lcall	_lcd_disp
                                    940 ;	fire_alarm_panel.c:259: delay1();
      000260 12r07r98         [24]  941 	lcall	_delay1
                                    942 ;	fire_alarm_panel.c:260: delay1();
      000263 12r07r98         [24]  943 	lcall	_delay1
                                    944 ;	fire_alarm_panel.c:263: set_indicators(0, 1, 0, 1);  // HOT=ON, BUZ=ON, CFLR=ON, CFTLR=ON
      000266 75*08 01         [24]  945 	mov	_set_indicators_PARM_2,#0x01
      000269 75*09 00         [24]  946 	mov	_set_indicators_PARM_3,#0x00
      00026C 75*0A 01         [24]  947 	mov	_set_indicators_PARM_4,#0x01
      00026F 75 82 00         [24]  948 	mov	dpl, #0x00
      000272 12r07rB4         [24]  949 	lcall	_set_indicators
                                    950 ;	fire_alarm_panel.c:264: delay1();
      000275 12r07r98         [24]  951 	lcall	_delay1
                                    952 ;	fire_alarm_panel.c:265: set_indicators(1, 0, 1, 0);  // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000278 75*08 00         [24]  953 	mov	_set_indicators_PARM_2,#0x00
      00027B 75*09 01         [24]  954 	mov	_set_indicators_PARM_3,#0x01
      00027E 75*0A 00         [24]  955 	mov	_set_indicators_PARM_4,#0x00
      000281 75 82 01         [24]  956 	mov	dpl, #0x01
      000284 12r07rB4         [24]  957 	lcall	_set_indicators
                                    958 ;	fire_alarm_panel.c:267: lcd_cmd(LINE2);
      000287 90r00r0B         [24]  959 	mov	dptr,#_LINE2
      00028A 75 F0 80         [24]  960 	mov	b, #0x80
      00028D 12r06rCA         [24]  961 	lcall	_lcd_cmd
                                    962 ;	fire_alarm_panel.c:268: lcd_disp(TZONE2);
      000290 90r00r51         [24]  963 	mov	dptr,#_TZONE2
      000293 75 F0 80         [24]  964 	mov	b, #0x80
      000296 12r07r1E         [24]  965 	lcall	_lcd_disp
                                    966 ;	fire_alarm_panel.c:269: delay1();
      000299 12r07r98         [24]  967 	lcall	_delay1
                                    968 ;	fire_alarm_panel.c:272: set_indicators(0, 1, 0, 1);  // HOT=ON, BUZ=ON, CFLR=ON, CFTLR=ON
      00029C 75*08 01         [24]  969 	mov	_set_indicators_PARM_2,#0x01
      00029F 75*09 00         [24]  970 	mov	_set_indicators_PARM_3,#0x00
      0002A2 75*0A 01         [24]  971 	mov	_set_indicators_PARM_4,#0x01
      0002A5 75 82 00         [24]  972 	mov	dpl, #0x00
      0002A8 12r07rB4         [24]  973 	lcall	_set_indicators
                                    974 ;	fire_alarm_panel.c:273: delay1();
      0002AB 12r07r98         [24]  975 	lcall	_delay1
                                    976 ;	fire_alarm_panel.c:274: set_indicators(1, 0, 1, 0);  // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      0002AE 75*08 00         [24]  977 	mov	_set_indicators_PARM_2,#0x00
      0002B1 75*09 01         [24]  978 	mov	_set_indicators_PARM_3,#0x01
      0002B4 75*0A 00         [24]  979 	mov	_set_indicators_PARM_4,#0x00
      0002B7 75 82 01         [24]  980 	mov	dpl, #0x01
      0002BA 12r07rB4         [24]  981 	lcall	_set_indicators
                                    982 ;	fire_alarm_panel.c:277: while(!LAMP);
      0002BD                        983 00165$:
      0002BD 30 A6 FD         [24]  984 	jnb	_LAMP,00165$
                                    985 ;	fire_alarm_panel.c:278: if(RI) receive();
      0002C0 30 98 03         [24]  986 	jnb	_RI,00171$
      0002C3 12r05rE5         [24]  987 	lcall	_receive
      0002C6                        988 00171$:
                                    989 ;	fire_alarm_panel.c:282: if(!EVQ) {
      0002C6 20 A1 53         [24]  990 	jb	_EVQ,00179$
                                    991 ;	fire_alarm_panel.c:283: set_indicators(0, 1, 0, 0);  // HOT=ON, BUZ=ON, CFLR=ON, CFTLR=OFF
      0002C9 75*08 01         [24]  992 	mov	_set_indicators_PARM_2,#0x01
      0002CC 75*09 00         [24]  993 	mov	_set_indicators_PARM_3,#0x00
      0002CF 75*0A 00         [24]  994 	mov	_set_indicators_PARM_4,#0x00
      0002D2 75 82 00         [24]  995 	mov	dpl, #0x00
      0002D5 12r07rB4         [24]  996 	lcall	_set_indicators
                                    997 ;	fire_alarm_panel.c:284: lcd_cmd(LINE1);
      0002D8 90r00r07         [24]  998 	mov	dptr,#_LINE1
      0002DB 75 F0 80         [24]  999 	mov	b, #0x80
      0002DE 12r06rCA         [24] 1000 	lcall	_lcd_cmd
                                   1001 ;	fire_alarm_panel.c:285: lcd_disp(TEVQ);
      0002E1 90r00rB7         [24] 1002 	mov	dptr,#_TEVQ
      0002E4 75 F0 80         [24] 1003 	mov	b, #0x80
      0002E7 12r07r1E         [24] 1004 	lcall	_lcd_disp
                                   1005 ;	fire_alarm_panel.c:286: lcd_cmd(LINE2);
      0002EA 90r00r0B         [24] 1006 	mov	dptr,#_LINE2
      0002ED 75 F0 80         [24] 1007 	mov	b, #0x80
      0002F0 12r06rCA         [24] 1008 	lcall	_lcd_cmd
                                   1009 ;	fire_alarm_panel.c:287: lcd_disp(TEXT4);
      0002F3 90r00r95         [24] 1010 	mov	dptr,#_TEXT4
      0002F6 75 F0 80         [24] 1011 	mov	b, #0x80
      0002F9 12r07r1E         [24] 1012 	lcall	_lcd_disp
                                   1013 ;	fire_alarm_panel.c:290: while(!EVQ && !RI) {
      0002FC                       1014 00173$:
      0002FC 20 A1 08         [24] 1015 	jb	_EVQ,00175$
      0002FF 20 98 05         [24] 1016 	jb	_RI,00175$
                                   1017 ;	fire_alarm_panel.c:291: delay1();
      000302 12r07r98         [24] 1018 	lcall	_delay1
      000305 80 F5            [24] 1019 	sjmp	00173$
      000307                       1020 00175$:
                                   1021 ;	fire_alarm_panel.c:294: if(RI) receive();
      000307 30 98 03         [24] 1022 	jnb	_RI,00177$
      00030A 12r05rE5         [24] 1023 	lcall	_receive
      00030D                       1024 00177$:
                                   1025 ;	fire_alarm_panel.c:297: set_indicators(1, 0, 1, 0);  // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      00030D 75*08 00         [24] 1026 	mov	_set_indicators_PARM_2,#0x00
      000310 75*09 01         [24] 1027 	mov	_set_indicators_PARM_3,#0x01
      000313 75*0A 00         [24] 1028 	mov	_set_indicators_PARM_4,#0x00
      000316 75 82 01         [24] 1029 	mov	dpl, #0x01
      000319 12r07rB4         [24] 1030 	lcall	_set_indicators
      00031C                       1031 00179$:
                                   1032 ;	fire_alarm_panel.c:300: delay();
      00031C 12r07rAB         [24] 1033 	lcall	_delay
                                   1034 ;	fire_alarm_panel.c:303: if(!PR1 && !PR2 && !LB && !ZONE1 && !ZONE2) {
      00031F 20*05 3F         [24] 1035 	jb	_PR1,00181$
      000322 20*06 3C         [24] 1036 	jb	_PR2,00181$
      000325 20 A2 39         [24] 1037 	jb	_LB,00181$
      000328 20 A4 36         [24] 1038 	jb	_ZONE1,00181$
      00032B 20 A5 33         [24] 1039 	jb	_ZONE2,00181$
                                   1040 ;	fire_alarm_panel.c:304: lcd_cmd(LINE1);
      00032E 90r00r07         [24] 1041 	mov	dptr,#_LINE1
      000331 75 F0 80         [24] 1042 	mov	b, #0x80
      000334 12r06rCA         [24] 1043 	lcall	_lcd_cmd
                                   1044 ;	fire_alarm_panel.c:305: lcd_disp(TEXT1);
      000337 90r00r0D         [24] 1045 	mov	dptr,#_TEXT1
      00033A 75 F0 80         [24] 1046 	mov	b, #0x80
      00033D 12r07r1E         [24] 1047 	lcall	_lcd_disp
                                   1048 ;	fire_alarm_panel.c:306: lcd_cmd(LINE2);
      000340 90r00r0B         [24] 1049 	mov	dptr,#_LINE2
      000343 75 F0 80         [24] 1050 	mov	b, #0x80
      000346 12r06rCA         [24] 1051 	lcall	_lcd_cmd
                                   1052 ;	fire_alarm_panel.c:307: lcd_disp(TEXT3);
      000349 90r00r2F         [24] 1053 	mov	dptr,#_TEXT3
      00034C 75 F0 80         [24] 1054 	mov	b, #0x80
      00034F 12r07r1E         [24] 1055 	lcall	_lcd_disp
                                   1056 ;	fire_alarm_panel.c:309: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000352 75*08 00         [24] 1057 	mov	_set_indicators_PARM_2,#0x00
      000355 75*09 01         [24] 1058 	mov	_set_indicators_PARM_3,#0x01
      000358 75*0A 00         [24] 1059 	mov	_set_indicators_PARM_4,#0x00
      00035B 75 82 01         [24] 1060 	mov	dpl, #0x01
      00035E 12r07rB4         [24] 1061 	lcall	_set_indicators
      000361                       1062 00181$:
                                   1063 ;	fire_alarm_panel.c:313: if(!PR1 && !PR2 && !LB) {
      000361 20*05 1B         [24] 1064 	jb	_PR1,00221$
      000364 20*06 18         [24] 1065 	jb	_PR2,00221$
      000367 20 A2 15         [24] 1066 	jb	_LB,00221$
                                   1067 ;	fire_alarm_panel.c:315: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      00036A 75*08 00         [24] 1068 	mov	_set_indicators_PARM_2,#0x00
      00036D 75*09 01         [24] 1069 	mov	_set_indicators_PARM_3,#0x01
      000370 75*0A 00         [24] 1070 	mov	_set_indicators_PARM_4,#0x00
      000373 75 82 01         [24] 1071 	mov	dpl, #0x01
      000376 12r07rB4         [24] 1072 	lcall	_set_indicators
                                   1073 ;	fire_alarm_panel.c:316: BUZZER_COUNTER = 0; // Reset buzzer counter
      000379 75*05 00         [24] 1074 	mov	_BUZZER_COUNTER,#0x00
      00037C 02r04r47         [24] 1075 	ljmp	00222$
      00037F                       1076 00221$:
                                   1077 ;	fire_alarm_panel.c:319: BUZZER_COUNTER++;
      00037F 05*05            [12] 1078 	inc	_BUZZER_COUNTER
                                   1079 ;	fire_alarm_panel.c:320: if(BUZZER_COUNTER > (BUZZER_ON_TIME + BUZZER_OFF_TIME)) {
      000381 E5*05            [12] 1080 	mov	a,_BUZZER_COUNTER
      000383 24 AF            [12] 1081 	add	a,#0xff - 0x50
      000385 50 03            [24] 1082 	jnc	00187$
                                   1083 ;	fire_alarm_panel.c:321: BUZZER_COUNTER = 0; // Reset counter
      000387 75*05 00         [24] 1084 	mov	_BUZZER_COUNTER,#0x00
      00038A                       1085 00187$:
                                   1086 ;	fire_alarm_panel.c:325: unsigned char buzzer_state = (BUZZER_COUNTER < BUZZER_ON_TIME) ? 1 : 0;
      00038A 74 CE            [12] 1087 	mov	a,#0x100 - 0x32
      00038C 25*05            [12] 1088 	add	a,_BUZZER_COUNTER
      00038E 40 04            [24] 1089 	jc	00244$
      000390 7F 01            [12] 1090 	mov	r7,#0x01
      000392 80 02            [24] 1091 	sjmp	00245$
      000394                       1092 00244$:
      000394 7F 00            [12] 1093 	mov	r7,#0x00
      000396                       1094 00245$:
                                   1095 ;	fire_alarm_panel.c:328: if((PR1 && !FIRE1) || (PR2 && !FIRE2)) {
      000396 30*05 03         [24] 1096 	jnb	_PR1,00214$
      000399 30 80 06         [24] 1097 	jnb	_FIRE1,00209$
      00039C                       1098 00214$:
      00039C 30*06 3E         [24] 1099 	jnb	_PR2,00210$
      00039F 20 83 3B         [24] 1100 	jb	_FIRE2,00210$
      0003A2                       1101 00209$:
                                   1102 ;	fire_alarm_panel.c:330: if((!SLC1 && PR1 && !FIRE1) || (!SLC2 && PR2 && !FIRE2)) {
      0003A2 20*02 06         [24] 1103 	jb	_SLC1,00195$
      0003A5 30*05 03         [24] 1104 	jnb	_PR1,00195$
      0003A8 30 80 09         [24] 1105 	jnb	_FIRE1,00188$
      0003AB                       1106 00195$:
      0003AB 20*03 1A         [24] 1107 	jb	_SLC2,00189$
      0003AE 30*06 17         [24] 1108 	jnb	_PR2,00189$
      0003B1 20 83 14         [24] 1109 	jb	_FIRE2,00189$
      0003B4                       1110 00188$:
                                   1111 ;	fire_alarm_panel.c:332: set_indicators(0, buzzer_state, 0, 0); // HOT=ON, BUZ=repeating, CFLR=ON, CFTLR=OFF
      0003B4 8F*08            [24] 1112 	mov	_set_indicators_PARM_2,r7
      0003B6 75*09 00         [24] 1113 	mov	_set_indicators_PARM_3,#0x00
      0003B9 75*0A 00         [24] 1114 	mov	_set_indicators_PARM_4,#0x00
      0003BC 75 82 00         [24] 1115 	mov	dpl, #0x00
      0003BF C0 07            [24] 1116 	push	ar7
      0003C1 12r07rB4         [24] 1117 	lcall	_set_indicators
      0003C4 D0 07            [24] 1118 	pop	ar7
      0003C6 80 5A            [24] 1119 	sjmp	00211$
      0003C8                       1120 00189$:
                                   1121 ;	fire_alarm_panel.c:335: set_indicators(1, 0, 0, 0); // HOT=OFF(silenced), BUZ=OFF(silenced), CFLR=ON, CFTLR=OFF
      0003C8 75*08 00         [24] 1122 	mov	_set_indicators_PARM_2,#0x00
      0003CB 75*09 00         [24] 1123 	mov	_set_indicators_PARM_3,#0x00
      0003CE 75*0A 00         [24] 1124 	mov	_set_indicators_PARM_4,#0x00
      0003D1 75 82 01         [24] 1125 	mov	dpl, #0x01
      0003D4 C0 07            [24] 1126 	push	ar7
      0003D6 12r07rB4         [24] 1127 	lcall	_set_indicators
      0003D9 D0 07            [24] 1128 	pop	ar7
      0003DB 80 45            [24] 1129 	sjmp	00211$
      0003DD                       1130 00210$:
                                   1131 ;	fire_alarm_panel.c:339: else if((PR1 && (!SHORT1 || !OPEN1)) || (PR2 && (!SHORT2 || !OPEN2))) {
      0003DD 30*05 06         [24] 1132 	jnb	_PR1,00208$
      0003E0 30 82 0C         [24] 1133 	jnb	_SHORT1,00202$
      0003E3 30 81 09         [24] 1134 	jnb	_OPEN1,00202$
      0003E6                       1135 00208$:
      0003E6 30*06 39         [24] 1136 	jnb	_PR2,00211$
      0003E9 30 85 03         [24] 1137 	jnb	_SHORT2,00202$
      0003EC 20 84 33         [24] 1138 	jb	_OPEN2,00211$
      0003EF                       1139 00202$:
                                   1140 ;	fire_alarm_panel.c:341: if((!SLC1 && PR1) || (!SLC2 && PR2)) {
      0003EF 20*02 03         [24] 1141 	jb	_SLC1,00201$
      0003F2 20*05 06         [24] 1142 	jb	_PR1,00196$
      0003F5                       1143 00201$:
      0003F5 20*03 17         [24] 1144 	jb	_SLC2,00197$
      0003F8 30*06 14         [24] 1145 	jnb	_PR2,00197$
      0003FB                       1146 00196$:
                                   1147 ;	fire_alarm_panel.c:343: set_indicators(1, buzzer_state, 1, 1); // HOT=OFF, BUZ=repeating, CFLR=OFF, CFTLR=ON
      0003FB 8F*08            [24] 1148 	mov	_set_indicators_PARM_2,r7
      0003FD 75*09 01         [24] 1149 	mov	_set_indicators_PARM_3,#0x01
      000400 75*0A 01         [24] 1150 	mov	_set_indicators_PARM_4,#0x01
      000403 75 82 01         [24] 1151 	mov	dpl, #0x01
      000406 C0 07            [24] 1152 	push	ar7
      000408 12r07rB4         [24] 1153 	lcall	_set_indicators
      00040B D0 07            [24] 1154 	pop	ar7
      00040D 80 13            [24] 1155 	sjmp	00211$
      00040F                       1156 00197$:
                                   1157 ;	fire_alarm_panel.c:346: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      00040F 75*08 00         [24] 1158 	mov	_set_indicators_PARM_2,#0x00
      000412 75*09 01         [24] 1159 	mov	_set_indicators_PARM_3,#0x01
      000415 75*0A 01         [24] 1160 	mov	_set_indicators_PARM_4,#0x01
      000418 75 82 01         [24] 1161 	mov	dpl, #0x01
      00041B C0 07            [24] 1162 	push	ar7
      00041D 12r07rB4         [24] 1163 	lcall	_set_indicators
      000420 D0 07            [24] 1164 	pop	ar7
      000422                       1165 00211$:
                                   1166 ;	fire_alarm_panel.c:351: if(LB) {
      000422 30 A2 22         [24] 1167 	jnb	_LB,00222$
                                   1168 ;	fire_alarm_panel.c:352: if(!LISO) {
      000425 20*04 10         [24] 1169 	jb	_LISO,00216$
                                   1170 ;	fire_alarm_panel.c:354: set_indicators(1, buzzer_state, 1, 1); // HOT=OFF, BUZ=repeating, CFLR=OFF, CFTLR=ON
      000428 8F*08            [24] 1171 	mov	_set_indicators_PARM_2,r7
      00042A 75*09 01         [24] 1172 	mov	_set_indicators_PARM_3,#0x01
      00042D 75*0A 01         [24] 1173 	mov	_set_indicators_PARM_4,#0x01
      000430 75 82 01         [24] 1174 	mov	dpl, #0x01
      000433 12r07rB4         [24] 1175 	lcall	_set_indicators
      000436 80 0F            [24] 1176 	sjmp	00222$
      000438                       1177 00216$:
                                   1178 ;	fire_alarm_panel.c:357: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      000438 75*08 00         [24] 1179 	mov	_set_indicators_PARM_2,#0x00
      00043B 75*09 01         [24] 1180 	mov	_set_indicators_PARM_3,#0x01
      00043E 75*0A 01         [24] 1181 	mov	_set_indicators_PARM_4,#0x01
      000441 75 82 01         [24] 1182 	mov	dpl, #0x01
      000444 12r07rB4         [24] 1183 	lcall	_set_indicators
      000447                       1184 00222$:
                                   1185 ;	fire_alarm_panel.c:365: if(LB) {  // Fixed: LB=1 means battery is low
      000447 30 A2 64         [24] 1186 	jnb	_LB,00231$
                                   1187 ;	fire_alarm_panel.c:367: if(!LISO) {
      00044A 20*04 25         [24] 1188 	jb	_LISO,00228$
                                   1189 ;	fire_alarm_panel.c:368: set_indicators(1, 1, 1, 1); // HOT=OFF, BUZ=ON, CFLR=OFF, CFTLR=ON
      00044D 75*08 01         [24] 1190 	mov	_set_indicators_PARM_2,#0x01
      000450 75*09 01         [24] 1191 	mov	_set_indicators_PARM_3,#0x01
      000453 75*0A 01         [24] 1192 	mov	_set_indicators_PARM_4,#0x01
      000456 75 82 01         [24] 1193 	mov	dpl, #0x01
      000459 12r07rB4         [24] 1194 	lcall	_set_indicators
                                   1195 ;	fire_alarm_panel.c:369: if(!SIL) {
      00045C 20 A0 22         [24] 1196 	jb	_SIL,00229$
                                   1197 ;	fire_alarm_panel.c:371: LISO = 1;
                                   1198 ;	assignBit
      00045F D2*04            [12] 1199 	setb	_LISO
                                   1200 ;	fire_alarm_panel.c:372: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      000461 75*08 00         [24] 1201 	mov	_set_indicators_PARM_2,#0x00
      000464 75*09 01         [24] 1202 	mov	_set_indicators_PARM_3,#0x01
      000467 75*0A 01         [24] 1203 	mov	_set_indicators_PARM_4,#0x01
      00046A 75 82 01         [24] 1204 	mov	dpl, #0x01
      00046D 12r07rB4         [24] 1205 	lcall	_set_indicators
      000470 80 0F            [24] 1206 	sjmp	00229$
      000472                       1207 00228$:
                                   1208 ;	fire_alarm_panel.c:375: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      000472 75*08 00         [24] 1209 	mov	_set_indicators_PARM_2,#0x00
      000475 75*09 01         [24] 1210 	mov	_set_indicators_PARM_3,#0x01
      000478 75*0A 01         [24] 1211 	mov	_set_indicators_PARM_4,#0x01
      00047B 75 82 01         [24] 1212 	mov	dpl, #0x01
      00047E 12r07rB4         [24] 1213 	lcall	_set_indicators
      000481                       1214 00229$:
                                   1215 ;	fire_alarm_panel.c:378: lcd_cmd(LINE1);
      000481 90r00r07         [24] 1216 	mov	dptr,#_LINE1
      000484 75 F0 80         [24] 1217 	mov	b, #0x80
      000487 12r06rCA         [24] 1218 	lcall	_lcd_cmd
                                   1219 ;	fire_alarm_panel.c:379: lcd_disp(LOWB);
      00048A 90r01r0C         [24] 1220 	mov	dptr,#_LOWB
      00048D 75 F0 80         [24] 1221 	mov	b, #0x80
      000490 12r07r1E         [24] 1222 	lcall	_lcd_disp
                                   1223 ;	fire_alarm_panel.c:380: lcd_cmd(LINE2);
      000493 90r00r0B         [24] 1224 	mov	dptr,#_LINE2
      000496 75 F0 80         [24] 1225 	mov	b, #0x80
      000499 12r06rCA         [24] 1226 	lcall	_lcd_cmd
                                   1227 ;	fire_alarm_panel.c:381: lcd_disp(LOWM);
      00049C 90r01r1D         [24] 1228 	mov	dptr,#_LOWM
      00049F 75 F0 80         [24] 1229 	mov	b, #0x80
      0004A2 12r07r1E         [24] 1230 	lcall	_lcd_disp
                                   1231 ;	fire_alarm_panel.c:382: delay1();
      0004A5 12r07r98         [24] 1232 	lcall	_delay1
                                   1233 ;	fire_alarm_panel.c:383: delay1();
      0004A8 12r07r98         [24] 1234 	lcall	_delay1
                                   1235 ;	fire_alarm_panel.c:386: continue;
      0004AB 02r00r44         [24] 1236 	ljmp	00234$
      0004AE                       1237 00231$:
                                   1238 ;	fire_alarm_panel.c:389: LISO = 0;
                                   1239 ;	assignBit
      0004AE C2*04            [12] 1240 	clr	_LISO
                                   1241 ;	fire_alarm_panel.c:393: }
      0004B0 02r00r44         [24] 1242 	ljmp	00234$
                                   1243 ;------------------------------------------------------------
                                   1244 ;Allocation info for local variables in function 'init_system'
                                   1245 ;------------------------------------------------------------
                                   1246 ;	fire_alarm_panel.c:395: void init_system(void)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function init_system
                                   1249 ;	-----------------------------------------
      0004B3                       1250 _init_system:
                                   1251 ;	fire_alarm_panel.c:398: TMOD = 0x20;
      0004B3 75 89 20         [24] 1252 	mov	_TMOD,#0x20
                                   1253 ;	fire_alarm_panel.c:399: TH1 = 253;  // -3 for 9600 baud
      0004B6 75 8D FD         [24] 1254 	mov	_TH1,#0xfd
                                   1255 ;	fire_alarm_panel.c:400: SCON = 0x50;
      0004B9 75 98 50         [24] 1256 	mov	_SCON,#0x50
                                   1257 ;	fire_alarm_panel.c:401: TR1 = 1;
                                   1258 ;	assignBit
      0004BC D2 8E            [12] 1259 	setb	_TR1
                                   1260 ;	fire_alarm_panel.c:404: P0 = 0xFF;  // All inputs pulled high (active low inputs)
      0004BE 75 80 FF         [24] 1261 	mov	_P0,#0xff
                                   1262 ;	fire_alarm_panel.c:405: P2 = 0xFF;  // Control inputs pulled high
      0004C1 75 A0 FF         [24] 1263 	mov	_P2,#0xff
                                   1264 ;	fire_alarm_panel.c:406: P3 = 0xFF;
      0004C4 75 B0 FF         [24] 1265 	mov	_P3,#0xff
                                   1266 ;	fire_alarm_panel.c:409: P1 = 0x00;
      0004C7 75 90 00         [24] 1267 	mov	_P1,#0x00
                                   1268 ;	fire_alarm_panel.c:413: set_indicators(1, 0, 1, 0);
      0004CA 75*08 00         [24] 1269 	mov	_set_indicators_PARM_2,#0x00
      0004CD 75*09 01         [24] 1270 	mov	_set_indicators_PARM_3,#0x01
      0004D0 75*0A 00         [24] 1271 	mov	_set_indicators_PARM_4,#0x00
      0004D3 75 82 01         [24] 1272 	mov	dpl, #0x01
      0004D6 12r07rB4         [24] 1273 	lcall	_set_indicators
                                   1274 ;	fire_alarm_panel.c:415: BL = 1;     // Backlight ON initially
                                   1275 ;	assignBit
      0004D9 D2 A7            [12] 1276 	setb	_BL
                                   1277 ;	fire_alarm_panel.c:418: LISO = 0;
                                   1278 ;	assignBit
      0004DB C2*04            [12] 1279 	clr	_LISO
                                   1280 ;	fire_alarm_panel.c:419: SLC1 = 0;
                                   1281 ;	assignBit
      0004DD C2*02            [12] 1282 	clr	_SLC1
                                   1283 ;	fire_alarm_panel.c:420: SLC2 = 0;
                                   1284 ;	assignBit
      0004DF C2*03            [12] 1285 	clr	_SLC2
                                   1286 ;	fire_alarm_panel.c:421: Z1 = 0;
                                   1287 ;	assignBit
      0004E1 C2*00            [12] 1288 	clr	_Z1
                                   1289 ;	fire_alarm_panel.c:422: Z2 = 0;
                                   1290 ;	assignBit
      0004E3 C2*01            [12] 1291 	clr	_Z2
                                   1292 ;	fire_alarm_panel.c:423: PR1 = 0;
                                   1293 ;	assignBit
      0004E5 C2*05            [12] 1294 	clr	_PR1
                                   1295 ;	fire_alarm_panel.c:424: PR2 = 0;
                                   1296 ;	assignBit
      0004E7 C2*06            [12] 1297 	clr	_PR2
                                   1298 ;	fire_alarm_panel.c:426: BLT1 = 30;
      0004E9 75*00 1E         [24] 1299 	mov	_BLT1,#0x1e
                                   1300 ;	fire_alarm_panel.c:427: BL_TIMER = BL_TIMEOUT; // Start 5-minute countdown for normal condition
      0004EC 75*01 2C         [24] 1301 	mov	_BL_TIMER,#0x2c
      0004EF 75*02 01         [24] 1302 	mov	(_BL_TIMER + 1),#0x01
                                   1303 ;	fire_alarm_panel.c:428: RAP = 0;
      0004F2 75*03 00         [24] 1304 	mov	_RAP,#0x00
                                   1305 ;	fire_alarm_panel.c:429: BUZZER_COUNTER = 0; // Initialize buzzer counter
      0004F5 75*05 00         [24] 1306 	mov	_BUZZER_COUNTER,#0x00
                                   1307 ;	fire_alarm_panel.c:430: }
      0004F8 22               [24] 1308 	ret
                                   1309 ;------------------------------------------------------------
                                   1310 ;Allocation info for local variables in function 'prz1'
                                   1311 ;------------------------------------------------------------
                                   1312 ;	fire_alarm_panel.c:432: void prz1(void)
                                   1313 ;	-----------------------------------------
                                   1314 ;	 function prz1
                                   1315 ;	-----------------------------------------
      0004F9                       1316 _prz1:
                                   1317 ;	fire_alarm_panel.c:434: if(!Z1) {
      0004F9 20*00 12         [24] 1318 	jb	_Z1,00102$
                                   1319 ;	fire_alarm_panel.c:435: lcd_cmd(LINE1);
      0004FC 90r00r07         [24] 1320 	mov	dptr,#_LINE1
      0004FF 75 F0 80         [24] 1321 	mov	b, #0x80
      000502 12r06rCA         [24] 1322 	lcall	_lcd_cmd
                                   1323 ;	fire_alarm_panel.c:436: lcd_disp(TZONE1);
      000505 90r00r40         [24] 1324 	mov	dptr,#_TZONE1
      000508 75 F0 80         [24] 1325 	mov	b, #0x80
      00050B 12r07r1E         [24] 1326 	lcall	_lcd_disp
      00050E                       1327 00102$:
                                   1328 ;	fire_alarm_panel.c:440: if(!SHORT1) {
      00050E 20 82 14         [24] 1329 	jb	_SHORT1,00112$
                                   1330 ;	fire_alarm_panel.c:441: lcd_cmd(LINE2);
      000511 90r00r0B         [24] 1331 	mov	dptr,#_LINE2
      000514 75 F0 80         [24] 1332 	mov	b, #0x80
      000517 12r06rCA         [24] 1333 	lcall	_lcd_cmd
                                   1334 ;	fire_alarm_panel.c:442: lcd_disp(SHORT);
      00051A 90r00r73         [24] 1335 	mov	dptr,#_SHORT
      00051D 75 F0 80         [24] 1336 	mov	b, #0x80
      000520 12r07r1E         [24] 1337 	lcall	_lcd_disp
      000523 80 47            [24] 1338 	sjmp	00113$
      000525                       1339 00112$:
                                   1340 ;	fire_alarm_panel.c:444: } else if(!FIRE1) {
      000525 20 80 14         [24] 1341 	jb	_FIRE1,00109$
                                   1342 ;	fire_alarm_panel.c:445: lcd_cmd(LINE2);
      000528 90r00r0B         [24] 1343 	mov	dptr,#_LINE2
      00052B 75 F0 80         [24] 1344 	mov	b, #0x80
      00052E 12r06rCA         [24] 1345 	lcall	_lcd_cmd
                                   1346 ;	fire_alarm_panel.c:446: lcd_disp(FIRE);
      000531 90r00r62         [24] 1347 	mov	dptr,#_FIRE
      000534 75 F0 80         [24] 1348 	mov	b, #0x80
      000537 12r07r1E         [24] 1349 	lcall	_lcd_disp
      00053A 80 30            [24] 1350 	sjmp	00113$
      00053C                       1351 00109$:
                                   1352 ;	fire_alarm_panel.c:448: } else if(!OPEN1) {
      00053C 20 81 14         [24] 1353 	jb	_OPEN1,00106$
                                   1354 ;	fire_alarm_panel.c:449: lcd_cmd(LINE2);
      00053F 90r00r0B         [24] 1355 	mov	dptr,#_LINE2
      000542 75 F0 80         [24] 1356 	mov	b, #0x80
      000545 12r06rCA         [24] 1357 	lcall	_lcd_cmd
                                   1358 ;	fire_alarm_panel.c:450: lcd_disp(OPEN);
      000548 90r00r84         [24] 1359 	mov	dptr,#_OPEN
      00054B 75 F0 80         [24] 1360 	mov	b, #0x80
      00054E 12r07r1E         [24] 1361 	lcall	_lcd_disp
      000551 80 19            [24] 1362 	sjmp	00113$
      000553                       1363 00106$:
                                   1364 ;	fire_alarm_panel.c:455: PR1 = 0;
                                   1365 ;	assignBit
      000553 C2*05            [12] 1366 	clr	_PR1
                                   1367 ;	fire_alarm_panel.c:456: SLC1 = 0;
                                   1368 ;	assignBit
      000555 C2*02            [12] 1369 	clr	_SLC1
                                   1370 ;	fire_alarm_panel.c:458: if(ZONE1) { // If zone is not isolated
      000557 30 A4 12         [24] 1371 	jnb	_ZONE1,00113$
                                   1372 ;	fire_alarm_panel.c:459: lcd_cmd(LINE2);
      00055A 90r00r0B         [24] 1373 	mov	dptr,#_LINE2
      00055D 75 F0 80         [24] 1374 	mov	b, #0x80
      000560 12r06rCA         [24] 1375 	lcall	_lcd_cmd
                                   1376 ;	fire_alarm_panel.c:460: lcd_disp(ISO1H);
      000563 90r00rEA         [24] 1377 	mov	dptr,#_ISO1H
      000566 75 F0 80         [24] 1378 	mov	b, #0x80
      000569 12r07r1E         [24] 1379 	lcall	_lcd_disp
      00056C                       1380 00113$:
                                   1381 ;	fire_alarm_panel.c:464: delay1();
                                   1382 ;	fire_alarm_panel.c:465: }
      00056C 02r07r98         [24] 1383 	ljmp	_delay1
                                   1384 ;------------------------------------------------------------
                                   1385 ;Allocation info for local variables in function 'prz2'
                                   1386 ;------------------------------------------------------------
                                   1387 ;	fire_alarm_panel.c:467: void prz2(void)
                                   1388 ;	-----------------------------------------
                                   1389 ;	 function prz2
                                   1390 ;	-----------------------------------------
      00056F                       1391 _prz2:
                                   1392 ;	fire_alarm_panel.c:469: if(!Z2) { // Fixed: should check Z2 for zone 2 testing
      00056F 20*01 12         [24] 1393 	jb	_Z2,00102$
                                   1394 ;	fire_alarm_panel.c:470: lcd_cmd(LINE1);
      000572 90r00r07         [24] 1395 	mov	dptr,#_LINE1
      000575 75 F0 80         [24] 1396 	mov	b, #0x80
      000578 12r06rCA         [24] 1397 	lcall	_lcd_cmd
                                   1398 ;	fire_alarm_panel.c:471: lcd_disp(TZONE2);
      00057B 90r00r51         [24] 1399 	mov	dptr,#_TZONE2
      00057E 75 F0 80         [24] 1400 	mov	b, #0x80
      000581 12r07r1E         [24] 1401 	lcall	_lcd_disp
      000584                       1402 00102$:
                                   1403 ;	fire_alarm_panel.c:475: if(!SHORT2) {
      000584 20 85 14         [24] 1404 	jb	_SHORT2,00112$
                                   1405 ;	fire_alarm_panel.c:476: lcd_cmd(LINE2);
      000587 90r00r0B         [24] 1406 	mov	dptr,#_LINE2
      00058A 75 F0 80         [24] 1407 	mov	b, #0x80
      00058D 12r06rCA         [24] 1408 	lcall	_lcd_cmd
                                   1409 ;	fire_alarm_panel.c:477: lcd_disp(SHORT);
      000590 90r00r73         [24] 1410 	mov	dptr,#_SHORT
      000593 75 F0 80         [24] 1411 	mov	b, #0x80
      000596 12r07r1E         [24] 1412 	lcall	_lcd_disp
      000599 80 47            [24] 1413 	sjmp	00113$
      00059B                       1414 00112$:
                                   1415 ;	fire_alarm_panel.c:479: } else if(!FIRE2) {
      00059B 20 83 14         [24] 1416 	jb	_FIRE2,00109$
                                   1417 ;	fire_alarm_panel.c:480: lcd_cmd(LINE2);
      00059E 90r00r0B         [24] 1418 	mov	dptr,#_LINE2
      0005A1 75 F0 80         [24] 1419 	mov	b, #0x80
      0005A4 12r06rCA         [24] 1420 	lcall	_lcd_cmd
                                   1421 ;	fire_alarm_panel.c:481: lcd_disp(FIRE);
      0005A7 90r00r62         [24] 1422 	mov	dptr,#_FIRE
      0005AA 75 F0 80         [24] 1423 	mov	b, #0x80
      0005AD 12r07r1E         [24] 1424 	lcall	_lcd_disp
      0005B0 80 30            [24] 1425 	sjmp	00113$
      0005B2                       1426 00109$:
                                   1427 ;	fire_alarm_panel.c:483: } else if(!OPEN2) {
      0005B2 20 84 14         [24] 1428 	jb	_OPEN2,00106$
                                   1429 ;	fire_alarm_panel.c:484: lcd_cmd(LINE2);
      0005B5 90r00r0B         [24] 1430 	mov	dptr,#_LINE2
      0005B8 75 F0 80         [24] 1431 	mov	b, #0x80
      0005BB 12r06rCA         [24] 1432 	lcall	_lcd_cmd
                                   1433 ;	fire_alarm_panel.c:485: lcd_disp(OPEN);
      0005BE 90r00r84         [24] 1434 	mov	dptr,#_OPEN
      0005C1 75 F0 80         [24] 1435 	mov	b, #0x80
      0005C4 12r07r1E         [24] 1436 	lcall	_lcd_disp
      0005C7 80 19            [24] 1437 	sjmp	00113$
      0005C9                       1438 00106$:
                                   1439 ;	fire_alarm_panel.c:490: PR2 = 0;
                                   1440 ;	assignBit
      0005C9 C2*06            [12] 1441 	clr	_PR2
                                   1442 ;	fire_alarm_panel.c:491: SLC2 = 0;
                                   1443 ;	assignBit
      0005CB C2*03            [12] 1444 	clr	_SLC2
                                   1445 ;	fire_alarm_panel.c:493: if(ZONE2) { // If zone is not isolated
      0005CD 30 A5 12         [24] 1446 	jnb	_ZONE2,00113$
                                   1447 ;	fire_alarm_panel.c:494: lcd_cmd(LINE2);
      0005D0 90r00r0B         [24] 1448 	mov	dptr,#_LINE2
      0005D3 75 F0 80         [24] 1449 	mov	b, #0x80
      0005D6 12r06rCA         [24] 1450 	lcall	_lcd_cmd
                                   1451 ;	fire_alarm_panel.c:495: lcd_disp(ISO2H);
      0005D9 90r00rFB         [24] 1452 	mov	dptr,#_ISO2H
      0005DC 75 F0 80         [24] 1453 	mov	b, #0x80
      0005DF 12r07r1E         [24] 1454 	lcall	_lcd_disp
      0005E2                       1455 00113$:
                                   1456 ;	fire_alarm_panel.c:499: delay1();
                                   1457 ;	fire_alarm_panel.c:500: }
      0005E2 02r07r98         [24] 1458 	ljmp	_delay1
                                   1459 ;------------------------------------------------------------
                                   1460 ;Allocation info for local variables in function 'receive'
                                   1461 ;------------------------------------------------------------
                                   1462 ;received_data Allocated to registers r7 
                                   1463 ;------------------------------------------------------------
                                   1464 ;	fire_alarm_panel.c:502: void receive(void)
                                   1465 ;	-----------------------------------------
                                   1466 ;	 function receive
                                   1467 ;	-----------------------------------------
      0005E5                       1468 _receive:
                                   1469 ;	fire_alarm_panel.c:506: received_data = SBUF;
      0005E5 AF 99            [24] 1470 	mov	r7,_SBUF
                                   1471 ;	fire_alarm_panel.c:507: RI = 0;
                                   1472 ;	assignBit
      0005E7 C2 98            [12] 1473 	clr	_RI
                                   1474 ;	fire_alarm_panel.c:508: SBUF = received_data;
      0005E9 8F 99            [24] 1475 	mov	_SBUF,r7
                                   1476 ;	fire_alarm_panel.c:509: while(!TI);
      0005EB                       1477 00101$:
                                   1478 ;	fire_alarm_panel.c:510: TI = 0;
                                   1479 ;	assignBit
      0005EB 10 99 02         [24] 1480 	jbc	_TI,00281$
      0005EE 80 FB            [24] 1481 	sjmp	00101$
      0005F0                       1482 00281$:
                                   1483 ;	fire_alarm_panel.c:512: switch(received_data) {
      0005F0 BF 00 02         [24] 1484 	cjne	r7,#0x00,00282$
      0005F3 80 32            [24] 1485 	sjmp	00106$
      0005F5                       1486 00282$:
      0005F5 BF 01 02         [24] 1487 	cjne	r7,#0x01,00283$
      0005F8 80 3C            [24] 1488 	sjmp	00110$
      0005FA                       1489 00283$:
      0005FA BF 02 02         [24] 1490 	cjne	r7,#0x02,00284$
      0005FD 80 46            [24] 1491 	sjmp	00114$
      0005FF                       1492 00284$:
      0005FF BF 03 02         [24] 1493 	cjne	r7,#0x03,00285$
      000602 80 55            [24] 1494 	sjmp	00122$
      000604                       1495 00285$:
      000604 BF 40 02         [24] 1496 	cjne	r7,#0x40,00286$
      000607 80 46            [24] 1497 	sjmp	00118$
      000609                       1498 00286$:
      000609 BF AA 02         [24] 1499 	cjne	r7,#0xaa,00287$
      00060C 80 0A            [24] 1500 	sjmp	00104$
      00060E                       1501 00287$:
      00060E BF BB 02         [24] 1502 	cjne	r7,#0xbb,00288$
      000611 80 0B            [24] 1503 	sjmp	00105$
      000613                       1504 00288$:
                                   1505 ;	fire_alarm_panel.c:513: case 0xAA:
      000613 BF FF 5C         [24] 1506 	cjne	r7,#0xff,00130$
      000616 80 50            [24] 1507 	sjmp	00126$
      000618                       1508 00104$:
                                   1509 ;	fire_alarm_panel.c:514: send_data(P2);
      000618 85 A0 82         [24] 1510 	mov	dpl, _P2
                                   1511 ;	fire_alarm_panel.c:515: break;
                                   1512 ;	fire_alarm_panel.c:517: case 0xBB:
      00061B 02r06r7A         [24] 1513 	ljmp	_send_data
      00061E                       1514 00105$:
                                   1515 ;	fire_alarm_panel.c:518: send_data(P0 | 0xC0);
      00061E 74 C0            [12] 1516 	mov	a,#0xc0
      000620 45 80            [12] 1517 	orl	a,_P0
      000622 F5 82            [12] 1518 	mov	dpl,a
                                   1519 ;	fire_alarm_panel.c:519: break;
                                   1520 ;	fire_alarm_panel.c:521: case 0x00:
      000624 02r06r7A         [24] 1521 	ljmp	_send_data
      000627                       1522 00106$:
                                   1523 ;	fire_alarm_panel.c:522: silence_alarms();
      000627 C0 07            [24] 1524 	push	ar7
      000629 12r06r83         [24] 1525 	lcall	_silence_alarms
      00062C D0 07            [24] 1526 	pop	ar7
                                   1527 ;	fire_alarm_panel.c:523: SBUF = received_data;
      00062E 8F 99            [24] 1528 	mov	_SBUF,r7
                                   1529 ;	fire_alarm_panel.c:524: while(!TI);
      000630                       1530 00107$:
                                   1531 ;	fire_alarm_panel.c:525: TI = 0;
                                   1532 ;	assignBit
      000630 10 99 02         [24] 1533 	jbc	_TI,00290$
      000633 80 FB            [24] 1534 	sjmp	00107$
      000635                       1535 00290$:
                                   1536 ;	fire_alarm_panel.c:526: break;
                                   1537 ;	fire_alarm_panel.c:528: case 0x01:
      000635 22               [24] 1538 	ret
      000636                       1539 00110$:
                                   1540 ;	fire_alarm_panel.c:529: silence_alarms();
      000636 C0 07            [24] 1541 	push	ar7
      000638 12r06r83         [24] 1542 	lcall	_silence_alarms
      00063B D0 07            [24] 1543 	pop	ar7
                                   1544 ;	fire_alarm_panel.c:530: SBUF = received_data;
      00063D 8F 99            [24] 1545 	mov	_SBUF,r7
                                   1546 ;	fire_alarm_panel.c:531: while(!TI);
      00063F                       1547 00111$:
                                   1548 ;	fire_alarm_panel.c:532: TI = 0;
                                   1549 ;	assignBit
      00063F 10 99 02         [24] 1550 	jbc	_TI,00291$
      000642 80 FB            [24] 1551 	sjmp	00111$
      000644                       1552 00291$:
                                   1553 ;	fire_alarm_panel.c:533: break;
                                   1554 ;	fire_alarm_panel.c:535: case 0x02:
      000644 22               [24] 1555 	ret
      000645                       1556 00114$:
                                   1557 ;	fire_alarm_panel.c:536: EVQ = 0;
                                   1558 ;	assignBit
      000645 C2 A1            [12] 1559 	clr	_EVQ
                                   1560 ;	fire_alarm_panel.c:537: SBUF = received_data;
      000647 8F 99            [24] 1561 	mov	_SBUF,r7
                                   1562 ;	fire_alarm_panel.c:538: while(!TI);
      000649                       1563 00115$:
                                   1564 ;	fire_alarm_panel.c:539: TI = 0;
                                   1565 ;	assignBit
      000649 10 99 02         [24] 1566 	jbc	_TI,00292$
      00064C 80 FB            [24] 1567 	sjmp	00115$
      00064E                       1568 00292$:
                                   1569 ;	fire_alarm_panel.c:540: break;
                                   1570 ;	fire_alarm_panel.c:542: case 0x40:
      00064E 22               [24] 1571 	ret
      00064F                       1572 00118$:
                                   1573 ;	fire_alarm_panel.c:543: Z2 = 1;
                                   1574 ;	assignBit
      00064F D2*01            [12] 1575 	setb	_Z2
                                   1576 ;	fire_alarm_panel.c:544: SBUF = received_data;
      000651 8F 99            [24] 1577 	mov	_SBUF,r7
                                   1578 ;	fire_alarm_panel.c:545: while(!TI);
      000653                       1579 00119$:
                                   1580 ;	fire_alarm_panel.c:546: TI = 0;
                                   1581 ;	assignBit
      000653 10 99 02         [24] 1582 	jbc	_TI,00293$
      000656 80 FB            [24] 1583 	sjmp	00119$
      000658                       1584 00293$:
                                   1585 ;	fire_alarm_panel.c:547: break;
                                   1586 ;	fire_alarm_panel.c:549: case 0x03:
      000658 22               [24] 1587 	ret
      000659                       1588 00122$:
                                   1589 ;	fire_alarm_panel.c:550: silence_alarms();
      000659 C0 07            [24] 1590 	push	ar7
      00065B 12r06r83         [24] 1591 	lcall	_silence_alarms
      00065E D0 07            [24] 1592 	pop	ar7
                                   1593 ;	fire_alarm_panel.c:551: SBUF = received_data;
      000660 8F 99            [24] 1594 	mov	_SBUF,r7
                                   1595 ;	fire_alarm_panel.c:552: while(!TI);
      000662                       1596 00123$:
                                   1597 ;	fire_alarm_panel.c:553: TI = 0;
                                   1598 ;	assignBit
      000662 10 99 02         [24] 1599 	jbc	_TI,00294$
      000665 80 FB            [24] 1600 	sjmp	00123$
      000667                       1601 00294$:
                                   1602 ;	fire_alarm_panel.c:554: break;
                                   1603 ;	fire_alarm_panel.c:556: case 0xFF:
      000667 22               [24] 1604 	ret
      000668                       1605 00126$:
                                   1606 ;	fire_alarm_panel.c:557: SBUF = received_data;
      000668 8F 99            [24] 1607 	mov	_SBUF,r7
                                   1608 ;	fire_alarm_panel.c:558: while(!TI);
      00066A                       1609 00127$:
                                   1610 ;	fire_alarm_panel.c:559: TI = 0;
                                   1611 ;	assignBit
      00066A 10 99 02         [24] 1612 	jbc	_TI,00295$
      00066D 80 FB            [24] 1613 	sjmp	00127$
      00066F                       1614 00295$:
                                   1615 ;	fire_alarm_panel.c:561: init_system();
                                   1616 ;	fire_alarm_panel.c:562: break;
                                   1617 ;	fire_alarm_panel.c:564: default:
      00066F 02r04rB3         [24] 1618 	ljmp	_init_system
      000672                       1619 00130$:
                                   1620 ;	fire_alarm_panel.c:566: SBUF = received_data;
      000672 8F 99            [24] 1621 	mov	_SBUF,r7
                                   1622 ;	fire_alarm_panel.c:567: while(!TI);
      000674                       1623 00131$:
                                   1624 ;	fire_alarm_panel.c:568: TI = 0;
                                   1625 ;	assignBit
      000674 10 99 02         [24] 1626 	jbc	_TI,00296$
      000677 80 FB            [24] 1627 	sjmp	00131$
      000679                       1628 00296$:
                                   1629 ;	fire_alarm_panel.c:570: }
                                   1630 ;	fire_alarm_panel.c:571: }
      000679 22               [24] 1631 	ret
                                   1632 ;------------------------------------------------------------
                                   1633 ;Allocation info for local variables in function 'send_data'
                                   1634 ;------------------------------------------------------------
                                   1635 ;data          Allocated to registers 
                                   1636 ;------------------------------------------------------------
                                   1637 ;	fire_alarm_panel.c:573: void send_data(unsigned char data)
                                   1638 ;	-----------------------------------------
                                   1639 ;	 function send_data
                                   1640 ;	-----------------------------------------
      00067A                       1641 _send_data:
      00067A 85 82 99         [24] 1642 	mov	_SBUF,dpl
                                   1643 ;	fire_alarm_panel.c:576: while(!TI);
      00067D                       1644 00101$:
                                   1645 ;	fire_alarm_panel.c:577: TI = 0;
                                   1646 ;	assignBit
      00067D 10 99 02         [24] 1647 	jbc	_TI,00118$
      000680 80 FB            [24] 1648 	sjmp	00101$
      000682                       1649 00118$:
                                   1650 ;	fire_alarm_panel.c:578: }
      000682 22               [24] 1651 	ret
                                   1652 ;------------------------------------------------------------
                                   1653 ;Allocation info for local variables in function 'silence_alarms'
                                   1654 ;------------------------------------------------------------
                                   1655 ;	fire_alarm_panel.c:580: void silence_alarms(void)
                                   1656 ;	-----------------------------------------
                                   1657 ;	 function silence_alarms
                                   1658 ;	-----------------------------------------
      000683                       1659 _silence_alarms:
                                   1660 ;	fire_alarm_panel.c:582: SLC1 = 1;
                                   1661 ;	assignBit
      000683 D2*02            [12] 1662 	setb	_SLC1
                                   1663 ;	fire_alarm_panel.c:583: SLC2 = 1;
                                   1664 ;	assignBit
      000685 D2*03            [12] 1665 	setb	_SLC2
                                   1666 ;	fire_alarm_panel.c:584: LISO = 1;
                                   1667 ;	assignBit
      000687 D2*04            [12] 1668 	setb	_LISO
                                   1669 ;	fire_alarm_panel.c:586: }
      000689 22               [24] 1670 	ret
                                   1671 ;------------------------------------------------------------
                                   1672 ;Allocation info for local variables in function 'spliter'
                                   1673 ;------------------------------------------------------------
                                   1674 ;data          Allocated to registers r7 
                                   1675 ;------------------------------------------------------------
                                   1676 ;	fire_alarm_panel.c:588: void spliter(unsigned char data)
                                   1677 ;	-----------------------------------------
                                   1678 ;	 function spliter
                                   1679 ;	-----------------------------------------
      00068A                       1680 _spliter:
      00068A AF 82            [24] 1681 	mov	r7, dpl
                                   1682 ;	fire_alarm_panel.c:590: L = data & 0x0F;
      00068C 74 0F            [12] 1683 	mov	a,#0x0f
      00068E 5F               [12] 1684 	anl	a,r7
      00068F F5*07            [12] 1685 	mov	_L,a
                                   1686 ;	fire_alarm_panel.c:591: U = (data >> 4) & 0x0F;
      000691 EF               [12] 1687 	mov	a,r7
      000692 C4               [12] 1688 	swap	a
      000693 54 0F            [12] 1689 	anl	a,#0x0f
      000695 F5*06            [12] 1690 	mov	_U,a
                                   1691 ;	fire_alarm_panel.c:592: }
      000697 22               [24] 1692 	ret
                                   1693 ;------------------------------------------------------------
                                   1694 ;Allocation info for local variables in function 'move'
                                   1695 ;------------------------------------------------------------
                                   1696 ;data          Allocated to registers r7 
                                   1697 ;------------------------------------------------------------
                                   1698 ;	fire_alarm_panel.c:594: void move(unsigned char data)
                                   1699 ;	-----------------------------------------
                                   1700 ;	 function move
                                   1701 ;	-----------------------------------------
      000698                       1702 _move:
      000698 AF 82            [24] 1703 	mov	r7, dpl
                                   1704 ;	fire_alarm_panel.c:596: P1 = (P1_INDICATORS & 0xF0) | (data & 0x0F);  // Use shadow register for indicators
      00069A E5*04            [12] 1705 	mov	a,_P1_INDICATORS
      00069C 54 F0            [12] 1706 	anl	a,#0xf0
      00069E FE               [12] 1707 	mov	r6,a
      00069F 74 0F            [12] 1708 	mov	a,#0x0f
      0006A1 5F               [12] 1709 	anl	a,r7
      0006A2 4E               [12] 1710 	orl	a,r6
      0006A3 F5 90            [12] 1711 	mov	_P1,a
                                   1712 ;	fire_alarm_panel.c:597: EN = 1;
                                   1713 ;	assignBit
      0006A5 D2 87            [12] 1714 	setb	_EN
                                   1715 ;	fire_alarm_panel.c:598: delay();
      0006A7 12r07rAB         [24] 1716 	lcall	_delay
                                   1717 ;	fire_alarm_panel.c:599: EN = 0;
                                   1718 ;	assignBit
      0006AA C2 87            [12] 1719 	clr	_EN
                                   1720 ;	fire_alarm_panel.c:600: delay();
                                   1721 ;	fire_alarm_panel.c:601: }
      0006AC 02r07rAB         [24] 1722 	ljmp	_delay
                                   1723 ;------------------------------------------------------------
                                   1724 ;Allocation info for local variables in function 'move1'
                                   1725 ;------------------------------------------------------------
                                   1726 ;data          Allocated to registers r7 
                                   1727 ;------------------------------------------------------------
                                   1728 ;	fire_alarm_panel.c:603: void move1(unsigned char data)
                                   1729 ;	-----------------------------------------
                                   1730 ;	 function move1
                                   1731 ;	-----------------------------------------
      0006AF                       1732 _move1:
      0006AF AF 82            [24] 1733 	mov	r7, dpl
                                   1734 ;	fire_alarm_panel.c:605: P1 = (P1_INDICATORS & 0xF0) | (data & 0x0F);  // Use shadow register for indicators
      0006B1 E5*04            [12] 1735 	mov	a,_P1_INDICATORS
      0006B3 54 F0            [12] 1736 	anl	a,#0xf0
      0006B5 FE               [12] 1737 	mov	r6,a
      0006B6 74 0F            [12] 1738 	mov	a,#0x0f
      0006B8 5F               [12] 1739 	anl	a,r7
      0006B9 4E               [12] 1740 	orl	a,r6
      0006BA F5 90            [12] 1741 	mov	_P1,a
                                   1742 ;	fire_alarm_panel.c:606: EN = 1;
                                   1743 ;	assignBit
      0006BC D2 87            [12] 1744 	setb	_EN
                                   1745 ;	fire_alarm_panel.c:610: __endasm;
      0006BE 00               [12] 1746 	nop
                                   1747 ;	fire_alarm_panel.c:611: EN = 0;
                                   1748 ;	assignBit
      0006BF C2 87            [12] 1749 	clr	_EN
                                   1750 ;	fire_alarm_panel.c:621: __endasm;
      0006C1 00               [12] 1751 	nop
      0006C2 00               [12] 1752 	nop
      0006C3 00               [12] 1753 	nop
      0006C4 00               [12] 1754 	nop
      0006C5 00               [12] 1755 	nop
      0006C6 00               [12] 1756 	nop
      0006C7 00               [12] 1757 	nop
      0006C8 00               [12] 1758 	nop
                                   1759 ;	fire_alarm_panel.c:622: }
      0006C9 22               [24] 1760 	ret
                                   1761 ;------------------------------------------------------------
                                   1762 ;Allocation info for local variables in function 'lcd_cmd'
                                   1763 ;------------------------------------------------------------
                                   1764 ;cmd_ptr       Allocated to registers r5 r6 r7 
                                   1765 ;cmd           Allocated to registers r3 
                                   1766 ;i             Allocated to registers r4 
                                   1767 ;------------------------------------------------------------
                                   1768 ;	fire_alarm_panel.c:624: void lcd_cmd(unsigned char *cmd_ptr)
                                   1769 ;	-----------------------------------------
                                   1770 ;	 function lcd_cmd
                                   1771 ;	-----------------------------------------
      0006CA                       1772 _lcd_cmd:
      0006CA AD 82            [24] 1773 	mov	r5, dpl
      0006CC AE 83            [24] 1774 	mov	r6, dph
      0006CE AF F0            [24] 1775 	mov	r7, b
                                   1776 ;	fire_alarm_panel.c:629: while((cmd = cmd_ptr[i]) != 0) {
      0006D0 7C 00            [12] 1777 	mov	r4,#0x00
      0006D2                       1778 00101$:
      0006D2 EC               [12] 1779 	mov	a,r4
      0006D3 2D               [12] 1780 	add	a, r5
      0006D4 F9               [12] 1781 	mov	r1,a
      0006D5 E4               [12] 1782 	clr	a
      0006D6 3E               [12] 1783 	addc	a, r6
      0006D7 FA               [12] 1784 	mov	r2,a
      0006D8 8F 03            [24] 1785 	mov	ar3,r7
      0006DA 89 82            [24] 1786 	mov	dpl,r1
      0006DC 8A 83            [24] 1787 	mov	dph,r2
      0006DE 8B F0            [24] 1788 	mov	b,r3
      0006E0 12r00r00         [24] 1789 	lcall	__gptrget
      0006E3 FB               [12] 1790 	mov	r3,a
      0006E4 60 26            [24] 1791 	jz	00104$
                                   1792 ;	fire_alarm_panel.c:630: i++;
      0006E6 0C               [12] 1793 	inc	r4
                                   1794 ;	fire_alarm_panel.c:631: RS = 0;
                                   1795 ;	assignBit
      0006E7 C2 86            [12] 1796 	clr	_RS
                                   1797 ;	fire_alarm_panel.c:632: spliter(cmd);
      0006E9 8B 82            [24] 1798 	mov	dpl, r3
      0006EB C0 07            [24] 1799 	push	ar7
      0006ED C0 06            [24] 1800 	push	ar6
      0006EF C0 05            [24] 1801 	push	ar5
      0006F1 C0 04            [24] 1802 	push	ar4
      0006F3 12r06r8A         [24] 1803 	lcall	_spliter
                                   1804 ;	fire_alarm_panel.c:633: move(U);
      0006F6 85*06 82         [24] 1805 	mov	dpl, _U
      0006F9 12r06r98         [24] 1806 	lcall	_move
                                   1807 ;	fire_alarm_panel.c:634: move(L);
      0006FC 85*07 82         [24] 1808 	mov	dpl, _L
      0006FF 12r06r98         [24] 1809 	lcall	_move
      000702 D0 04            [24] 1810 	pop	ar4
      000704 D0 05            [24] 1811 	pop	ar5
      000706 D0 06            [24] 1812 	pop	ar6
      000708 D0 07            [24] 1813 	pop	ar7
      00070A 80 C6            [24] 1814 	sjmp	00101$
      00070C                       1815 00104$:
                                   1816 ;	fire_alarm_panel.c:636: }
      00070C 22               [24] 1817 	ret
                                   1818 ;------------------------------------------------------------
                                   1819 ;Allocation info for local variables in function 'lcd_data'
                                   1820 ;------------------------------------------------------------
                                   1821 ;data          Allocated to registers 
                                   1822 ;------------------------------------------------------------
                                   1823 ;	fire_alarm_panel.c:638: void lcd_data(unsigned char data)
                                   1824 ;	-----------------------------------------
                                   1825 ;	 function lcd_data
                                   1826 ;	-----------------------------------------
      00070D                       1827 _lcd_data:
                                   1828 ;	fire_alarm_panel.c:640: RS = 1;
                                   1829 ;	assignBit
      00070D D2 86            [12] 1830 	setb	_RS
                                   1831 ;	fire_alarm_panel.c:641: spliter(data);
      00070F 12r06r8A         [24] 1832 	lcall	_spliter
                                   1833 ;	fire_alarm_panel.c:642: move1(U);
      000712 85*06 82         [24] 1834 	mov	dpl, _U
      000715 12r06rAF         [24] 1835 	lcall	_move1
                                   1836 ;	fire_alarm_panel.c:643: move1(L);
      000718 85*07 82         [24] 1837 	mov	dpl, _L
                                   1838 ;	fire_alarm_panel.c:644: }
      00071B 02r06rAF         [24] 1839 	ljmp	_move1
                                   1840 ;------------------------------------------------------------
                                   1841 ;Allocation info for local variables in function 'lcd_disp'
                                   1842 ;------------------------------------------------------------
                                   1843 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1844 ;ch            Allocated to registers r3 
                                   1845 ;i             Allocated to registers r4 
                                   1846 ;------------------------------------------------------------
                                   1847 ;	fire_alarm_panel.c:646: void lcd_disp(unsigned char *text_ptr)
                                   1848 ;	-----------------------------------------
                                   1849 ;	 function lcd_disp
                                   1850 ;	-----------------------------------------
      00071E                       1851 _lcd_disp:
      00071E AD 82            [24] 1852 	mov	r5, dpl
      000720 AE 83            [24] 1853 	mov	r6, dph
      000722 AF F0            [24] 1854 	mov	r7, b
                                   1855 ;	fire_alarm_panel.c:651: while((ch = text_ptr[i]) != 0) {
      000724 7C 00            [12] 1856 	mov	r4,#0x00
      000726                       1857 00101$:
      000726 EC               [12] 1858 	mov	a,r4
      000727 2D               [12] 1859 	add	a, r5
      000728 F9               [12] 1860 	mov	r1,a
      000729 E4               [12] 1861 	clr	a
      00072A 3E               [12] 1862 	addc	a, r6
      00072B FA               [12] 1863 	mov	r2,a
      00072C 8F 03            [24] 1864 	mov	ar3,r7
      00072E 89 82            [24] 1865 	mov	dpl,r1
      000730 8A 83            [24] 1866 	mov	dph,r2
      000732 8B F0            [24] 1867 	mov	b,r3
      000734 12r00r00         [24] 1868 	lcall	__gptrget
      000737 FB               [12] 1869 	mov	r3,a
      000738 60 18            [24] 1870 	jz	00104$
                                   1871 ;	fire_alarm_panel.c:652: i++;
      00073A 0C               [12] 1872 	inc	r4
                                   1873 ;	fire_alarm_panel.c:653: lcd_data(ch);
      00073B 8B 82            [24] 1874 	mov	dpl, r3
      00073D C0 07            [24] 1875 	push	ar7
      00073F C0 06            [24] 1876 	push	ar6
      000741 C0 05            [24] 1877 	push	ar5
      000743 C0 04            [24] 1878 	push	ar4
      000745 12r07r0D         [24] 1879 	lcall	_lcd_data
      000748 D0 04            [24] 1880 	pop	ar4
      00074A D0 05            [24] 1881 	pop	ar5
      00074C D0 06            [24] 1882 	pop	ar6
      00074E D0 07            [24] 1883 	pop	ar7
      000750 80 D4            [24] 1884 	sjmp	00101$
      000752                       1885 00104$:
                                   1886 ;	fire_alarm_panel.c:655: }
      000752 22               [24] 1887 	ret
                                   1888 ;------------------------------------------------------------
                                   1889 ;Allocation info for local variables in function 'lcd_disp1'
                                   1890 ;------------------------------------------------------------
                                   1891 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1892 ;ch            Allocated to registers r3 
                                   1893 ;i             Allocated to registers r4 
                                   1894 ;------------------------------------------------------------
                                   1895 ;	fire_alarm_panel.c:657: void lcd_disp1(unsigned char *text_ptr)
                                   1896 ;	-----------------------------------------
                                   1897 ;	 function lcd_disp1
                                   1898 ;	-----------------------------------------
      000753                       1899 _lcd_disp1:
      000753 AD 82            [24] 1900 	mov	r5, dpl
      000755 AE 83            [24] 1901 	mov	r6, dph
      000757 AF F0            [24] 1902 	mov	r7, b
                                   1903 ;	fire_alarm_panel.c:662: while((ch = text_ptr[i]) != 0) {
      000759 7C 00            [12] 1904 	mov	r4,#0x00
      00075B                       1905 00101$:
      00075B EC               [12] 1906 	mov	a,r4
      00075C 2D               [12] 1907 	add	a, r5
      00075D F9               [12] 1908 	mov	r1,a
      00075E E4               [12] 1909 	clr	a
      00075F 3E               [12] 1910 	addc	a, r6
      000760 FA               [12] 1911 	mov	r2,a
      000761 8F 03            [24] 1912 	mov	ar3,r7
      000763 89 82            [24] 1913 	mov	dpl,r1
      000765 8A 83            [24] 1914 	mov	dph,r2
      000767 8B F0            [24] 1915 	mov	b,r3
      000769 12r00r00         [24] 1916 	lcall	__gptrget
      00076C FB               [12] 1917 	mov	r3,a
      00076D 60 1B            [24] 1918 	jz	00104$
                                   1919 ;	fire_alarm_panel.c:663: i++;
      00076F 0C               [12] 1920 	inc	r4
                                   1921 ;	fire_alarm_panel.c:664: lcd_data(ch);
      000770 8B 82            [24] 1922 	mov	dpl, r3
      000772 C0 07            [24] 1923 	push	ar7
      000774 C0 06            [24] 1924 	push	ar6
      000776 C0 05            [24] 1925 	push	ar5
      000778 C0 04            [24] 1926 	push	ar4
      00077A 12r07r0D         [24] 1927 	lcall	_lcd_data
                                   1928 ;	fire_alarm_panel.c:665: delay2();
      00077D 12r07r8B         [24] 1929 	lcall	_delay2
      000780 D0 04            [24] 1930 	pop	ar4
      000782 D0 05            [24] 1931 	pop	ar5
      000784 D0 06            [24] 1932 	pop	ar6
      000786 D0 07            [24] 1933 	pop	ar7
      000788 80 D1            [24] 1934 	sjmp	00101$
      00078A                       1935 00104$:
                                   1936 ;	fire_alarm_panel.c:667: }
      00078A 22               [24] 1937 	ret
                                   1938 ;------------------------------------------------------------
                                   1939 ;Allocation info for local variables in function 'delay2'
                                   1940 ;------------------------------------------------------------
                                   1941 ;R5            Allocated to registers r7 
                                   1942 ;R6            Allocated to registers r5 
                                   1943 ;R7            Allocated to registers r6 
                                   1944 ;------------------------------------------------------------
                                   1945 ;	fire_alarm_panel.c:669: void delay2(void)
                                   1946 ;	-----------------------------------------
                                   1947 ;	 function delay2
                                   1948 ;	-----------------------------------------
      00078B                       1949 _delay2:
                                   1950 ;	fire_alarm_panel.c:673: for(R5 = 1; R5 > 0; R5--) {
      00078B 7F 01            [12] 1951 	mov	r7,#0x01
                                   1952 ;	fire_alarm_panel.c:674: for(R7 = 255; R7 > 0; R7--) {
      00078D                       1953 00121$:
      00078D 7E FF            [12] 1954 	mov	r6,#0xff
                                   1955 ;	fire_alarm_panel.c:675: for(R6 = 255; R6 > 0; R6--);
      00078F                       1956 00119$:
      00078F 7D FF            [12] 1957 	mov	r5,#0xff
      000791                       1958 00105$:
      000791 DD FE            [24] 1959 	djnz	r5,00105$
                                   1960 ;	fire_alarm_panel.c:674: for(R7 = 255; R7 > 0; R7--) {
      000793 DE FA            [24] 1961 	djnz	r6,00119$
                                   1962 ;	fire_alarm_panel.c:673: for(R5 = 1; R5 > 0; R5--) {
      000795 DF F6            [24] 1963 	djnz	r7,00121$
                                   1964 ;	fire_alarm_panel.c:678: }
      000797 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'delay1'
                                   1968 ;------------------------------------------------------------
                                   1969 ;R5            Allocated to registers r7 
                                   1970 ;R6            Allocated to registers r5 
                                   1971 ;R7            Allocated to registers r6 
                                   1972 ;------------------------------------------------------------
                                   1973 ;	fire_alarm_panel.c:680: void delay1(void)
                                   1974 ;	-----------------------------------------
                                   1975 ;	 function delay1
                                   1976 ;	-----------------------------------------
      000798                       1977 _delay1:
                                   1978 ;	fire_alarm_panel.c:684: for(R5 = 8; R5 > 0; R5--) {
      000798 7F 08            [12] 1979 	mov	r7,#0x08
                                   1980 ;	fire_alarm_panel.c:685: for(R7 = 255; R7 > 0; R7--) {
      00079A                       1981 00123$:
      00079A 7E FF            [12] 1982 	mov	r6,#0xff
                                   1983 ;	fire_alarm_panel.c:686: for(R6 = 255; R6 > 0; R6--);
      00079C                       1984 00121$:
      00079C 7D FF            [12] 1985 	mov	r5,#0xff
      00079E                       1986 00107$:
      00079E DD FE            [24] 1987 	djnz	r5,00107$
                                   1988 ;	fire_alarm_panel.c:685: for(R7 = 255; R7 > 0; R7--) {
      0007A0 DE FA            [24] 1989 	djnz	r6,00121$
                                   1990 ;	fire_alarm_panel.c:684: for(R5 = 8; R5 > 0; R5--) {
      0007A2 DF F6            [24] 1991 	djnz	r7,00123$
                                   1992 ;	fire_alarm_panel.c:690: if(RI) {
      0007A4 30 98 03         [24] 1993 	jnb	_RI,00112$
                                   1994 ;	fire_alarm_panel.c:691: receive();
                                   1995 ;	fire_alarm_panel.c:693: }
      0007A7 02r05rE5         [24] 1996 	ljmp	_receive
      0007AA                       1997 00112$:
      0007AA 22               [24] 1998 	ret
                                   1999 ;------------------------------------------------------------
                                   2000 ;Allocation info for local variables in function 'delay'
                                   2001 ;------------------------------------------------------------
                                   2002 ;R6            Allocated to registers r6 
                                   2003 ;R7            Allocated to registers r7 
                                   2004 ;------------------------------------------------------------
                                   2005 ;	fire_alarm_panel.c:695: void delay(void)
                                   2006 ;	-----------------------------------------
                                   2007 ;	 function delay
                                   2008 ;	-----------------------------------------
      0007AB                       2009 _delay:
                                   2010 ;	fire_alarm_panel.c:699: for(R7 = 7; R7 > 0; R7--) {
      0007AB 7F 07            [12] 2011 	mov	r7,#0x07
                                   2012 ;	fire_alarm_panel.c:700: for(R6 = 15; R6 > 0; R6--);
      0007AD                       2013 00114$:
      0007AD 7E 0F            [12] 2014 	mov	r6,#0x0f
      0007AF                       2015 00104$:
      0007AF DE FE            [24] 2016 	djnz	r6,00104$
                                   2017 ;	fire_alarm_panel.c:699: for(R7 = 7; R7 > 0; R7--) {
      0007B1 DF FA            [24] 2018 	djnz	r7,00114$
                                   2019 ;	fire_alarm_panel.c:702: }
      0007B3 22               [24] 2020 	ret
                                   2021 ;------------------------------------------------------------
                                   2022 ;Allocation info for local variables in function 'set_indicators'
                                   2023 ;------------------------------------------------------------
                                   2024 ;buz_on        Allocated with name '_set_indicators_PARM_2'
                                   2025 ;cflr_off      Allocated with name '_set_indicators_PARM_3'
                                   2026 ;cftlr_on      Allocated with name '_set_indicators_PARM_4'
                                   2027 ;hot_off       Allocated to registers r7 
                                   2028 ;hot_pin       Allocated to registers 
                                   2029 ;buz_pin       Allocated to registers r6 
                                   2030 ;cflr_pin      Allocated to registers r5 
                                   2031 ;cftlr_pin     Allocated to registers r4 
                                   2032 ;------------------------------------------------------------
                                   2033 ;	fire_alarm_panel.c:704: void set_indicators(unsigned char hot_off, unsigned char buz_on, unsigned char cflr_off, unsigned char cftlr_on)
                                   2034 ;	-----------------------------------------
                                   2035 ;	 function set_indicators
                                   2036 ;	-----------------------------------------
      0007B4                       2037 _set_indicators:
      0007B4 AF 82            [24] 2038 	mov	r7, dpl
                                   2039 ;	fire_alarm_panel.c:714: unsigned char buz_pin = buz_on;       // BUZ: normal logic (1=ON, 0=OFF)  
      0007B6 AE*08            [24] 2040 	mov	r6,_set_indicators_PARM_2
                                   2041 ;	fire_alarm_panel.c:715: unsigned char cflr_pin = cflr_off;    // CFLR: inverse logic (1=OFF, 0=ON)
      0007B8 AD*09            [24] 2042 	mov	r5,_set_indicators_PARM_3
                                   2043 ;	fire_alarm_panel.c:716: unsigned char cftlr_pin = cftlr_on;   // CFTLR: normal logic (1=ON, 0=OFF)
      0007BA AC*0A            [24] 2044 	mov	r4,_set_indicators_PARM_4
                                   2045 ;	fire_alarm_panel.c:719: P1_INDICATORS = (hot_pin << 4) | (buz_pin << 5) | (cflr_pin << 6) | (cftlr_pin << 7);
      0007BC EF               [12] 2046 	mov	a,r7
      0007BD C4               [12] 2047 	swap	a
      0007BE 54 F0            [12] 2048 	anl	a,#0xf0
      0007C0 FF               [12] 2049 	mov	r7,a
      0007C1 EE               [12] 2050 	mov	a,r6
      0007C2 C4               [12] 2051 	swap	a
      0007C3 23               [12] 2052 	rl	a
      0007C4 54 E0            [12] 2053 	anl	a,#0xe0
      0007C6 42 07            [12] 2054 	orl	ar7,a
      0007C8 ED               [12] 2055 	mov	a,r5
      0007C9 03               [12] 2056 	rr	a
      0007CA 03               [12] 2057 	rr	a
      0007CB 54 C0            [12] 2058 	anl	a,#0xc0
      0007CD 42 07            [12] 2059 	orl	ar7,a
      0007CF EC               [12] 2060 	mov	a,r4
      0007D0 03               [12] 2061 	rr	a
      0007D1 54 80            [12] 2062 	anl	a,#0x80
      0007D3 4F               [12] 2063 	orl	a,r7
      0007D4 F5*04            [12] 2064 	mov	_P1_INDICATORS,a
                                   2065 ;	fire_alarm_panel.c:720: update_indicators();
                                   2066 ;	fire_alarm_panel.c:721: }
      0007D6 02r07rD9         [24] 2067 	ljmp	_update_indicators
                                   2068 ;------------------------------------------------------------
                                   2069 ;Allocation info for local variables in function 'update_indicators'
                                   2070 ;------------------------------------------------------------
                                   2071 ;	fire_alarm_panel.c:723: void update_indicators(void)
                                   2072 ;	-----------------------------------------
                                   2073 ;	 function update_indicators
                                   2074 ;	-----------------------------------------
      0007D9                       2075 _update_indicators:
                                   2076 ;	fire_alarm_panel.c:726: P1 = (P1 & 0x0F) | (P1_INDICATORS & 0xF0);
      0007D9 E5 90            [12] 2077 	mov	a,_P1
      0007DB 54 0F            [12] 2078 	anl	a,#0x0f
      0007DD FF               [12] 2079 	mov	r7,a
      0007DE E5*04            [12] 2080 	mov	a,_P1_INDICATORS
      0007E0 54 F0            [12] 2081 	anl	a,#0xf0
      0007E2 4F               [12] 2082 	orl	a,r7
      0007E3 F5 90            [12] 2083 	mov	_P1,a
                                   2084 ;	fire_alarm_panel.c:727: } 
      0007E5 22               [24] 2085 	ret
                                   2086 	.area CSEG    (CODE)
                                   2087 	.area CONST   (CODE)
                                   2088 	.area CONST   (CODE)
      000000                       2089 _INIT_COMMANDS:
      000000 20                    2090 	.db #0x20	; 32
      000001 28                    2091 	.db #0x28	; 40
      000002 0C                    2092 	.db #0x0c	; 12
      000003 01                    2093 	.db #0x01	; 1
      000004 06                    2094 	.db #0x06	; 6
      000005 80                    2095 	.db #0x80	; 128
      000006 00                    2096 	.db #0x00	; 0
                                   2097 	.area CSEG    (CODE)
                                   2098 	.area CONST   (CODE)
      000007                       2099 _LINE1:
      000007 01                    2100 	.db #0x01	; 1
      000008 06                    2101 	.db #0x06	; 6
      000009 80                    2102 	.db #0x80	; 128
      00000A 00                    2103 	.db #0x00	; 0
                                   2104 	.area CSEG    (CODE)
                                   2105 	.area CONST   (CODE)
      00000B                       2106 _LINE2:
      00000B C0                    2107 	.db #0xc0	; 192
      00000C 00                    2108 	.db #0x00	; 0
                                   2109 	.area CSEG    (CODE)
                                   2110 	.area CONST   (CODE)
      00000D                       2111 _TEXT1:
      00000D 20 41 47 4E 49 20 50  2112 	.ascii " AGNI PROTECTION"
             52 4F 54 45 43 54 49
             4F 4E
      00001D 00                    2113 	.db 0x00
                                   2114 	.area CSEG    (CODE)
                                   2115 	.area CONST   (CODE)
      00001E                       2116 _TEXT2:
      00001E 20 57 45 4C 43 4F 4D  2117 	.ascii " WELCOME TO ...."
             45 20 54 4F 20 2E 2E
             2E 2E
      00002E 00                    2118 	.db 0x00
                                   2119 	.area CSEG    (CODE)
                                   2120 	.area CONST   (CODE)
      00002F                       2121 _TEXT3:
      00002F 46 49 52 45 20 41 4C  2122 	.ascii "FIRE ALARM PANEL"
             41 52 4D 20 50 41 4E
             45 4C
      00003F 00                    2123 	.db 0x00
                                   2124 	.area CSEG    (CODE)
                                   2125 	.area CONST   (CODE)
      000040                       2126 _TZONE1:
      000040 20 5A 4F 4E 45 20 2D  2127 	.ascii " ZONE - 01      "
             20 30 31 20 20 20 20
             20 20
      000050 00                    2128 	.db 0x00
                                   2129 	.area CSEG    (CODE)
                                   2130 	.area CONST   (CODE)
      000051                       2131 _TZONE2:
      000051 20 5A 4F 4E 45 20 2D  2132 	.ascii " ZONE - 02      "
             20 30 32 20 20 20 20
             20 20
      000061 00                    2133 	.db 0x00
                                   2134 	.area CSEG    (CODE)
                                   2135 	.area CONST   (CODE)
      000062                       2136 _FIRE:
      000062 20 46 49 52 45 20 44  2137 	.ascii " FIRE DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000072 00                    2138 	.db 0x00
                                   2139 	.area CSEG    (CODE)
                                   2140 	.area CONST   (CODE)
      000073                       2141 _SHORT:
      000073 20 53 48 4F 52 54 20  2142 	.ascii " SHORT DETECTED "
             44 45 54 45 43 54 45
             44 20
      000083 00                    2143 	.db 0x00
                                   2144 	.area CSEG    (CODE)
                                   2145 	.area CONST   (CODE)
      000084                       2146 _OPEN:
      000084 20 4F 50 45 4E 20 44  2147 	.ascii " OPEN DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000094 00                    2148 	.db 0x00
                                   2149 	.area CSEG    (CODE)
                                   2150 	.area CONST   (CODE)
      000095                       2151 _TEXT4:
      000095 20 41 4C 4C 20 54 48  2152 	.ascii " ALL THE AREA   "
             45 20 41 52 45 41 20
             20 20
      0000A5 00                    2153 	.db 0x00
                                   2154 	.area CSEG    (CODE)
                                   2155 	.area CONST   (CODE)
      0000A6                       2156 _TLAMP:
      0000A6 50 41 4E 45 4C 20 54  2157 	.ascii "PANEL TESTING ON"
             45 53 54 49 4E 47 20
             4F 4E
      0000B6 00                    2158 	.db 0x00
                                   2159 	.area CSEG    (CODE)
                                   2160 	.area CONST   (CODE)
      0000B7                       2161 _TEVQ:
      0000B7 20 50 4C 45 41 53 45  2162 	.ascii " PLEASE EVACUATE"
             20 45 56 41 43 55 41
             54 45
      0000C7 00                    2163 	.db 0x00
                                   2164 	.area CSEG    (CODE)
                                   2165 	.area CONST   (CODE)
      0000C8                       2166 _ISO1:
      0000C8 5A 4F 4E 45 2D 20 30  2167 	.ascii "ZONE- 01 ISOLATE"
             31 20 49 53 4F 4C 41
             54 45
      0000D8 00                    2168 	.db 0x00
                                   2169 	.area CSEG    (CODE)
                                   2170 	.area CONST   (CODE)
      0000D9                       2171 _ISO2:
      0000D9 5A 4F 4E 45 2D 20 30  2172 	.ascii "ZONE- 02 ISOLATE"
             32 20 49 53 4F 4C 41
             54 45
      0000E9 00                    2173 	.db 0x00
                                   2174 	.area CSEG    (CODE)
                                   2175 	.area CONST   (CODE)
      0000EA                       2176 _ISO1H:
      0000EA 5A 4F 4E 45 2D 20 30  2177 	.ascii "ZONE- 01 HEALTHY"
             31 20 48 45 41 4C 54
             48 59
      0000FA 00                    2178 	.db 0x00
                                   2179 	.area CSEG    (CODE)
                                   2180 	.area CONST   (CODE)
      0000FB                       2181 _ISO2H:
      0000FB 5A 4F 4E 45 2D 20 30  2182 	.ascii "ZONE- 02 HEALTHY"
             32 20 48 45 41 4C 54
             48 59
      00010B 00                    2183 	.db 0x00
                                   2184 	.area CSEG    (CODE)
                                   2185 	.area CONST   (CODE)
      00010C                       2186 _LOWB:
      00010C 20 20 42 41 54 54 45  2187 	.ascii "  BATTERY LOW   "
             52 59 20 4C 4F 57 20
             20 20
      00011C 00                    2188 	.db 0x00
                                   2189 	.area CSEG    (CODE)
                                   2190 	.area CONST   (CODE)
      00011D                       2191 _LOWM:
      00011D 20 43 48 45 43 4B 20  2192 	.ascii " CHECK AC SUPPLY"
             41 43 20 53 55 50 50
             4C 59
      00012D 00                    2193 	.db 0x00
                                   2194 	.area CSEG    (CODE)
                                   2195 	.area XINIT   (CODE)
                                   2196 	.area CABS    (ABS,CODE)
