                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module fire_alarm_panel
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LOWM
                                     12 	.globl _LOWB
                                     13 	.globl _ISO2H
                                     14 	.globl _ISO1H
                                     15 	.globl _ISO2
                                     16 	.globl _ISO1
                                     17 	.globl _TEVQ
                                     18 	.globl _TLAMP
                                     19 	.globl _TEXT4
                                     20 	.globl _OPEN
                                     21 	.globl _SHORT
                                     22 	.globl _FIRE
                                     23 	.globl _TZONE2
                                     24 	.globl _TZONE1
                                     25 	.globl _TEXT3
                                     26 	.globl _TEXT2
                                     27 	.globl _TEXT1
                                     28 	.globl _LINE2
                                     29 	.globl _LINE1
                                     30 	.globl _INIT_COMMANDS
                                     31 	.globl _main
                                     32 	.globl _SHORT2
                                     33 	.globl _OPEN2
                                     34 	.globl _FIRE2
                                     35 	.globl _SHORT1
                                     36 	.globl _OPEN1
                                     37 	.globl _FIRE1
                                     38 	.globl _CFTLR
                                     39 	.globl _CFLR
                                     40 	.globl _BUZ
                                     41 	.globl _HOT
                                     42 	.globl _EN
                                     43 	.globl _RS
                                     44 	.globl _EVQ
                                     45 	.globl _SIL
                                     46 	.globl _LAMP
                                     47 	.globl _LB
                                     48 	.globl _BL
                                     49 	.globl _ZONE2
                                     50 	.globl _ZONE1
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _TH2
                                    145 	.globl _TL2
                                    146 	.globl _RCAP2H
                                    147 	.globl _RCAP2L
                                    148 	.globl _T2CON
                                    149 	.globl _B
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _PR2
                                    171 	.globl _PR1
                                    172 	.globl _LISO
                                    173 	.globl _SLC2
                                    174 	.globl _SLC1
                                    175 	.globl _Z2
                                    176 	.globl _Z1
                                    177 	.globl _L
                                    178 	.globl _U
                                    179 	.globl _RAP
                                    180 	.globl _BLT1
                                    181 	.globl _init_system
                                    182 	.globl _prz1
                                    183 	.globl _prz2
                                    184 	.globl _receive
                                    185 	.globl _send_data
                                    186 	.globl _silence_alarms
                                    187 	.globl _spliter
                                    188 	.globl _move
                                    189 	.globl _move1
                                    190 	.globl _lcd_cmd
                                    191 	.globl _lcd_data
                                    192 	.globl _lcd_disp
                                    193 	.globl _lcd_disp1
                                    194 	.globl _delay2
                                    195 	.globl _delay1
                                    196 	.globl _delay
                                    197 ;--------------------------------------------------------
                                    198 ; special function registers
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _P0	=	0x0080
                           000081   203 _SP	=	0x0081
                           000082   204 _DPL	=	0x0082
                           000083   205 _DPH	=	0x0083
                           000087   206 _PCON	=	0x0087
                           000088   207 _TCON	=	0x0088
                           000089   208 _TMOD	=	0x0089
                           00008A   209 _TL0	=	0x008a
                           00008B   210 _TL1	=	0x008b
                           00008C   211 _TH0	=	0x008c
                           00008D   212 _TH1	=	0x008d
                           000090   213 _P1	=	0x0090
                           000098   214 _SCON	=	0x0098
                           000099   215 _SBUF	=	0x0099
                           0000A0   216 _P2	=	0x00a0
                           0000A8   217 _IE	=	0x00a8
                           0000B0   218 _P3	=	0x00b0
                           0000B8   219 _IP	=	0x00b8
                           0000D0   220 _PSW	=	0x00d0
                           0000E0   221 _ACC	=	0x00e0
                           0000F0   222 _B	=	0x00f0
                           0000C8   223 _T2CON	=	0x00c8
                           0000CA   224 _RCAP2L	=	0x00ca
                           0000CB   225 _RCAP2H	=	0x00cb
                           0000CC   226 _TL2	=	0x00cc
                           0000CD   227 _TH2	=	0x00cd
                                    228 ;--------------------------------------------------------
                                    229 ; special function bits
                                    230 ;--------------------------------------------------------
                                    231 	.area RSEG    (ABS,DATA)
      000000                        232 	.org 0x0000
                           000080   233 _P0_0	=	0x0080
                           000081   234 _P0_1	=	0x0081
                           000082   235 _P0_2	=	0x0082
                           000083   236 _P0_3	=	0x0083
                           000084   237 _P0_4	=	0x0084
                           000085   238 _P0_5	=	0x0085
                           000086   239 _P0_6	=	0x0086
                           000087   240 _P0_7	=	0x0087
                           000088   241 _IT0	=	0x0088
                           000089   242 _IE0	=	0x0089
                           00008A   243 _IT1	=	0x008a
                           00008B   244 _IE1	=	0x008b
                           00008C   245 _TR0	=	0x008c
                           00008D   246 _TF0	=	0x008d
                           00008E   247 _TR1	=	0x008e
                           00008F   248 _TF1	=	0x008f
                           000090   249 _P1_0	=	0x0090
                           000091   250 _P1_1	=	0x0091
                           000092   251 _P1_2	=	0x0092
                           000093   252 _P1_3	=	0x0093
                           000094   253 _P1_4	=	0x0094
                           000095   254 _P1_5	=	0x0095
                           000096   255 _P1_6	=	0x0096
                           000097   256 _P1_7	=	0x0097
                           000098   257 _RI	=	0x0098
                           000099   258 _TI	=	0x0099
                           00009A   259 _RB8	=	0x009a
                           00009B   260 _TB8	=	0x009b
                           00009C   261 _REN	=	0x009c
                           00009D   262 _SM2	=	0x009d
                           00009E   263 _SM1	=	0x009e
                           00009F   264 _SM0	=	0x009f
                           0000A0   265 _P2_0	=	0x00a0
                           0000A1   266 _P2_1	=	0x00a1
                           0000A2   267 _P2_2	=	0x00a2
                           0000A3   268 _P2_3	=	0x00a3
                           0000A4   269 _P2_4	=	0x00a4
                           0000A5   270 _P2_5	=	0x00a5
                           0000A6   271 _P2_6	=	0x00a6
                           0000A7   272 _P2_7	=	0x00a7
                           0000A8   273 _EX0	=	0x00a8
                           0000A9   274 _ET0	=	0x00a9
                           0000AA   275 _EX1	=	0x00aa
                           0000AB   276 _ET1	=	0x00ab
                           0000AC   277 _ES	=	0x00ac
                           0000AF   278 _EA	=	0x00af
                           0000B0   279 _P3_0	=	0x00b0
                           0000B1   280 _P3_1	=	0x00b1
                           0000B2   281 _P3_2	=	0x00b2
                           0000B3   282 _P3_3	=	0x00b3
                           0000B4   283 _P3_4	=	0x00b4
                           0000B5   284 _P3_5	=	0x00b5
                           0000B6   285 _P3_6	=	0x00b6
                           0000B7   286 _P3_7	=	0x00b7
                           0000B0   287 _RXD	=	0x00b0
                           0000B1   288 _TXD	=	0x00b1
                           0000B2   289 _INT0	=	0x00b2
                           0000B3   290 _INT1	=	0x00b3
                           0000B4   291 _T0	=	0x00b4
                           0000B5   292 _T1	=	0x00b5
                           0000B6   293 _WR	=	0x00b6
                           0000B7   294 _RD	=	0x00b7
                           0000B8   295 _PX0	=	0x00b8
                           0000B9   296 _PT0	=	0x00b9
                           0000BA   297 _PX1	=	0x00ba
                           0000BB   298 _PT1	=	0x00bb
                           0000BC   299 _PS	=	0x00bc
                           0000D0   300 _P	=	0x00d0
                           0000D1   301 _F1	=	0x00d1
                           0000D2   302 _OV	=	0x00d2
                           0000D3   303 _RS0	=	0x00d3
                           0000D4   304 _RS1	=	0x00d4
                           0000D5   305 _F0	=	0x00d5
                           0000D6   306 _AC	=	0x00d6
                           0000D7   307 _CY	=	0x00d7
                           0000AD   308 _ET2	=	0x00ad
                           0000BD   309 _PT2	=	0x00bd
                           0000C8   310 _T2CON_0	=	0x00c8
                           0000C9   311 _T2CON_1	=	0x00c9
                           0000CA   312 _T2CON_2	=	0x00ca
                           0000CB   313 _T2CON_3	=	0x00cb
                           0000CC   314 _T2CON_4	=	0x00cc
                           0000CD   315 _T2CON_5	=	0x00cd
                           0000CE   316 _T2CON_6	=	0x00ce
                           0000CF   317 _T2CON_7	=	0x00cf
                           0000C8   318 _CP_RL2	=	0x00c8
                           0000C9   319 _C_T2	=	0x00c9
                           0000CA   320 _TR2	=	0x00ca
                           0000CB   321 _EXEN2	=	0x00cb
                           0000CC   322 _TCLK	=	0x00cc
                           0000CD   323 _RCLK	=	0x00cd
                           0000CE   324 _EXF2	=	0x00ce
                           0000CF   325 _TF2	=	0x00cf
                           0000A4   326 _ZONE1	=	0x00a4
                           0000A5   327 _ZONE2	=	0x00a5
                           0000A7   328 _BL	=	0x00a7
                           0000A2   329 _LB	=	0x00a2
                           0000A6   330 _LAMP	=	0x00a6
                           0000A0   331 _SIL	=	0x00a0
                           0000A1   332 _EVQ	=	0x00a1
                           000086   333 _RS	=	0x0086
                           000087   334 _EN	=	0x0087
                           000094   335 _HOT	=	0x0094
                           000095   336 _BUZ	=	0x0095
                           000096   337 _CFLR	=	0x0096
                           000097   338 _CFTLR	=	0x0097
                           000080   339 _FIRE1	=	0x0080
                           000081   340 _OPEN1	=	0x0081
                           000082   341 _SHORT1	=	0x0082
                           000083   342 _FIRE2	=	0x0083
                           000084   343 _OPEN2	=	0x0084
                           000085   344 _SHORT2	=	0x0085
                                    345 ;--------------------------------------------------------
                                    346 ; overlayable register banks
                                    347 ;--------------------------------------------------------
                                    348 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        349 	.ds 8
                                    350 ;--------------------------------------------------------
                                    351 ; internal ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area DSEG    (DATA)
      000000                        354 _BLT1::
      000000                        355 	.ds 1
      000001                        356 _RAP::
      000001                        357 	.ds 1
      000002                        358 _U::
      000002                        359 	.ds 1
      000003                        360 _L::
      000003                        361 	.ds 1
                                    362 ;--------------------------------------------------------
                                    363 ; overlayable items in internal ram
                                    364 ;--------------------------------------------------------
                                    365 	.area	OSEG    (OVR,DATA)
                                    366 	.area	OSEG    (OVR,DATA)
                                    367 	.area	OSEG    (OVR,DATA)
                                    368 	.area	OSEG    (OVR,DATA)
                                    369 	.area	OSEG    (OVR,DATA)
                                    370 ;--------------------------------------------------------
                                    371 ; Stack segment in internal ram
                                    372 ;--------------------------------------------------------
                                    373 	.area SSEG
      000000                        374 __start__stack:
      000000                        375 	.ds	1
                                    376 
                                    377 ;--------------------------------------------------------
                                    378 ; indirectly addressable internal ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area ISEG    (DATA)
                                    381 ;--------------------------------------------------------
                                    382 ; absolute internal ram data
                                    383 ;--------------------------------------------------------
                                    384 	.area IABS    (ABS,DATA)
                                    385 	.area IABS    (ABS,DATA)
                                    386 ;--------------------------------------------------------
                                    387 ; bit data
                                    388 ;--------------------------------------------------------
                                    389 	.area BSEG    (BIT)
      000000                        390 _Z1::
      000000                        391 	.ds 1
      000001                        392 _Z2::
      000001                        393 	.ds 1
      000002                        394 _SLC1::
      000002                        395 	.ds 1
      000003                        396 _SLC2::
      000003                        397 	.ds 1
      000004                        398 _LISO::
      000004                        399 	.ds 1
      000005                        400 _PR1::
      000005                        401 	.ds 1
      000006                        402 _PR2::
      000006                        403 	.ds 1
                                    404 ;--------------------------------------------------------
                                    405 ; paged external ram data
                                    406 ;--------------------------------------------------------
                                    407 	.area PSEG    (PAG,XDATA)
                                    408 ;--------------------------------------------------------
                                    409 ; uninitialized external ram data
                                    410 ;--------------------------------------------------------
                                    411 	.area XSEG    (XDATA)
                                    412 ;--------------------------------------------------------
                                    413 ; absolute external ram data
                                    414 ;--------------------------------------------------------
                                    415 	.area XABS    (ABS,XDATA)
                                    416 ;--------------------------------------------------------
                                    417 ; initialized external ram data
                                    418 ;--------------------------------------------------------
                                    419 	.area XISEG   (XDATA)
                                    420 	.area HOME    (CODE)
                                    421 	.area GSINIT0 (CODE)
                                    422 	.area GSINIT1 (CODE)
                                    423 	.area GSINIT2 (CODE)
                                    424 	.area GSINIT3 (CODE)
                                    425 	.area GSINIT4 (CODE)
                                    426 	.area GSINIT5 (CODE)
                                    427 	.area GSINIT  (CODE)
                                    428 	.area GSFINAL (CODE)
                                    429 	.area CSEG    (CODE)
                                    430 ;--------------------------------------------------------
                                    431 ; interrupt vector
                                    432 ;--------------------------------------------------------
                                    433 	.area HOME    (CODE)
      000000                        434 __interrupt_vect:
      000000 02r00r00         [24]  435 	ljmp	__sdcc_gsinit_startup
                                    436 ; restartable atomic support routines
      000003                        437 	.ds	5
      000008                        438 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  439 	nop
      000009 00               [12]  440 	nop
      00000A                        441 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  442 	movx	a, @r0
      00000B FB               [12]  443 	mov	r3, a
      00000C EA               [12]  444 	mov	a, r2
      00000D F2               [24]  445 	movx	@r0, a
      00000E 80 2C            [24]  446 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  447 	nop
      000011 00               [12]  448 	nop
      000012                        449 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  450 	movx	a, @dptr
      000013 FB               [12]  451 	mov	r3, a
      000014 EA               [12]  452 	mov	a, r2
      000015 F0               [24]  453 	movx	@dptr, a
      000016 80 24            [24]  454 	sjmp	sdcc_atomic_exchange_exit
      000018                        455 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  456 	mov	a, @r0
      000019 B5 02 02         [24]  457 	cjne	a, ar2, .+#5
      00001C EB               [12]  458 	mov	a, r3
      00001D F6               [12]  459 	mov	@r0, a
      00001E 22               [24]  460 	ret
      00001F 00               [12]  461 	nop
      000020                        462 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  463 	movx	a, @r0
      000021 B5 02 02         [24]  464 	cjne	a, ar2, .+#5
      000024 EB               [12]  465 	mov	a, r3
      000025 F2               [24]  466 	movx	@r0, a
      000026 22               [24]  467 	ret
      000027 00               [12]  468 	nop
      000028                        469 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  470 	movx	a, @dptr
      000029 B5 02 02         [24]  471 	cjne	a, ar2, .+#5
      00002C EB               [12]  472 	mov	a, r3
      00002D F0               [24]  473 	movx	@dptr, a
      00002E 22               [24]  474 	ret
      00002F                        475 sdcc_atomic_exchange_rollback_end::
                                    476 
      00002F                        477 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  478 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  479 	mov	r0, dpl
      000034 20 F5 D3         [24]  480 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        481 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  482 	mov	a, r2
      000038 C6               [12]  483 	xch	a, @r0
      000039 F5 82            [12]  484 	mov	dpl, a
      00003B 22               [24]  485 	ret
      00003C                        486 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  487 	mov	dpl, r3
      00003E 22               [24]  488 	ret
      00003F                        489 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  490 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  491 	mov	r0, dpl
      000044 20 F5 D9         [24]  492 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  493 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    494 ;--------------------------------------------------------
                                    495 ; global & static initialisations
                                    496 ;--------------------------------------------------------
                                    497 	.area HOME    (CODE)
                                    498 	.area GSINIT  (CODE)
                                    499 	.area GSFINAL (CODE)
                                    500 	.area GSINIT  (CODE)
                                    501 	.globl __sdcc_gsinit_startup
                                    502 	.globl __sdcc_program_startup
                                    503 	.globl __start__stack
                                    504 	.globl __mcs51_genXINIT
                                    505 	.globl __mcs51_genXRAMCLEAR
                                    506 	.globl __mcs51_genRAMCLEAR
                                    507 ;	fire_alarm_panel.c:28: __bit Z1 = 0;          // ISO Zone 1
                                    508 ;	assignBit
      000000 C2*00            [12]  509 	clr	_Z1
                                    510 ;	fire_alarm_panel.c:29: __bit Z2 = 0;          // ISO Zone 2
                                    511 ;	assignBit
      000002 C2*01            [12]  512 	clr	_Z2
                                    513 ;	fire_alarm_panel.c:30: __bit SLC1 = 0;        // Silence Zone 1
                                    514 ;	assignBit
      000004 C2*02            [12]  515 	clr	_SLC1
                                    516 ;	fire_alarm_panel.c:31: __bit SLC2 = 0;        // Silence Zone 2
                                    517 ;	assignBit
      000006 C2*03            [12]  518 	clr	_SLC2
                                    519 ;	fire_alarm_panel.c:32: __bit LISO = 0;        // Low battery silence
                                    520 ;	assignBit
      000008 C2*04            [12]  521 	clr	_LISO
                                    522 ;	fire_alarm_panel.c:33: __bit PR1 = 0;         // Zone 1 Problem
                                    523 ;	assignBit
      00000A C2*05            [12]  524 	clr	_PR1
                                    525 ;	fire_alarm_panel.c:34: __bit PR2 = 0;         // Zone 2 Problem
                                    526 ;	assignBit
      00000C C2*06            [12]  527 	clr	_PR2
                                    528 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  529 	ljmp	__sdcc_program_startup
                                    530 ;--------------------------------------------------------
                                    531 ; Home
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
                                    534 	.area HOME    (CODE)
      000049                        535 __sdcc_program_startup:
      000049 02r00r00         [24]  536 	ljmp	_main
                                    537 ;	return from main will return to caller
                                    538 ;--------------------------------------------------------
                                    539 ; code
                                    540 ;--------------------------------------------------------
                                    541 	.area CSEG    (CODE)
                                    542 ;------------------------------------------------------------
                                    543 ;Allocation info for local variables in function 'main'
                                    544 ;------------------------------------------------------------
                                    545 ;R0            Allocated to registers r7 
                                    546 ;------------------------------------------------------------
                                    547 ;	fire_alarm_panel.c:83: void main(void)
                                    548 ;	-----------------------------------------
                                    549 ;	 function main
                                    550 ;	-----------------------------------------
      000000                        551 _main:
                           000007   552 	ar7 = 0x07
                           000006   553 	ar6 = 0x06
                           000005   554 	ar5 = 0x05
                           000004   555 	ar4 = 0x04
                           000003   556 	ar3 = 0x03
                           000002   557 	ar2 = 0x02
                           000001   558 	ar1 = 0x01
                           000000   559 	ar0 = 0x00
                                    560 ;	fire_alarm_panel.c:87: init_system();
      000000 12r02rA1         [24]  561 	lcall	_init_system
                                    562 ;	fire_alarm_panel.c:91: while(R0 < 15) {
      000003 7F 00            [12]  563 	mov	r7,#0x00
      000005                        564 00101$:
      000005 BF 0F 00         [24]  565 	cjne	r7,#0x0f,00458$
      000008                        566 00458$:
      000008 50 13            [24]  567 	jnc	00103$
                                    568 ;	fire_alarm_panel.c:92: lcd_cmd(INIT_COMMANDS);
      00000A 90r00r00         [24]  569 	mov	dptr,#_INIT_COMMANDS
      00000D 75 F0 80         [24]  570 	mov	b, #0x80
      000010 C0 07            [24]  571 	push	ar7
      000012 12r05r32         [24]  572 	lcall	_lcd_cmd
                                    573 ;	fire_alarm_panel.c:93: delay();
      000015 12r06r13         [24]  574 	lcall	_delay
      000018 D0 07            [24]  575 	pop	ar7
                                    576 ;	fire_alarm_panel.c:94: R0++;
      00001A 0F               [12]  577 	inc	r7
      00001B 80 E8            [24]  578 	sjmp	00101$
      00001D                        579 00103$:
                                    580 ;	fire_alarm_panel.c:98: lcd_cmd(LINE1);
      00001D 90r00r07         [24]  581 	mov	dptr,#_LINE1
      000020 75 F0 80         [24]  582 	mov	b, #0x80
      000023 12r05r32         [24]  583 	lcall	_lcd_cmd
                                    584 ;	fire_alarm_panel.c:99: lcd_disp(TEXT2);
      000026 90r00r1E         [24]  585 	mov	dptr,#_TEXT2
      000029 75 F0 80         [24]  586 	mov	b, #0x80
      00002C 12r05r86         [24]  587 	lcall	_lcd_disp
                                    588 ;	fire_alarm_panel.c:100: delay();
      00002F 12r06r13         [24]  589 	lcall	_delay
                                    590 ;	fire_alarm_panel.c:101: lcd_cmd(LINE2);
      000032 90r00r0B         [24]  591 	mov	dptr,#_LINE2
      000035 75 F0 80         [24]  592 	mov	b, #0x80
      000038 12r05r32         [24]  593 	lcall	_lcd_cmd
                                    594 ;	fire_alarm_panel.c:102: lcd_disp1(TEXT1);
      00003B 90r00r0D         [24]  595 	mov	dptr,#_TEXT1
      00003E 75 F0 80         [24]  596 	mov	b, #0x80
      000041 12r05rBB         [24]  597 	lcall	_lcd_disp1
                                    598 ;	fire_alarm_panel.c:104: while(1) {
      000044                        599 00183$:
                                    600 ;	fire_alarm_panel.c:106: if(RI) {
      000044 30 98 03         [24]  601 	jnb	_RI,00105$
                                    602 ;	fire_alarm_panel.c:107: receive();
      000047 12r04r4F         [24]  603 	lcall	_receive
      00004A                        604 00105$:
                                    605 ;	fire_alarm_panel.c:111: lcd_cmd(LINE1);
      00004A 90r00r07         [24]  606 	mov	dptr,#_LINE1
      00004D 75 F0 80         [24]  607 	mov	b, #0x80
      000050 12r05r32         [24]  608 	lcall	_lcd_cmd
                                    609 ;	fire_alarm_panel.c:112: lcd_disp(TEXT1);
      000053 90r00r0D         [24]  610 	mov	dptr,#_TEXT1
      000056 75 F0 80         [24]  611 	mov	b, #0x80
      000059 12r05r86         [24]  612 	lcall	_lcd_disp
                                    613 ;	fire_alarm_panel.c:114: if(RI) {
      00005C 30 98 03         [24]  614 	jnb	_RI,00107$
                                    615 ;	fire_alarm_panel.c:115: receive();
      00005F 12r04r4F         [24]  616 	lcall	_receive
      000062                        617 00107$:
                                    618 ;	fire_alarm_panel.c:119: if(!ZONE1) {
      000062 20 A4 21         [24]  619 	jb	_ZONE1,00120$
                                    620 ;	fire_alarm_panel.c:121: Z1 = 0; // Mark as healthy/not isolated
                                    621 ;	assignBit
      000065 C2*00            [12]  622 	clr	_Z1
                                    623 ;	fire_alarm_panel.c:122: PR1 = 0; // No problems
                                    624 ;	assignBit
      000067 C2*05            [12]  625 	clr	_PR1
                                    626 ;	fire_alarm_panel.c:123: lcd_cmd(LINE2);
      000069 90r00r0B         [24]  627 	mov	dptr,#_LINE2
      00006C 75 F0 80         [24]  628 	mov	b, #0x80
      00006F 12r05r32         [24]  629 	lcall	_lcd_cmd
                                    630 ;	fire_alarm_panel.c:124: lcd_disp(ISO1H); // Show "ZONE-01 HEALTHY"
      000072 90r00rEA         [24]  631 	mov	dptr,#_ISO1H
      000075 75 F0 80         [24]  632 	mov	b, #0x80
      000078 12r05r86         [24]  633 	lcall	_lcd_disp
                                    634 ;	fire_alarm_panel.c:125: delay1();
      00007B 12r06r00         [24]  635 	lcall	_delay1
                                    636 ;	fire_alarm_panel.c:126: if(RI) receive();
      00007E 30 98 3E         [24]  637 	jnb	_RI,00121$
      000081 12r04r4F         [24]  638 	lcall	_receive
      000084 80 39            [24]  639 	sjmp	00121$
      000086                        640 00120$:
                                    641 ;	fire_alarm_panel.c:129: Z1 = 1; // Mark as isolated
                                    642 ;	assignBit
      000086 D2*00            [12]  643 	setb	_Z1
                                    644 ;	fire_alarm_panel.c:130: lcd_cmd(LINE2);
      000088 90r00r0B         [24]  645 	mov	dptr,#_LINE2
      00008B 75 F0 80         [24]  646 	mov	b, #0x80
      00008E 12r05r32         [24]  647 	lcall	_lcd_cmd
                                    648 ;	fire_alarm_panel.c:131: lcd_disp(ISO1); // Show "ZONE-01 ISOLATE"
      000091 90r00rC8         [24]  649 	mov	dptr,#_ISO1
      000094 75 F0 80         [24]  650 	mov	b, #0x80
      000097 12r05r86         [24]  651 	lcall	_lcd_disp
                                    652 ;	fire_alarm_panel.c:132: delay1();
      00009A 12r06r00         [24]  653 	lcall	_delay1
                                    654 ;	fire_alarm_panel.c:133: if(RI) receive();
      00009D 30 98 03         [24]  655 	jnb	_RI,00111$
      0000A0 12r04r4F         [24]  656 	lcall	_receive
      0000A3                        657 00111$:
                                    658 ;	fire_alarm_panel.c:136: if(FIRE1 && OPEN1 && SHORT1) {
      0000A3 30 80 0C         [24]  659 	jnb	_FIRE1,00115$
      0000A6 30 81 09         [24]  660 	jnb	_OPEN1,00115$
      0000A9 30 82 06         [24]  661 	jnb	_SHORT1,00115$
                                    662 ;	fire_alarm_panel.c:138: PR1 = 0;
                                    663 ;	assignBit
      0000AC C2*05            [12]  664 	clr	_PR1
                                    665 ;	fire_alarm_panel.c:139: SLC1 = 0;
                                    666 ;	assignBit
      0000AE C2*02            [12]  667 	clr	_SLC1
      0000B0 80 0D            [24]  668 	sjmp	00121$
      0000B2                        669 00115$:
                                    670 ;	fire_alarm_panel.c:142: PR1 = 1;
                                    671 ;	assignBit
      0000B2 D2*05            [12]  672 	setb	_PR1
                                    673 ;	fire_alarm_panel.c:143: BL = 1;
                                    674 ;	assignBit
      0000B4 D2 A7            [12]  675 	setb	_BL
                                    676 ;	fire_alarm_panel.c:144: prz1();
      0000B6 12r02rCD         [24]  677 	lcall	_prz1
                                    678 ;	fire_alarm_panel.c:145: if(RI) receive();
      0000B9 30 98 03         [24]  679 	jnb	_RI,00121$
      0000BC 12r04r4F         [24]  680 	lcall	_receive
      0000BF                        681 00121$:
                                    682 ;	fire_alarm_panel.c:150: if(!ZONE2) {
      0000BF 20 A5 21         [24]  683 	jb	_ZONE2,00134$
                                    684 ;	fire_alarm_panel.c:152: Z2 = 0; // Mark as healthy/not isolated
                                    685 ;	assignBit
      0000C2 C2*01            [12]  686 	clr	_Z2
                                    687 ;	fire_alarm_panel.c:153: PR2 = 0; // No problems
                                    688 ;	assignBit
      0000C4 C2*06            [12]  689 	clr	_PR2
                                    690 ;	fire_alarm_panel.c:154: lcd_cmd(LINE2);
      0000C6 90r00r0B         [24]  691 	mov	dptr,#_LINE2
      0000C9 75 F0 80         [24]  692 	mov	b, #0x80
      0000CC 12r05r32         [24]  693 	lcall	_lcd_cmd
                                    694 ;	fire_alarm_panel.c:155: lcd_disp(ISO2H); // Show "ZONE-02 HEALTHY"
      0000CF 90r00rFB         [24]  695 	mov	dptr,#_ISO2H
      0000D2 75 F0 80         [24]  696 	mov	b, #0x80
      0000D5 12r05r86         [24]  697 	lcall	_lcd_disp
                                    698 ;	fire_alarm_panel.c:156: delay1();
      0000D8 12r06r00         [24]  699 	lcall	_delay1
                                    700 ;	fire_alarm_panel.c:157: if(RI) receive();
      0000DB 30 98 3E         [24]  701 	jnb	_RI,00135$
      0000DE 12r04r4F         [24]  702 	lcall	_receive
      0000E1 80 39            [24]  703 	sjmp	00135$
      0000E3                        704 00134$:
                                    705 ;	fire_alarm_panel.c:160: Z2 = 1; // Mark as isolated
                                    706 ;	assignBit
      0000E3 D2*01            [12]  707 	setb	_Z2
                                    708 ;	fire_alarm_panel.c:161: lcd_cmd(LINE2);
      0000E5 90r00r0B         [24]  709 	mov	dptr,#_LINE2
      0000E8 75 F0 80         [24]  710 	mov	b, #0x80
      0000EB 12r05r32         [24]  711 	lcall	_lcd_cmd
                                    712 ;	fire_alarm_panel.c:162: lcd_disp(ISO2); // Show "ZONE-02 ISOLATE"
      0000EE 90r00rD9         [24]  713 	mov	dptr,#_ISO2
      0000F1 75 F0 80         [24]  714 	mov	b, #0x80
      0000F4 12r05r86         [24]  715 	lcall	_lcd_disp
                                    716 ;	fire_alarm_panel.c:163: delay1();
      0000F7 12r06r00         [24]  717 	lcall	_delay1
                                    718 ;	fire_alarm_panel.c:164: if(RI) receive();
      0000FA 30 98 03         [24]  719 	jnb	_RI,00125$
      0000FD 12r04r4F         [24]  720 	lcall	_receive
      000100                        721 00125$:
                                    722 ;	fire_alarm_panel.c:167: if(FIRE2 && OPEN2 && SHORT2) {
      000100 30 83 0C         [24]  723 	jnb	_FIRE2,00129$
      000103 30 84 09         [24]  724 	jnb	_OPEN2,00129$
      000106 30 85 06         [24]  725 	jnb	_SHORT2,00129$
                                    726 ;	fire_alarm_panel.c:169: PR2 = 0;
                                    727 ;	assignBit
      000109 C2*06            [12]  728 	clr	_PR2
                                    729 ;	fire_alarm_panel.c:170: SLC2 = 0;
                                    730 ;	assignBit
      00010B C2*03            [12]  731 	clr	_SLC2
      00010D 80 0D            [24]  732 	sjmp	00135$
      00010F                        733 00129$:
                                    734 ;	fire_alarm_panel.c:173: PR2 = 1;
                                    735 ;	assignBit
      00010F D2*06            [12]  736 	setb	_PR2
                                    737 ;	fire_alarm_panel.c:174: BL = 1;
                                    738 ;	assignBit
      000111 D2 A7            [12]  739 	setb	_BL
                                    740 ;	fire_alarm_panel.c:175: prz2();
      000113 12r03r8E         [24]  741 	lcall	_prz2
                                    742 ;	fire_alarm_panel.c:176: if(RI) receive();
      000116 30 98 03         [24]  743 	jnb	_RI,00135$
      000119 12r04r4F         [24]  744 	lcall	_receive
      00011C                        745 00135$:
                                    746 ;	fire_alarm_panel.c:181: if(!ZONE1 && !ZONE2) {
      00011C 20 A4 1E         [24]  747 	jb	_ZONE1,00139$
      00011F 20 A5 1B         [24]  748 	jb	_ZONE2,00139$
                                    749 ;	fire_alarm_panel.c:182: lcd_cmd(LINE2);
      000122 90r00r0B         [24]  750 	mov	dptr,#_LINE2
      000125 75 F0 80         [24]  751 	mov	b, #0x80
      000128 12r05r32         [24]  752 	lcall	_lcd_cmd
                                    753 ;	fire_alarm_panel.c:183: lcd_disp(TEXT3);
      00012B 90r00r2F         [24]  754 	mov	dptr,#_TEXT3
      00012E 75 F0 80         [24]  755 	mov	b, #0x80
      000131 12r05r86         [24]  756 	lcall	_lcd_disp
                                    757 ;	fire_alarm_panel.c:184: delay1();
      000134 12r06r00         [24]  758 	lcall	_delay1
                                    759 ;	fire_alarm_panel.c:185: if(RI) receive();
      000137 30 98 03         [24]  760 	jnb	_RI,00139$
      00013A 12r04r4F         [24]  761 	lcall	_receive
      00013D                        762 00139$:
                                    763 ;	fire_alarm_panel.c:189: if(!SIL) {
      00013D 20 A0 03         [24]  764 	jb	_SIL,00142$
                                    765 ;	fire_alarm_panel.c:190: silence_alarms();
      000140 12r04rED         [24]  766 	lcall	_silence_alarms
      000143                        767 00142$:
                                    768 ;	fire_alarm_panel.c:194: if(RI) receive();
      000143 30 98 03         [24]  769 	jnb	_RI,00144$
      000146 12r04r4F         [24]  770 	lcall	_receive
      000149                        771 00144$:
                                    772 ;	fire_alarm_panel.c:196: if(!LAMP) { // Lamp test button pressed (active low)
      000149 20 A6 70         [24]  773 	jb	_LAMP,00151$
                                    774 ;	fire_alarm_panel.c:198: BL = 1;
                                    775 ;	assignBit
      00014C D2 A7            [12]  776 	setb	_BL
                                    777 ;	fire_alarm_panel.c:199: lcd_cmd(LINE1);
      00014E 90r00r07         [24]  778 	mov	dptr,#_LINE1
      000151 75 F0 80         [24]  779 	mov	b, #0x80
      000154 12r05r32         [24]  780 	lcall	_lcd_cmd
                                    781 ;	fire_alarm_panel.c:200: lcd_disp(TLAMP);
      000157 90r00rA6         [24]  782 	mov	dptr,#_TLAMP
      00015A 75 F0 80         [24]  783 	mov	b, #0x80
      00015D 12r05r86         [24]  784 	lcall	_lcd_disp
                                    785 ;	fire_alarm_panel.c:201: lcd_cmd(LINE2);
      000160 90r00r0B         [24]  786 	mov	dptr,#_LINE2
      000163 75 F0 80         [24]  787 	mov	b, #0x80
      000166 12r05r32         [24]  788 	lcall	_lcd_cmd
                                    789 ;	fire_alarm_panel.c:202: lcd_disp(TZONE1);
      000169 90r00r40         [24]  790 	mov	dptr,#_TZONE1
      00016C 75 F0 80         [24]  791 	mov	b, #0x80
      00016F 12r05r86         [24]  792 	lcall	_lcd_disp
                                    793 ;	fire_alarm_panel.c:203: delay1();
      000172 12r06r00         [24]  794 	lcall	_delay1
                                    795 ;	fire_alarm_panel.c:204: delay1();
      000175 12r06r00         [24]  796 	lcall	_delay1
                                    797 ;	fire_alarm_panel.c:207: CFLR = 1; CFTLR = 1; HOT = 1; BUZ = 1;
                                    798 ;	assignBit
      000178 D2 96            [12]  799 	setb	_CFLR
                                    800 ;	assignBit
      00017A D2 97            [12]  801 	setb	_CFTLR
                                    802 ;	assignBit
      00017C D2 94            [12]  803 	setb	_HOT
                                    804 ;	assignBit
      00017E D2 95            [12]  805 	setb	_BUZ
                                    806 ;	fire_alarm_panel.c:208: delay1();
      000180 12r06r00         [24]  807 	lcall	_delay1
                                    808 ;	fire_alarm_panel.c:209: CFLR = 0; CFTLR = 0; HOT = 0; BUZ = 0;
                                    809 ;	assignBit
      000183 C2 96            [12]  810 	clr	_CFLR
                                    811 ;	assignBit
      000185 C2 97            [12]  812 	clr	_CFTLR
                                    813 ;	assignBit
      000187 C2 94            [12]  814 	clr	_HOT
                                    815 ;	assignBit
      000189 C2 95            [12]  816 	clr	_BUZ
                                    817 ;	fire_alarm_panel.c:211: lcd_cmd(LINE2);
      00018B 90r00r0B         [24]  818 	mov	dptr,#_LINE2
      00018E 75 F0 80         [24]  819 	mov	b, #0x80
      000191 12r05r32         [24]  820 	lcall	_lcd_cmd
                                    821 ;	fire_alarm_panel.c:212: lcd_disp(TZONE2);
      000194 90r00r51         [24]  822 	mov	dptr,#_TZONE2
      000197 75 F0 80         [24]  823 	mov	b, #0x80
      00019A 12r05r86         [24]  824 	lcall	_lcd_disp
                                    825 ;	fire_alarm_panel.c:213: delay1();
      00019D 12r06r00         [24]  826 	lcall	_delay1
                                    827 ;	fire_alarm_panel.c:216: CFLR = 1; CFTLR = 1; HOT = 1; BUZ = 1;
                                    828 ;	assignBit
      0001A0 D2 96            [12]  829 	setb	_CFLR
                                    830 ;	assignBit
      0001A2 D2 97            [12]  831 	setb	_CFTLR
                                    832 ;	assignBit
      0001A4 D2 94            [12]  833 	setb	_HOT
                                    834 ;	assignBit
      0001A6 D2 95            [12]  835 	setb	_BUZ
                                    836 ;	fire_alarm_panel.c:217: delay1();
      0001A8 12r06r00         [24]  837 	lcall	_delay1
                                    838 ;	fire_alarm_panel.c:218: CFLR = 0; CFTLR = 0; HOT = 0; BUZ = 0;
                                    839 ;	assignBit
      0001AB C2 96            [12]  840 	clr	_CFLR
                                    841 ;	assignBit
      0001AD C2 97            [12]  842 	clr	_CFTLR
                                    843 ;	assignBit
      0001AF C2 94            [12]  844 	clr	_HOT
                                    845 ;	assignBit
      0001B1 C2 95            [12]  846 	clr	_BUZ
                                    847 ;	fire_alarm_panel.c:221: while(!LAMP);
      0001B3                        848 00145$:
      0001B3 30 A6 FD         [24]  849 	jnb	_LAMP,00145$
                                    850 ;	fire_alarm_panel.c:222: if(RI) receive();
      0001B6 30 98 03         [24]  851 	jnb	_RI,00151$
      0001B9 12r04r4F         [24]  852 	lcall	_receive
      0001BC                        853 00151$:
                                    854 ;	fire_alarm_panel.c:226: if(!EVQ) {
      0001BC 20 A1 43         [24]  855 	jb	_EVQ,00159$
                                    856 ;	fire_alarm_panel.c:227: BL = 1;
                                    857 ;	assignBit
      0001BF D2 A7            [12]  858 	setb	_BL
                                    859 ;	fire_alarm_panel.c:228: BUZ = 1;
                                    860 ;	assignBit
      0001C1 D2 95            [12]  861 	setb	_BUZ
                                    862 ;	fire_alarm_panel.c:229: HOT = 1;
                                    863 ;	assignBit
      0001C3 D2 94            [12]  864 	setb	_HOT
                                    865 ;	fire_alarm_panel.c:230: CFLR = 1;
                                    866 ;	assignBit
      0001C5 D2 96            [12]  867 	setb	_CFLR
                                    868 ;	fire_alarm_panel.c:231: lcd_cmd(LINE1);
      0001C7 90r00r07         [24]  869 	mov	dptr,#_LINE1
      0001CA 75 F0 80         [24]  870 	mov	b, #0x80
      0001CD 12r05r32         [24]  871 	lcall	_lcd_cmd
                                    872 ;	fire_alarm_panel.c:232: lcd_disp(TEVQ);
      0001D0 90r00rB7         [24]  873 	mov	dptr,#_TEVQ
      0001D3 75 F0 80         [24]  874 	mov	b, #0x80
      0001D6 12r05r86         [24]  875 	lcall	_lcd_disp
                                    876 ;	fire_alarm_panel.c:233: lcd_cmd(LINE2);
      0001D9 90r00r0B         [24]  877 	mov	dptr,#_LINE2
      0001DC 75 F0 80         [24]  878 	mov	b, #0x80
      0001DF 12r05r32         [24]  879 	lcall	_lcd_cmd
                                    880 ;	fire_alarm_panel.c:234: lcd_disp(TEXT4);
      0001E2 90r00r95         [24]  881 	mov	dptr,#_TEXT4
      0001E5 75 F0 80         [24]  882 	mov	b, #0x80
      0001E8 12r05r86         [24]  883 	lcall	_lcd_disp
                                    884 ;	fire_alarm_panel.c:237: while(!EVQ && !RI) {
      0001EB                        885 00153$:
      0001EB 20 A1 08         [24]  886 	jb	_EVQ,00155$
      0001EE 20 98 05         [24]  887 	jb	_RI,00155$
                                    888 ;	fire_alarm_panel.c:238: delay1();
      0001F1 12r06r00         [24]  889 	lcall	_delay1
      0001F4 80 F5            [24]  890 	sjmp	00153$
      0001F6                        891 00155$:
                                    892 ;	fire_alarm_panel.c:241: if(RI) receive();
      0001F6 30 98 03         [24]  893 	jnb	_RI,00157$
      0001F9 12r04r4F         [24]  894 	lcall	_receive
      0001FC                        895 00157$:
                                    896 ;	fire_alarm_panel.c:244: BUZ = 0;
                                    897 ;	assignBit
      0001FC C2 95            [12]  898 	clr	_BUZ
                                    899 ;	fire_alarm_panel.c:245: HOT = 0;
                                    900 ;	assignBit
      0001FE C2 94            [12]  901 	clr	_HOT
                                    902 ;	fire_alarm_panel.c:246: CFLR = 0;
                                    903 ;	assignBit
      000200 C2 96            [12]  904 	clr	_CFLR
      000202                        905 00159$:
                                    906 ;	fire_alarm_panel.c:250: if (!PR1 && !PR2) {
      000202 20*05 0B         [24]  907 	jb	_PR1,00161$
      000205 20*06 08         [24]  908 	jb	_PR2,00161$
                                    909 ;	fire_alarm_panel.c:251: CFLR = 0;
                                    910 ;	assignBit
      000208 C2 96            [12]  911 	clr	_CFLR
                                    912 ;	fire_alarm_panel.c:252: CFTLR = 0;
                                    913 ;	assignBit
      00020A C2 97            [12]  914 	clr	_CFTLR
                                    915 ;	fire_alarm_panel.c:253: HOT = 0;
                                    916 ;	assignBit
      00020C C2 94            [12]  917 	clr	_HOT
                                    918 ;	fire_alarm_panel.c:254: BUZ = 0;
                                    919 ;	assignBit
      00020E C2 95            [12]  920 	clr	_BUZ
      000210                        921 00161$:
                                    922 ;	fire_alarm_panel.c:257: delay();
      000210 12r06r13         [24]  923 	lcall	_delay
                                    924 ;	fire_alarm_panel.c:260: if(!PR1 && !PR2) {
      000213 20*05 27         [24]  925 	jb	_PR1,00164$
      000216 20*06 24         [24]  926 	jb	_PR2,00164$
                                    927 ;	fire_alarm_panel.c:261: lcd_cmd(LINE1);
      000219 90r00r07         [24]  928 	mov	dptr,#_LINE1
      00021C 75 F0 80         [24]  929 	mov	b, #0x80
      00021F 12r05r32         [24]  930 	lcall	_lcd_cmd
                                    931 ;	fire_alarm_panel.c:262: lcd_disp(TEXT1);
      000222 90r00r0D         [24]  932 	mov	dptr,#_TEXT1
      000225 75 F0 80         [24]  933 	mov	b, #0x80
      000228 12r05r86         [24]  934 	lcall	_lcd_disp
                                    935 ;	fire_alarm_panel.c:263: lcd_cmd(LINE2);
      00022B 90r00r0B         [24]  936 	mov	dptr,#_LINE2
      00022E 75 F0 80         [24]  937 	mov	b, #0x80
      000231 12r05r32         [24]  938 	lcall	_lcd_cmd
                                    939 ;	fire_alarm_panel.c:264: lcd_disp(TEXT3);
      000234 90r00r2F         [24]  940 	mov	dptr,#_TEXT3
      000237 75 F0 80         [24]  941 	mov	b, #0x80
      00023A 12r05r86         [24]  942 	lcall	_lcd_disp
      00023D                        943 00164$:
                                    944 ;	fire_alarm_panel.c:268: if(BLT1 > 0) {
      00023D E5*00            [12]  945 	mov	a,_BLT1
      00023F 60 05            [24]  946 	jz	00169$
                                    947 ;	fire_alarm_panel.c:269: BLT1--;
                                    948 ;	fire_alarm_panel.c:270: if(BLT1 == 0) {
      000241 D5*00 02         [24]  949 	djnz	_BLT1,00169$
                                    950 ;	fire_alarm_panel.c:271: BL = 0;
                                    951 ;	assignBit
      000244 C2 A7            [12]  952 	clr	_BL
      000246                        953 00169$:
                                    954 ;	fire_alarm_panel.c:276: if(!LB) {
      000246 20 A2 45         [24]  955 	jb	_LB,00180$
                                    956 ;	fire_alarm_panel.c:277: CFTLR = 1;
                                    957 ;	assignBit
      000249 D2 97            [12]  958 	setb	_CFTLR
                                    959 ;	fire_alarm_panel.c:278: if(!LISO) {
      00024B 20*04 09         [24]  960 	jb	_LISO,00173$
                                    961 ;	fire_alarm_panel.c:279: BUZ = 1;
                                    962 ;	assignBit
      00024E D2 95            [12]  963 	setb	_BUZ
                                    964 ;	fire_alarm_panel.c:280: if(!SIL) {
      000250 20 A0 04         [24]  965 	jb	_SIL,00173$
                                    966 ;	fire_alarm_panel.c:282: LISO = 1;
                                    967 ;	assignBit
      000253 D2*04            [12]  968 	setb	_LISO
                                    969 ;	fire_alarm_panel.c:283: BUZ = 0;
                                    970 ;	assignBit
      000255 C2 95            [12]  971 	clr	_BUZ
      000257                        972 00173$:
                                    973 ;	fire_alarm_panel.c:287: BL = 1;
                                    974 ;	assignBit
      000257 D2 A7            [12]  975 	setb	_BL
                                    976 ;	fire_alarm_panel.c:288: lcd_cmd(LINE1);
      000259 90r00r07         [24]  977 	mov	dptr,#_LINE1
      00025C 75 F0 80         [24]  978 	mov	b, #0x80
      00025F 12r05r32         [24]  979 	lcall	_lcd_cmd
                                    980 ;	fire_alarm_panel.c:289: lcd_disp(LOWB);
      000262 90r01r0C         [24]  981 	mov	dptr,#_LOWB
      000265 75 F0 80         [24]  982 	mov	b, #0x80
      000268 12r05r86         [24]  983 	lcall	_lcd_disp
                                    984 ;	fire_alarm_panel.c:290: lcd_cmd(LINE2);
      00026B 90r00r0B         [24]  985 	mov	dptr,#_LINE2
      00026E 75 F0 80         [24]  986 	mov	b, #0x80
      000271 12r05r32         [24]  987 	lcall	_lcd_cmd
                                    988 ;	fire_alarm_panel.c:291: lcd_disp(LOWM);
      000274 90r01r1D         [24]  989 	mov	dptr,#_LOWM
      000277 75 F0 80         [24]  990 	mov	b, #0x80
      00027A 12r05r86         [24]  991 	lcall	_lcd_disp
                                    992 ;	fire_alarm_panel.c:292: delay1();
      00027D 12r06r00         [24]  993 	lcall	_delay1
                                    994 ;	fire_alarm_panel.c:293: delay1();
      000280 12r06r00         [24]  995 	lcall	_delay1
                                    996 ;	fire_alarm_panel.c:295: if(LISO) {
      000283 20*04 03         [24]  997 	jb	_LISO,00497$
      000286 02r00r44         [24]  998 	ljmp	00183$
      000289                        999 00497$:
                                   1000 ;	fire_alarm_panel.c:296: BUZ = 0; // Keep buzzer off if silenced
                                   1001 ;	assignBit
      000289 C2 95            [12] 1002 	clr	_BUZ
      00028B 02r00r44         [24] 1003 	ljmp	00183$
      00028E                       1004 00180$:
                                   1005 ;	fire_alarm_panel.c:299: LISO = 0;
                                   1006 ;	assignBit
      00028E C2*04            [12] 1007 	clr	_LISO
                                   1008 ;	fire_alarm_panel.c:301: if(!PR1 && !PR2) {
      000290 30*05 03         [24] 1009 	jnb	_PR1,00498$
      000293 02r00r44         [24] 1010 	ljmp	00183$
      000296                       1011 00498$:
      000296 30*06 03         [24] 1012 	jnb	_PR2,00499$
      000299 02r00r44         [24] 1013 	ljmp	00183$
      00029C                       1014 00499$:
                                   1015 ;	fire_alarm_panel.c:302: CFTLR = 0;
                                   1016 ;	assignBit
      00029C C2 97            [12] 1017 	clr	_CFTLR
                                   1018 ;	fire_alarm_panel.c:306: }
      00029E 02r00r44         [24] 1019 	ljmp	00183$
                                   1020 ;------------------------------------------------------------
                                   1021 ;Allocation info for local variables in function 'init_system'
                                   1022 ;------------------------------------------------------------
                                   1023 ;	fire_alarm_panel.c:308: void init_system(void)
                                   1024 ;	-----------------------------------------
                                   1025 ;	 function init_system
                                   1026 ;	-----------------------------------------
      0002A1                       1027 _init_system:
                                   1028 ;	fire_alarm_panel.c:311: P1 = 0x00; // All indicators OFF initially
      0002A1 75 90 00         [24] 1029 	mov	_P1,#0x00
                                   1030 ;	fire_alarm_panel.c:312: P0 = 0xFF;
      0002A4 75 80 FF         [24] 1031 	mov	_P0,#0xff
                                   1032 ;	fire_alarm_panel.c:313: P2 = 0xFF;
      0002A7 75 A0 FF         [24] 1033 	mov	_P2,#0xff
                                   1034 ;	fire_alarm_panel.c:314: P3 = 0xFF;
      0002AA 75 B0 FF         [24] 1035 	mov	_P3,#0xff
                                   1036 ;	fire_alarm_panel.c:317: LISO = 0;
                                   1037 ;	assignBit
      0002AD C2*04            [12] 1038 	clr	_LISO
                                   1039 ;	fire_alarm_panel.c:318: SLC1 = 0;
                                   1040 ;	assignBit
      0002AF C2*02            [12] 1041 	clr	_SLC1
                                   1042 ;	fire_alarm_panel.c:319: SLC2 = 0;
                                   1043 ;	assignBit
      0002B1 C2*03            [12] 1044 	clr	_SLC2
                                   1045 ;	fire_alarm_panel.c:320: Z1 = 0;
                                   1046 ;	assignBit
      0002B3 C2*00            [12] 1047 	clr	_Z1
                                   1048 ;	fire_alarm_panel.c:321: Z2 = 0;
                                   1049 ;	assignBit
      0002B5 C2*01            [12] 1050 	clr	_Z2
                                   1051 ;	fire_alarm_panel.c:322: PR1 = 0;
                                   1052 ;	assignBit
      0002B7 C2*05            [12] 1053 	clr	_PR1
                                   1054 ;	fire_alarm_panel.c:323: PR2 = 0;
                                   1055 ;	assignBit
      0002B9 C2*06            [12] 1056 	clr	_PR2
                                   1057 ;	fire_alarm_panel.c:325: BLT1 = 30;
      0002BB 75*00 1E         [24] 1058 	mov	_BLT1,#0x1e
                                   1059 ;	fire_alarm_panel.c:326: RAP = 0;
      0002BE 75*01 00         [24] 1060 	mov	_RAP,#0x00
                                   1061 ;	fire_alarm_panel.c:329: TMOD = 0x20;
      0002C1 75 89 20         [24] 1062 	mov	_TMOD,#0x20
                                   1063 ;	fire_alarm_panel.c:330: TH1 = 253;  // -3 for 9600 baud
      0002C4 75 8D FD         [24] 1064 	mov	_TH1,#0xfd
                                   1065 ;	fire_alarm_panel.c:331: SCON = 0x50;
      0002C7 75 98 50         [24] 1066 	mov	_SCON,#0x50
                                   1067 ;	fire_alarm_panel.c:332: TR1 = 1;
                                   1068 ;	assignBit
      0002CA D2 8E            [12] 1069 	setb	_TR1
                                   1070 ;	fire_alarm_panel.c:333: }
      0002CC 22               [24] 1071 	ret
                                   1072 ;------------------------------------------------------------
                                   1073 ;Allocation info for local variables in function 'prz1'
                                   1074 ;------------------------------------------------------------
                                   1075 ;	fire_alarm_panel.c:335: void prz1(void)
                                   1076 ;	-----------------------------------------
                                   1077 ;	 function prz1
                                   1078 ;	-----------------------------------------
      0002CD                       1079 _prz1:
                                   1080 ;	fire_alarm_panel.c:337: if(!Z1) {
      0002CD 20*00 12         [24] 1081 	jb	_Z1,00102$
                                   1082 ;	fire_alarm_panel.c:338: lcd_cmd(LINE1);
      0002D0 90r00r07         [24] 1083 	mov	dptr,#_LINE1
      0002D3 75 F0 80         [24] 1084 	mov	b, #0x80
      0002D6 12r05r32         [24] 1085 	lcall	_lcd_cmd
                                   1086 ;	fire_alarm_panel.c:339: lcd_disp(TZONE1);
      0002D9 90r00r40         [24] 1087 	mov	dptr,#_TZONE1
      0002DC 75 F0 80         [24] 1088 	mov	b, #0x80
      0002DF 12r05r86         [24] 1089 	lcall	_lcd_disp
      0002E2                       1090 00102$:
                                   1091 ;	fire_alarm_panel.c:343: if(!SHORT1) {
      0002E2 20 82 25         [24] 1092 	jb	_SHORT1,00129$
                                   1093 ;	fire_alarm_panel.c:344: lcd_cmd(LINE2);
      0002E5 90r00r0B         [24] 1094 	mov	dptr,#_LINE2
      0002E8 75 F0 80         [24] 1095 	mov	b, #0x80
      0002EB 12r05r32         [24] 1096 	lcall	_lcd_cmd
                                   1097 ;	fire_alarm_panel.c:345: lcd_disp(SHORT);
      0002EE 90r00r73         [24] 1098 	mov	dptr,#_SHORT
      0002F1 75 F0 80         [24] 1099 	mov	b, #0x80
      0002F4 12r05r86         [24] 1100 	lcall	_lcd_disp
                                   1101 ;	fire_alarm_panel.c:346: CFTLR = 1;  // Fault LED ON
                                   1102 ;	assignBit
      0002F7 D2 97            [12] 1103 	setb	_CFTLR
                                   1104 ;	fire_alarm_panel.c:347: CFLR = 0;   // Fire LED OFF
                                   1105 ;	assignBit
      0002F9 C2 96            [12] 1106 	clr	_CFLR
                                   1107 ;	fire_alarm_panel.c:348: HOT = 0;    // Hooter OFF
                                   1108 ;	assignBit
      0002FB C2 94            [12] 1109 	clr	_HOT
                                   1110 ;	fire_alarm_panel.c:349: if(!SLC1) {
      0002FD 20*02 05         [24] 1111 	jb	_SLC1,00104$
                                   1112 ;	fire_alarm_panel.c:350: BUZ = 1; // Buzzer ON if not silenced
                                   1113 ;	assignBit
      000300 D2 95            [12] 1114 	setb	_BUZ
      000302 02r03r8B         [24] 1115 	ljmp	00130$
      000305                       1116 00104$:
                                   1117 ;	fire_alarm_panel.c:352: BUZ = 0; // Buzzer OFF if silenced
                                   1118 ;	assignBit
      000305 C2 95            [12] 1119 	clr	_BUZ
      000307 02r03r8B         [24] 1120 	ljmp	00130$
      00030A                       1121 00129$:
                                   1122 ;	fire_alarm_panel.c:354: } else if(!FIRE1) {
      00030A 20 80 2E         [24] 1123 	jb	_FIRE1,00126$
                                   1124 ;	fire_alarm_panel.c:355: lcd_cmd(LINE2);
      00030D 90r00r0B         [24] 1125 	mov	dptr,#_LINE2
      000310 75 F0 80         [24] 1126 	mov	b, #0x80
      000313 12r05r32         [24] 1127 	lcall	_lcd_cmd
                                   1128 ;	fire_alarm_panel.c:356: lcd_disp(FIRE);
      000316 90r00r62         [24] 1129 	mov	dptr,#_FIRE
      000319 75 F0 80         [24] 1130 	mov	b, #0x80
      00031C 12r05r86         [24] 1131 	lcall	_lcd_disp
                                   1132 ;	fire_alarm_panel.c:357: CFLR = 1;   // Fire LED ON
                                   1133 ;	assignBit
      00031F D2 96            [12] 1134 	setb	_CFLR
                                   1135 ;	fire_alarm_panel.c:359: if(FIRE2 && OPEN2 && SHORT2) { // Zone 2 healthy
      000321 30 83 08         [24] 1136 	jnb	_FIRE2,00107$
      000324 30 84 05         [24] 1137 	jnb	_OPEN2,00107$
      000327 30 85 02         [24] 1138 	jnb	_SHORT2,00107$
                                   1139 ;	fire_alarm_panel.c:360: CFTLR = 0;
                                   1140 ;	assignBit
      00032A C2 97            [12] 1141 	clr	_CFTLR
      00032C                       1142 00107$:
                                   1143 ;	fire_alarm_panel.c:362: if(!SLC1) {
      00032C 20*02 06         [24] 1144 	jb	_SLC1,00111$
                                   1145 ;	fire_alarm_panel.c:363: BUZ = 1;  // Buzzer ON if not silenced
                                   1146 ;	assignBit
      00032F D2 95            [12] 1147 	setb	_BUZ
                                   1148 ;	fire_alarm_panel.c:364: HOT = 1;  // Hooter ON if not silenced
                                   1149 ;	assignBit
      000331 D2 94            [12] 1150 	setb	_HOT
      000333 80 56            [24] 1151 	sjmp	00130$
      000335                       1152 00111$:
                                   1153 ;	fire_alarm_panel.c:366: BUZ = 0;  // Buzzer OFF if silenced
                                   1154 ;	assignBit
      000335 C2 95            [12] 1155 	clr	_BUZ
                                   1156 ;	fire_alarm_panel.c:367: HOT = 0;  // Hooter OFF if silenced
                                   1157 ;	assignBit
      000337 C2 94            [12] 1158 	clr	_HOT
      000339 80 50            [24] 1159 	sjmp	00130$
      00033B                       1160 00126$:
                                   1161 ;	fire_alarm_panel.c:369: } else if(!OPEN1) {
      00033B 20 81 23         [24] 1162 	jb	_OPEN1,00123$
                                   1163 ;	fire_alarm_panel.c:370: lcd_cmd(LINE2);
      00033E 90r00r0B         [24] 1164 	mov	dptr,#_LINE2
      000341 75 F0 80         [24] 1165 	mov	b, #0x80
      000344 12r05r32         [24] 1166 	lcall	_lcd_cmd
                                   1167 ;	fire_alarm_panel.c:371: lcd_disp(OPEN);
      000347 90r00r84         [24] 1168 	mov	dptr,#_OPEN
      00034A 75 F0 80         [24] 1169 	mov	b, #0x80
      00034D 12r05r86         [24] 1170 	lcall	_lcd_disp
                                   1171 ;	fire_alarm_panel.c:372: CFTLR = 1;  // Fault LED ON
                                   1172 ;	assignBit
      000350 D2 97            [12] 1173 	setb	_CFTLR
                                   1174 ;	fire_alarm_panel.c:373: CFLR = 0;   // Fire LED OFF
                                   1175 ;	assignBit
      000352 C2 96            [12] 1176 	clr	_CFLR
                                   1177 ;	fire_alarm_panel.c:374: HOT = 0;    // Hooter OFF
                                   1178 ;	assignBit
      000354 C2 94            [12] 1179 	clr	_HOT
                                   1180 ;	fire_alarm_panel.c:375: if(!SLC1) {
      000356 20*02 04         [24] 1181 	jb	_SLC1,00114$
                                   1182 ;	fire_alarm_panel.c:376: BUZ = 1; // Buzzer ON if not silenced
                                   1183 ;	assignBit
      000359 D2 95            [12] 1184 	setb	_BUZ
      00035B 80 2E            [24] 1185 	sjmp	00130$
      00035D                       1186 00114$:
                                   1187 ;	fire_alarm_panel.c:378: BUZ = 0; // Buzzer OFF if silenced
                                   1188 ;	assignBit
      00035D C2 95            [12] 1189 	clr	_BUZ
      00035F 80 2A            [24] 1190 	sjmp	00130$
      000361                       1191 00123$:
                                   1192 ;	fire_alarm_panel.c:383: PR1 = 0;
                                   1193 ;	assignBit
      000361 C2*05            [12] 1194 	clr	_PR1
                                   1195 ;	fire_alarm_panel.c:384: SLC1 = 0;
                                   1196 ;	assignBit
      000363 C2*02            [12] 1197 	clr	_SLC1
                                   1198 ;	fire_alarm_panel.c:387: if(FIRE2 && OPEN2 && SHORT2) { // Zone 2 also healthy
      000365 30 83 0E         [24] 1199 	jnb	_FIRE2,00117$
      000368 30 84 0B         [24] 1200 	jnb	_OPEN2,00117$
      00036B 30 85 08         [24] 1201 	jnb	_SHORT2,00117$
                                   1202 ;	fire_alarm_panel.c:388: CFTLR = 0;
                                   1203 ;	assignBit
      00036E C2 97            [12] 1204 	clr	_CFTLR
                                   1205 ;	fire_alarm_panel.c:389: CFLR = 0;
                                   1206 ;	assignBit
      000370 C2 96            [12] 1207 	clr	_CFLR
                                   1208 ;	fire_alarm_panel.c:390: HOT = 0;
                                   1209 ;	assignBit
      000372 C2 94            [12] 1210 	clr	_HOT
                                   1211 ;	fire_alarm_panel.c:391: BUZ = 0;
                                   1212 ;	assignBit
      000374 C2 95            [12] 1213 	clr	_BUZ
      000376                       1214 00117$:
                                   1215 ;	fire_alarm_panel.c:394: if(ZONE1) { // If zone is not isolated
      000376 30 A4 12         [24] 1216 	jnb	_ZONE1,00130$
                                   1217 ;	fire_alarm_panel.c:395: lcd_cmd(LINE2);
      000379 90r00r0B         [24] 1218 	mov	dptr,#_LINE2
      00037C 75 F0 80         [24] 1219 	mov	b, #0x80
      00037F 12r05r32         [24] 1220 	lcall	_lcd_cmd
                                   1221 ;	fire_alarm_panel.c:396: lcd_disp(ISO1H);
      000382 90r00rEA         [24] 1222 	mov	dptr,#_ISO1H
      000385 75 F0 80         [24] 1223 	mov	b, #0x80
      000388 12r05r86         [24] 1224 	lcall	_lcd_disp
      00038B                       1225 00130$:
                                   1226 ;	fire_alarm_panel.c:400: delay1();
                                   1227 ;	fire_alarm_panel.c:401: }
      00038B 02r06r00         [24] 1228 	ljmp	_delay1
                                   1229 ;------------------------------------------------------------
                                   1230 ;Allocation info for local variables in function 'prz2'
                                   1231 ;------------------------------------------------------------
                                   1232 ;	fire_alarm_panel.c:403: void prz2(void)
                                   1233 ;	-----------------------------------------
                                   1234 ;	 function prz2
                                   1235 ;	-----------------------------------------
      00038E                       1236 _prz2:
                                   1237 ;	fire_alarm_panel.c:405: if(!Z2) { // Fixed: should check Z2 for zone 2 testing
      00038E 20*01 12         [24] 1238 	jb	_Z2,00102$
                                   1239 ;	fire_alarm_panel.c:406: lcd_cmd(LINE1);
      000391 90r00r07         [24] 1240 	mov	dptr,#_LINE1
      000394 75 F0 80         [24] 1241 	mov	b, #0x80
      000397 12r05r32         [24] 1242 	lcall	_lcd_cmd
                                   1243 ;	fire_alarm_panel.c:407: lcd_disp(TZONE2);
      00039A 90r00r51         [24] 1244 	mov	dptr,#_TZONE2
      00039D 75 F0 80         [24] 1245 	mov	b, #0x80
      0003A0 12r05r86         [24] 1246 	lcall	_lcd_disp
      0003A3                       1247 00102$:
                                   1248 ;	fire_alarm_panel.c:411: if(!SHORT2) {
      0003A3 20 85 25         [24] 1249 	jb	_SHORT2,00129$
                                   1250 ;	fire_alarm_panel.c:412: lcd_cmd(LINE2);
      0003A6 90r00r0B         [24] 1251 	mov	dptr,#_LINE2
      0003A9 75 F0 80         [24] 1252 	mov	b, #0x80
      0003AC 12r05r32         [24] 1253 	lcall	_lcd_cmd
                                   1254 ;	fire_alarm_panel.c:413: lcd_disp(SHORT);
      0003AF 90r00r73         [24] 1255 	mov	dptr,#_SHORT
      0003B2 75 F0 80         [24] 1256 	mov	b, #0x80
      0003B5 12r05r86         [24] 1257 	lcall	_lcd_disp
                                   1258 ;	fire_alarm_panel.c:414: CFTLR = 1;  // Fault LED ON
                                   1259 ;	assignBit
      0003B8 D2 97            [12] 1260 	setb	_CFTLR
                                   1261 ;	fire_alarm_panel.c:415: CFLR = 0;   // Fire LED OFF
                                   1262 ;	assignBit
      0003BA C2 96            [12] 1263 	clr	_CFLR
                                   1264 ;	fire_alarm_panel.c:416: HOT = 0;    // Hooter OFF
                                   1265 ;	assignBit
      0003BC C2 94            [12] 1266 	clr	_HOT
                                   1267 ;	fire_alarm_panel.c:417: if(!SLC2) {
      0003BE 20*03 05         [24] 1268 	jb	_SLC2,00104$
                                   1269 ;	fire_alarm_panel.c:418: BUZ = 1; // Buzzer ON if not silenced
                                   1270 ;	assignBit
      0003C1 D2 95            [12] 1271 	setb	_BUZ
      0003C3 02r04r4C         [24] 1272 	ljmp	00130$
      0003C6                       1273 00104$:
                                   1274 ;	fire_alarm_panel.c:420: BUZ = 0; // Buzzer OFF if silenced
                                   1275 ;	assignBit
      0003C6 C2 95            [12] 1276 	clr	_BUZ
      0003C8 02r04r4C         [24] 1277 	ljmp	00130$
      0003CB                       1278 00129$:
                                   1279 ;	fire_alarm_panel.c:422: } else if(!FIRE2) {
      0003CB 20 83 2E         [24] 1280 	jb	_FIRE2,00126$
                                   1281 ;	fire_alarm_panel.c:423: lcd_cmd(LINE2);
      0003CE 90r00r0B         [24] 1282 	mov	dptr,#_LINE2
      0003D1 75 F0 80         [24] 1283 	mov	b, #0x80
      0003D4 12r05r32         [24] 1284 	lcall	_lcd_cmd
                                   1285 ;	fire_alarm_panel.c:424: lcd_disp(FIRE);
      0003D7 90r00r62         [24] 1286 	mov	dptr,#_FIRE
      0003DA 75 F0 80         [24] 1287 	mov	b, #0x80
      0003DD 12r05r86         [24] 1288 	lcall	_lcd_disp
                                   1289 ;	fire_alarm_panel.c:425: CFLR = 1;   // Fire LED ON
                                   1290 ;	assignBit
      0003E0 D2 96            [12] 1291 	setb	_CFLR
                                   1292 ;	fire_alarm_panel.c:427: if(FIRE1 && OPEN1 && SHORT1) { // Zone 1 healthy
      0003E2 30 80 08         [24] 1293 	jnb	_FIRE1,00107$
      0003E5 30 81 05         [24] 1294 	jnb	_OPEN1,00107$
      0003E8 30 82 02         [24] 1295 	jnb	_SHORT1,00107$
                                   1296 ;	fire_alarm_panel.c:428: CFTLR = 0;
                                   1297 ;	assignBit
      0003EB C2 97            [12] 1298 	clr	_CFTLR
      0003ED                       1299 00107$:
                                   1300 ;	fire_alarm_panel.c:430: if(!SLC2) {
      0003ED 20*03 06         [24] 1301 	jb	_SLC2,00111$
                                   1302 ;	fire_alarm_panel.c:431: BUZ = 1;  // Buzzer ON if not silenced
                                   1303 ;	assignBit
      0003F0 D2 95            [12] 1304 	setb	_BUZ
                                   1305 ;	fire_alarm_panel.c:432: HOT = 1;  // Hooter ON if not silenced
                                   1306 ;	assignBit
      0003F2 D2 94            [12] 1307 	setb	_HOT
      0003F4 80 56            [24] 1308 	sjmp	00130$
      0003F6                       1309 00111$:
                                   1310 ;	fire_alarm_panel.c:434: BUZ = 0;  // Buzzer OFF if silenced
                                   1311 ;	assignBit
      0003F6 C2 95            [12] 1312 	clr	_BUZ
                                   1313 ;	fire_alarm_panel.c:435: HOT = 0;  // Hooter OFF if silenced
                                   1314 ;	assignBit
      0003F8 C2 94            [12] 1315 	clr	_HOT
      0003FA 80 50            [24] 1316 	sjmp	00130$
      0003FC                       1317 00126$:
                                   1318 ;	fire_alarm_panel.c:437: } else if(!OPEN2) {
      0003FC 20 84 23         [24] 1319 	jb	_OPEN2,00123$
                                   1320 ;	fire_alarm_panel.c:438: lcd_cmd(LINE2);
      0003FF 90r00r0B         [24] 1321 	mov	dptr,#_LINE2
      000402 75 F0 80         [24] 1322 	mov	b, #0x80
      000405 12r05r32         [24] 1323 	lcall	_lcd_cmd
                                   1324 ;	fire_alarm_panel.c:439: lcd_disp(OPEN);
      000408 90r00r84         [24] 1325 	mov	dptr,#_OPEN
      00040B 75 F0 80         [24] 1326 	mov	b, #0x80
      00040E 12r05r86         [24] 1327 	lcall	_lcd_disp
                                   1328 ;	fire_alarm_panel.c:440: CFTLR = 1;  // Fault LED ON
                                   1329 ;	assignBit
      000411 D2 97            [12] 1330 	setb	_CFTLR
                                   1331 ;	fire_alarm_panel.c:441: CFLR = 0;   // Fire LED OFF
                                   1332 ;	assignBit
      000413 C2 96            [12] 1333 	clr	_CFLR
                                   1334 ;	fire_alarm_panel.c:442: HOT = 0;    // Hooter OFF
                                   1335 ;	assignBit
      000415 C2 94            [12] 1336 	clr	_HOT
                                   1337 ;	fire_alarm_panel.c:443: if(!SLC2) {
      000417 20*03 04         [24] 1338 	jb	_SLC2,00114$
                                   1339 ;	fire_alarm_panel.c:444: BUZ = 1; // Buzzer ON if not silenced
                                   1340 ;	assignBit
      00041A D2 95            [12] 1341 	setb	_BUZ
      00041C 80 2E            [24] 1342 	sjmp	00130$
      00041E                       1343 00114$:
                                   1344 ;	fire_alarm_panel.c:446: BUZ = 0; // Buzzer OFF if silenced
                                   1345 ;	assignBit
      00041E C2 95            [12] 1346 	clr	_BUZ
      000420 80 2A            [24] 1347 	sjmp	00130$
      000422                       1348 00123$:
                                   1349 ;	fire_alarm_panel.c:451: PR2 = 0;
                                   1350 ;	assignBit
      000422 C2*06            [12] 1351 	clr	_PR2
                                   1352 ;	fire_alarm_panel.c:452: SLC2 = 0;
                                   1353 ;	assignBit
      000424 C2*03            [12] 1354 	clr	_SLC2
                                   1355 ;	fire_alarm_panel.c:455: if(FIRE1 && OPEN1 && SHORT1) { // Zone 1 also healthy
      000426 30 80 0E         [24] 1356 	jnb	_FIRE1,00117$
      000429 30 81 0B         [24] 1357 	jnb	_OPEN1,00117$
      00042C 30 82 08         [24] 1358 	jnb	_SHORT1,00117$
                                   1359 ;	fire_alarm_panel.c:456: CFTLR = 0;
                                   1360 ;	assignBit
      00042F C2 97            [12] 1361 	clr	_CFTLR
                                   1362 ;	fire_alarm_panel.c:457: CFLR = 0;
                                   1363 ;	assignBit
      000431 C2 96            [12] 1364 	clr	_CFLR
                                   1365 ;	fire_alarm_panel.c:458: HOT = 0;
                                   1366 ;	assignBit
      000433 C2 94            [12] 1367 	clr	_HOT
                                   1368 ;	fire_alarm_panel.c:459: BUZ = 0;
                                   1369 ;	assignBit
      000435 C2 95            [12] 1370 	clr	_BUZ
      000437                       1371 00117$:
                                   1372 ;	fire_alarm_panel.c:462: if(ZONE2) { // If zone is not isolated
      000437 30 A5 12         [24] 1373 	jnb	_ZONE2,00130$
                                   1374 ;	fire_alarm_panel.c:463: lcd_cmd(LINE2);
      00043A 90r00r0B         [24] 1375 	mov	dptr,#_LINE2
      00043D 75 F0 80         [24] 1376 	mov	b, #0x80
      000440 12r05r32         [24] 1377 	lcall	_lcd_cmd
                                   1378 ;	fire_alarm_panel.c:464: lcd_disp(ISO2H);
      000443 90r00rFB         [24] 1379 	mov	dptr,#_ISO2H
      000446 75 F0 80         [24] 1380 	mov	b, #0x80
      000449 12r05r86         [24] 1381 	lcall	_lcd_disp
      00044C                       1382 00130$:
                                   1383 ;	fire_alarm_panel.c:468: delay1();
                                   1384 ;	fire_alarm_panel.c:469: }
      00044C 02r06r00         [24] 1385 	ljmp	_delay1
                                   1386 ;------------------------------------------------------------
                                   1387 ;Allocation info for local variables in function 'receive'
                                   1388 ;------------------------------------------------------------
                                   1389 ;received_data Allocated to registers r7 
                                   1390 ;------------------------------------------------------------
                                   1391 ;	fire_alarm_panel.c:471: void receive(void)
                                   1392 ;	-----------------------------------------
                                   1393 ;	 function receive
                                   1394 ;	-----------------------------------------
      00044F                       1395 _receive:
                                   1396 ;	fire_alarm_panel.c:475: received_data = SBUF;
      00044F AF 99            [24] 1397 	mov	r7,_SBUF
                                   1398 ;	fire_alarm_panel.c:476: RI = 0;
                                   1399 ;	assignBit
      000451 C2 98            [12] 1400 	clr	_RI
                                   1401 ;	fire_alarm_panel.c:477: SBUF = received_data;
      000453 8F 99            [24] 1402 	mov	_SBUF,r7
                                   1403 ;	fire_alarm_panel.c:478: while(!TI);
      000455                       1404 00101$:
                                   1405 ;	fire_alarm_panel.c:479: TI = 0;
                                   1406 ;	assignBit
      000455 10 99 02         [24] 1407 	jbc	_TI,00281$
      000458 80 FB            [24] 1408 	sjmp	00101$
      00045A                       1409 00281$:
                                   1410 ;	fire_alarm_panel.c:481: switch(received_data) {
      00045A BF 00 02         [24] 1411 	cjne	r7,#0x00,00282$
      00045D 80 32            [24] 1412 	sjmp	00106$
      00045F                       1413 00282$:
      00045F BF 01 02         [24] 1414 	cjne	r7,#0x01,00283$
      000462 80 3C            [24] 1415 	sjmp	00110$
      000464                       1416 00283$:
      000464 BF 02 02         [24] 1417 	cjne	r7,#0x02,00284$
      000467 80 46            [24] 1418 	sjmp	00114$
      000469                       1419 00284$:
      000469 BF 03 02         [24] 1420 	cjne	r7,#0x03,00285$
      00046C 80 55            [24] 1421 	sjmp	00122$
      00046E                       1422 00285$:
      00046E BF 40 02         [24] 1423 	cjne	r7,#0x40,00286$
      000471 80 46            [24] 1424 	sjmp	00118$
      000473                       1425 00286$:
      000473 BF AA 02         [24] 1426 	cjne	r7,#0xaa,00287$
      000476 80 0A            [24] 1427 	sjmp	00104$
      000478                       1428 00287$:
      000478 BF BB 02         [24] 1429 	cjne	r7,#0xbb,00288$
      00047B 80 0B            [24] 1430 	sjmp	00105$
      00047D                       1431 00288$:
                                   1432 ;	fire_alarm_panel.c:482: case 0xAA:
      00047D BF FF 5C         [24] 1433 	cjne	r7,#0xff,00130$
      000480 80 50            [24] 1434 	sjmp	00126$
      000482                       1435 00104$:
                                   1436 ;	fire_alarm_panel.c:483: send_data(P2);
      000482 85 A0 82         [24] 1437 	mov	dpl, _P2
                                   1438 ;	fire_alarm_panel.c:484: break;
                                   1439 ;	fire_alarm_panel.c:486: case 0xBB:
      000485 02r04rE4         [24] 1440 	ljmp	_send_data
      000488                       1441 00105$:
                                   1442 ;	fire_alarm_panel.c:487: send_data(P0 | 0xC0);
      000488 74 C0            [12] 1443 	mov	a,#0xc0
      00048A 45 80            [12] 1444 	orl	a,_P0
      00048C F5 82            [12] 1445 	mov	dpl,a
                                   1446 ;	fire_alarm_panel.c:488: break;
                                   1447 ;	fire_alarm_panel.c:490: case 0x00:
      00048E 02r04rE4         [24] 1448 	ljmp	_send_data
      000491                       1449 00106$:
                                   1450 ;	fire_alarm_panel.c:491: silence_alarms();
      000491 C0 07            [24] 1451 	push	ar7
      000493 12r04rED         [24] 1452 	lcall	_silence_alarms
      000496 D0 07            [24] 1453 	pop	ar7
                                   1454 ;	fire_alarm_panel.c:492: SBUF = received_data;
      000498 8F 99            [24] 1455 	mov	_SBUF,r7
                                   1456 ;	fire_alarm_panel.c:493: while(!TI);
      00049A                       1457 00107$:
                                   1458 ;	fire_alarm_panel.c:494: TI = 0;
                                   1459 ;	assignBit
      00049A 10 99 02         [24] 1460 	jbc	_TI,00290$
      00049D 80 FB            [24] 1461 	sjmp	00107$
      00049F                       1462 00290$:
                                   1463 ;	fire_alarm_panel.c:495: break;
                                   1464 ;	fire_alarm_panel.c:497: case 0x01:
      00049F 22               [24] 1465 	ret
      0004A0                       1466 00110$:
                                   1467 ;	fire_alarm_panel.c:498: silence_alarms();
      0004A0 C0 07            [24] 1468 	push	ar7
      0004A2 12r04rED         [24] 1469 	lcall	_silence_alarms
      0004A5 D0 07            [24] 1470 	pop	ar7
                                   1471 ;	fire_alarm_panel.c:499: SBUF = received_data;
      0004A7 8F 99            [24] 1472 	mov	_SBUF,r7
                                   1473 ;	fire_alarm_panel.c:500: while(!TI);
      0004A9                       1474 00111$:
                                   1475 ;	fire_alarm_panel.c:501: TI = 0;
                                   1476 ;	assignBit
      0004A9 10 99 02         [24] 1477 	jbc	_TI,00291$
      0004AC 80 FB            [24] 1478 	sjmp	00111$
      0004AE                       1479 00291$:
                                   1480 ;	fire_alarm_panel.c:502: break;
                                   1481 ;	fire_alarm_panel.c:504: case 0x02:
      0004AE 22               [24] 1482 	ret
      0004AF                       1483 00114$:
                                   1484 ;	fire_alarm_panel.c:505: EVQ = 0;
                                   1485 ;	assignBit
      0004AF C2 A1            [12] 1486 	clr	_EVQ
                                   1487 ;	fire_alarm_panel.c:506: SBUF = received_data;
      0004B1 8F 99            [24] 1488 	mov	_SBUF,r7
                                   1489 ;	fire_alarm_panel.c:507: while(!TI);
      0004B3                       1490 00115$:
                                   1491 ;	fire_alarm_panel.c:508: TI = 0;
                                   1492 ;	assignBit
      0004B3 10 99 02         [24] 1493 	jbc	_TI,00292$
      0004B6 80 FB            [24] 1494 	sjmp	00115$
      0004B8                       1495 00292$:
                                   1496 ;	fire_alarm_panel.c:509: break;
                                   1497 ;	fire_alarm_panel.c:511: case 0x40:
      0004B8 22               [24] 1498 	ret
      0004B9                       1499 00118$:
                                   1500 ;	fire_alarm_panel.c:512: Z2 = 1;
                                   1501 ;	assignBit
      0004B9 D2*01            [12] 1502 	setb	_Z2
                                   1503 ;	fire_alarm_panel.c:513: SBUF = received_data;
      0004BB 8F 99            [24] 1504 	mov	_SBUF,r7
                                   1505 ;	fire_alarm_panel.c:514: while(!TI);
      0004BD                       1506 00119$:
                                   1507 ;	fire_alarm_panel.c:515: TI = 0;
                                   1508 ;	assignBit
      0004BD 10 99 02         [24] 1509 	jbc	_TI,00293$
      0004C0 80 FB            [24] 1510 	sjmp	00119$
      0004C2                       1511 00293$:
                                   1512 ;	fire_alarm_panel.c:516: break;
                                   1513 ;	fire_alarm_panel.c:518: case 0x03:
      0004C2 22               [24] 1514 	ret
      0004C3                       1515 00122$:
                                   1516 ;	fire_alarm_panel.c:519: silence_alarms();
      0004C3 C0 07            [24] 1517 	push	ar7
      0004C5 12r04rED         [24] 1518 	lcall	_silence_alarms
      0004C8 D0 07            [24] 1519 	pop	ar7
                                   1520 ;	fire_alarm_panel.c:520: SBUF = received_data;
      0004CA 8F 99            [24] 1521 	mov	_SBUF,r7
                                   1522 ;	fire_alarm_panel.c:521: while(!TI);
      0004CC                       1523 00123$:
                                   1524 ;	fire_alarm_panel.c:522: TI = 0;
                                   1525 ;	assignBit
      0004CC 10 99 02         [24] 1526 	jbc	_TI,00294$
      0004CF 80 FB            [24] 1527 	sjmp	00123$
      0004D1                       1528 00294$:
                                   1529 ;	fire_alarm_panel.c:523: break;
                                   1530 ;	fire_alarm_panel.c:525: case 0xFF:
      0004D1 22               [24] 1531 	ret
      0004D2                       1532 00126$:
                                   1533 ;	fire_alarm_panel.c:526: SBUF = received_data;
      0004D2 8F 99            [24] 1534 	mov	_SBUF,r7
                                   1535 ;	fire_alarm_panel.c:527: while(!TI);
      0004D4                       1536 00127$:
                                   1537 ;	fire_alarm_panel.c:528: TI = 0;
                                   1538 ;	assignBit
      0004D4 10 99 02         [24] 1539 	jbc	_TI,00295$
      0004D7 80 FB            [24] 1540 	sjmp	00127$
      0004D9                       1541 00295$:
                                   1542 ;	fire_alarm_panel.c:530: init_system();
                                   1543 ;	fire_alarm_panel.c:531: break;
                                   1544 ;	fire_alarm_panel.c:533: default:
      0004D9 02r02rA1         [24] 1545 	ljmp	_init_system
      0004DC                       1546 00130$:
                                   1547 ;	fire_alarm_panel.c:535: SBUF = received_data;
      0004DC 8F 99            [24] 1548 	mov	_SBUF,r7
                                   1549 ;	fire_alarm_panel.c:536: while(!TI);
      0004DE                       1550 00131$:
                                   1551 ;	fire_alarm_panel.c:537: TI = 0;
                                   1552 ;	assignBit
      0004DE 10 99 02         [24] 1553 	jbc	_TI,00296$
      0004E1 80 FB            [24] 1554 	sjmp	00131$
      0004E3                       1555 00296$:
                                   1556 ;	fire_alarm_panel.c:539: }
                                   1557 ;	fire_alarm_panel.c:540: }
      0004E3 22               [24] 1558 	ret
                                   1559 ;------------------------------------------------------------
                                   1560 ;Allocation info for local variables in function 'send_data'
                                   1561 ;------------------------------------------------------------
                                   1562 ;data          Allocated to registers 
                                   1563 ;------------------------------------------------------------
                                   1564 ;	fire_alarm_panel.c:542: void send_data(unsigned char data)
                                   1565 ;	-----------------------------------------
                                   1566 ;	 function send_data
                                   1567 ;	-----------------------------------------
      0004E4                       1568 _send_data:
      0004E4 85 82 99         [24] 1569 	mov	_SBUF,dpl
                                   1570 ;	fire_alarm_panel.c:545: while(!TI);
      0004E7                       1571 00101$:
                                   1572 ;	fire_alarm_panel.c:546: TI = 0;
                                   1573 ;	assignBit
      0004E7 10 99 02         [24] 1574 	jbc	_TI,00118$
      0004EA 80 FB            [24] 1575 	sjmp	00101$
      0004EC                       1576 00118$:
                                   1577 ;	fire_alarm_panel.c:547: }
      0004EC 22               [24] 1578 	ret
                                   1579 ;------------------------------------------------------------
                                   1580 ;Allocation info for local variables in function 'silence_alarms'
                                   1581 ;------------------------------------------------------------
                                   1582 ;	fire_alarm_panel.c:549: void silence_alarms(void)
                                   1583 ;	-----------------------------------------
                                   1584 ;	 function silence_alarms
                                   1585 ;	-----------------------------------------
      0004ED                       1586 _silence_alarms:
                                   1587 ;	fire_alarm_panel.c:551: SLC1 = 1;
                                   1588 ;	assignBit
      0004ED D2*02            [12] 1589 	setb	_SLC1
                                   1590 ;	fire_alarm_panel.c:552: SLC2 = 1;
                                   1591 ;	assignBit
      0004EF D2*03            [12] 1592 	setb	_SLC2
                                   1593 ;	fire_alarm_panel.c:553: LISO = 1;
                                   1594 ;	assignBit
      0004F1 D2*04            [12] 1595 	setb	_LISO
                                   1596 ;	fire_alarm_panel.c:554: BUZ = 0;
                                   1597 ;	assignBit
      0004F3 C2 95            [12] 1598 	clr	_BUZ
                                   1599 ;	fire_alarm_panel.c:555: HOT = 0;
                                   1600 ;	assignBit
      0004F5 C2 94            [12] 1601 	clr	_HOT
                                   1602 ;	fire_alarm_panel.c:556: }
      0004F7 22               [24] 1603 	ret
                                   1604 ;------------------------------------------------------------
                                   1605 ;Allocation info for local variables in function 'spliter'
                                   1606 ;------------------------------------------------------------
                                   1607 ;data          Allocated to registers r7 
                                   1608 ;------------------------------------------------------------
                                   1609 ;	fire_alarm_panel.c:558: void spliter(unsigned char data)
                                   1610 ;	-----------------------------------------
                                   1611 ;	 function spliter
                                   1612 ;	-----------------------------------------
      0004F8                       1613 _spliter:
      0004F8 AF 82            [24] 1614 	mov	r7, dpl
                                   1615 ;	fire_alarm_panel.c:560: L = data & 0x0F;
      0004FA 74 0F            [12] 1616 	mov	a,#0x0f
      0004FC 5F               [12] 1617 	anl	a,r7
      0004FD F5*03            [12] 1618 	mov	_L,a
                                   1619 ;	fire_alarm_panel.c:561: U = (data >> 4) & 0x0F;
      0004FF EF               [12] 1620 	mov	a,r7
      000500 C4               [12] 1621 	swap	a
      000501 54 0F            [12] 1622 	anl	a,#0x0f
      000503 F5*02            [12] 1623 	mov	_U,a
                                   1624 ;	fire_alarm_panel.c:562: }
      000505 22               [24] 1625 	ret
                                   1626 ;------------------------------------------------------------
                                   1627 ;Allocation info for local variables in function 'move'
                                   1628 ;------------------------------------------------------------
                                   1629 ;data          Allocated to registers r7 
                                   1630 ;------------------------------------------------------------
                                   1631 ;	fire_alarm_panel.c:564: void move(unsigned char data)
                                   1632 ;	-----------------------------------------
                                   1633 ;	 function move
                                   1634 ;	-----------------------------------------
      000506                       1635 _move:
      000506 AF 82            [24] 1636 	mov	r7, dpl
                                   1637 ;	fire_alarm_panel.c:566: P1 = (P1 & 0xF0) | data;
      000508 E5 90            [12] 1638 	mov	a,_P1
      00050A 54 F0            [12] 1639 	anl	a,#0xf0
      00050C 4F               [12] 1640 	orl	a,r7
      00050D F5 90            [12] 1641 	mov	_P1,a
                                   1642 ;	fire_alarm_panel.c:567: EN = 1;
                                   1643 ;	assignBit
      00050F D2 87            [12] 1644 	setb	_EN
                                   1645 ;	fire_alarm_panel.c:568: delay();
      000511 12r06r13         [24] 1646 	lcall	_delay
                                   1647 ;	fire_alarm_panel.c:569: EN = 0;
                                   1648 ;	assignBit
      000514 C2 87            [12] 1649 	clr	_EN
                                   1650 ;	fire_alarm_panel.c:570: delay();
                                   1651 ;	fire_alarm_panel.c:571: }
      000516 02r06r13         [24] 1652 	ljmp	_delay
                                   1653 ;------------------------------------------------------------
                                   1654 ;Allocation info for local variables in function 'move1'
                                   1655 ;------------------------------------------------------------
                                   1656 ;data          Allocated to registers r7 
                                   1657 ;------------------------------------------------------------
                                   1658 ;	fire_alarm_panel.c:573: void move1(unsigned char data)
                                   1659 ;	-----------------------------------------
                                   1660 ;	 function move1
                                   1661 ;	-----------------------------------------
      000519                       1662 _move1:
      000519 AF 82            [24] 1663 	mov	r7, dpl
                                   1664 ;	fire_alarm_panel.c:575: P1 = (P1 & 0xF0) | data;
      00051B E5 90            [12] 1665 	mov	a,_P1
      00051D 54 F0            [12] 1666 	anl	a,#0xf0
      00051F 4F               [12] 1667 	orl	a,r7
      000520 F5 90            [12] 1668 	mov	_P1,a
                                   1669 ;	fire_alarm_panel.c:576: EN = 1;
                                   1670 ;	assignBit
      000522 D2 87            [12] 1671 	setb	_EN
                                   1672 ;	fire_alarm_panel.c:580: __endasm;
      000524 00               [12] 1673 	nop
                                   1674 ;	fire_alarm_panel.c:581: EN = 0;
                                   1675 ;	assignBit
      000525 C2 87            [12] 1676 	clr	_EN
                                   1677 ;	fire_alarm_panel.c:591: __endasm;
      000527 00               [12] 1678 	nop
      000528 00               [12] 1679 	nop
      000529 00               [12] 1680 	nop
      00052A 00               [12] 1681 	nop
      00052B 00               [12] 1682 	nop
      00052C 00               [12] 1683 	nop
      00052D 00               [12] 1684 	nop
      00052E 00               [12] 1685 	nop
                                   1686 ;	fire_alarm_panel.c:592: EN = 1;
                                   1687 ;	assignBit
      00052F D2 87            [12] 1688 	setb	_EN
                                   1689 ;	fire_alarm_panel.c:593: }
      000531 22               [24] 1690 	ret
                                   1691 ;------------------------------------------------------------
                                   1692 ;Allocation info for local variables in function 'lcd_cmd'
                                   1693 ;------------------------------------------------------------
                                   1694 ;cmd_ptr       Allocated to registers r5 r6 r7 
                                   1695 ;cmd           Allocated to registers r3 
                                   1696 ;i             Allocated to registers r4 
                                   1697 ;------------------------------------------------------------
                                   1698 ;	fire_alarm_panel.c:595: void lcd_cmd(unsigned char *cmd_ptr)
                                   1699 ;	-----------------------------------------
                                   1700 ;	 function lcd_cmd
                                   1701 ;	-----------------------------------------
      000532                       1702 _lcd_cmd:
      000532 AD 82            [24] 1703 	mov	r5, dpl
      000534 AE 83            [24] 1704 	mov	r6, dph
      000536 AF F0            [24] 1705 	mov	r7, b
                                   1706 ;	fire_alarm_panel.c:600: while((cmd = cmd_ptr[i]) != 0) {
      000538 7C 00            [12] 1707 	mov	r4,#0x00
      00053A                       1708 00101$:
      00053A EC               [12] 1709 	mov	a,r4
      00053B 2D               [12] 1710 	add	a, r5
      00053C F9               [12] 1711 	mov	r1,a
      00053D E4               [12] 1712 	clr	a
      00053E 3E               [12] 1713 	addc	a, r6
      00053F FA               [12] 1714 	mov	r2,a
      000540 8F 03            [24] 1715 	mov	ar3,r7
      000542 89 82            [24] 1716 	mov	dpl,r1
      000544 8A 83            [24] 1717 	mov	dph,r2
      000546 8B F0            [24] 1718 	mov	b,r3
      000548 12r00r00         [24] 1719 	lcall	__gptrget
      00054B FB               [12] 1720 	mov	r3,a
      00054C 60 26            [24] 1721 	jz	00104$
                                   1722 ;	fire_alarm_panel.c:601: i++;
      00054E 0C               [12] 1723 	inc	r4
                                   1724 ;	fire_alarm_panel.c:602: RS = 0;
                                   1725 ;	assignBit
      00054F C2 86            [12] 1726 	clr	_RS
                                   1727 ;	fire_alarm_panel.c:603: spliter(cmd);
      000551 8B 82            [24] 1728 	mov	dpl, r3
      000553 C0 07            [24] 1729 	push	ar7
      000555 C0 06            [24] 1730 	push	ar6
      000557 C0 05            [24] 1731 	push	ar5
      000559 C0 04            [24] 1732 	push	ar4
      00055B 12r04rF8         [24] 1733 	lcall	_spliter
                                   1734 ;	fire_alarm_panel.c:604: move(U);
      00055E 85*02 82         [24] 1735 	mov	dpl, _U
      000561 12r05r06         [24] 1736 	lcall	_move
                                   1737 ;	fire_alarm_panel.c:605: move(L);
      000564 85*03 82         [24] 1738 	mov	dpl, _L
      000567 12r05r06         [24] 1739 	lcall	_move
      00056A D0 04            [24] 1740 	pop	ar4
      00056C D0 05            [24] 1741 	pop	ar5
      00056E D0 06            [24] 1742 	pop	ar6
      000570 D0 07            [24] 1743 	pop	ar7
      000572 80 C6            [24] 1744 	sjmp	00101$
      000574                       1745 00104$:
                                   1746 ;	fire_alarm_panel.c:607: }
      000574 22               [24] 1747 	ret
                                   1748 ;------------------------------------------------------------
                                   1749 ;Allocation info for local variables in function 'lcd_data'
                                   1750 ;------------------------------------------------------------
                                   1751 ;data          Allocated to registers 
                                   1752 ;------------------------------------------------------------
                                   1753 ;	fire_alarm_panel.c:609: void lcd_data(unsigned char data)
                                   1754 ;	-----------------------------------------
                                   1755 ;	 function lcd_data
                                   1756 ;	-----------------------------------------
      000575                       1757 _lcd_data:
                                   1758 ;	fire_alarm_panel.c:611: RS = 1;
                                   1759 ;	assignBit
      000575 D2 86            [12] 1760 	setb	_RS
                                   1761 ;	fire_alarm_panel.c:612: spliter(data);
      000577 12r04rF8         [24] 1762 	lcall	_spliter
                                   1763 ;	fire_alarm_panel.c:613: move1(U);
      00057A 85*02 82         [24] 1764 	mov	dpl, _U
      00057D 12r05r19         [24] 1765 	lcall	_move1
                                   1766 ;	fire_alarm_panel.c:614: move1(L);
      000580 85*03 82         [24] 1767 	mov	dpl, _L
                                   1768 ;	fire_alarm_panel.c:615: }
      000583 02r05r19         [24] 1769 	ljmp	_move1
                                   1770 ;------------------------------------------------------------
                                   1771 ;Allocation info for local variables in function 'lcd_disp'
                                   1772 ;------------------------------------------------------------
                                   1773 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1774 ;ch            Allocated to registers r3 
                                   1775 ;i             Allocated to registers r4 
                                   1776 ;------------------------------------------------------------
                                   1777 ;	fire_alarm_panel.c:617: void lcd_disp(unsigned char *text_ptr)
                                   1778 ;	-----------------------------------------
                                   1779 ;	 function lcd_disp
                                   1780 ;	-----------------------------------------
      000586                       1781 _lcd_disp:
      000586 AD 82            [24] 1782 	mov	r5, dpl
      000588 AE 83            [24] 1783 	mov	r6, dph
      00058A AF F0            [24] 1784 	mov	r7, b
                                   1785 ;	fire_alarm_panel.c:622: while((ch = text_ptr[i]) != 0) {
      00058C 7C 00            [12] 1786 	mov	r4,#0x00
      00058E                       1787 00101$:
      00058E EC               [12] 1788 	mov	a,r4
      00058F 2D               [12] 1789 	add	a, r5
      000590 F9               [12] 1790 	mov	r1,a
      000591 E4               [12] 1791 	clr	a
      000592 3E               [12] 1792 	addc	a, r6
      000593 FA               [12] 1793 	mov	r2,a
      000594 8F 03            [24] 1794 	mov	ar3,r7
      000596 89 82            [24] 1795 	mov	dpl,r1
      000598 8A 83            [24] 1796 	mov	dph,r2
      00059A 8B F0            [24] 1797 	mov	b,r3
      00059C 12r00r00         [24] 1798 	lcall	__gptrget
      00059F FB               [12] 1799 	mov	r3,a
      0005A0 60 18            [24] 1800 	jz	00104$
                                   1801 ;	fire_alarm_panel.c:623: i++;
      0005A2 0C               [12] 1802 	inc	r4
                                   1803 ;	fire_alarm_panel.c:624: lcd_data(ch);
      0005A3 8B 82            [24] 1804 	mov	dpl, r3
      0005A5 C0 07            [24] 1805 	push	ar7
      0005A7 C0 06            [24] 1806 	push	ar6
      0005A9 C0 05            [24] 1807 	push	ar5
      0005AB C0 04            [24] 1808 	push	ar4
      0005AD 12r05r75         [24] 1809 	lcall	_lcd_data
      0005B0 D0 04            [24] 1810 	pop	ar4
      0005B2 D0 05            [24] 1811 	pop	ar5
      0005B4 D0 06            [24] 1812 	pop	ar6
      0005B6 D0 07            [24] 1813 	pop	ar7
      0005B8 80 D4            [24] 1814 	sjmp	00101$
      0005BA                       1815 00104$:
                                   1816 ;	fire_alarm_panel.c:626: }
      0005BA 22               [24] 1817 	ret
                                   1818 ;------------------------------------------------------------
                                   1819 ;Allocation info for local variables in function 'lcd_disp1'
                                   1820 ;------------------------------------------------------------
                                   1821 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1822 ;ch            Allocated to registers r3 
                                   1823 ;i             Allocated to registers r4 
                                   1824 ;------------------------------------------------------------
                                   1825 ;	fire_alarm_panel.c:628: void lcd_disp1(unsigned char *text_ptr)
                                   1826 ;	-----------------------------------------
                                   1827 ;	 function lcd_disp1
                                   1828 ;	-----------------------------------------
      0005BB                       1829 _lcd_disp1:
      0005BB AD 82            [24] 1830 	mov	r5, dpl
      0005BD AE 83            [24] 1831 	mov	r6, dph
      0005BF AF F0            [24] 1832 	mov	r7, b
                                   1833 ;	fire_alarm_panel.c:633: while((ch = text_ptr[i]) != 0) {
      0005C1 7C 00            [12] 1834 	mov	r4,#0x00
      0005C3                       1835 00101$:
      0005C3 EC               [12] 1836 	mov	a,r4
      0005C4 2D               [12] 1837 	add	a, r5
      0005C5 F9               [12] 1838 	mov	r1,a
      0005C6 E4               [12] 1839 	clr	a
      0005C7 3E               [12] 1840 	addc	a, r6
      0005C8 FA               [12] 1841 	mov	r2,a
      0005C9 8F 03            [24] 1842 	mov	ar3,r7
      0005CB 89 82            [24] 1843 	mov	dpl,r1
      0005CD 8A 83            [24] 1844 	mov	dph,r2
      0005CF 8B F0            [24] 1845 	mov	b,r3
      0005D1 12r00r00         [24] 1846 	lcall	__gptrget
      0005D4 FB               [12] 1847 	mov	r3,a
      0005D5 60 1B            [24] 1848 	jz	00104$
                                   1849 ;	fire_alarm_panel.c:634: i++;
      0005D7 0C               [12] 1850 	inc	r4
                                   1851 ;	fire_alarm_panel.c:635: lcd_data(ch);
      0005D8 8B 82            [24] 1852 	mov	dpl, r3
      0005DA C0 07            [24] 1853 	push	ar7
      0005DC C0 06            [24] 1854 	push	ar6
      0005DE C0 05            [24] 1855 	push	ar5
      0005E0 C0 04            [24] 1856 	push	ar4
      0005E2 12r05r75         [24] 1857 	lcall	_lcd_data
                                   1858 ;	fire_alarm_panel.c:636: delay2();
      0005E5 12r05rF3         [24] 1859 	lcall	_delay2
      0005E8 D0 04            [24] 1860 	pop	ar4
      0005EA D0 05            [24] 1861 	pop	ar5
      0005EC D0 06            [24] 1862 	pop	ar6
      0005EE D0 07            [24] 1863 	pop	ar7
      0005F0 80 D1            [24] 1864 	sjmp	00101$
      0005F2                       1865 00104$:
                                   1866 ;	fire_alarm_panel.c:638: }
      0005F2 22               [24] 1867 	ret
                                   1868 ;------------------------------------------------------------
                                   1869 ;Allocation info for local variables in function 'delay2'
                                   1870 ;------------------------------------------------------------
                                   1871 ;R5            Allocated to registers r7 
                                   1872 ;R6            Allocated to registers r5 
                                   1873 ;R7            Allocated to registers r6 
                                   1874 ;------------------------------------------------------------
                                   1875 ;	fire_alarm_panel.c:640: void delay2(void)
                                   1876 ;	-----------------------------------------
                                   1877 ;	 function delay2
                                   1878 ;	-----------------------------------------
      0005F3                       1879 _delay2:
                                   1880 ;	fire_alarm_panel.c:644: for(R5 = 1; R5 > 0; R5--) {
      0005F3 7F 01            [12] 1881 	mov	r7,#0x01
                                   1882 ;	fire_alarm_panel.c:645: for(R7 = 255; R7 > 0; R7--) {
      0005F5                       1883 00121$:
      0005F5 7E FF            [12] 1884 	mov	r6,#0xff
                                   1885 ;	fire_alarm_panel.c:646: for(R6 = 255; R6 > 0; R6--);
      0005F7                       1886 00119$:
      0005F7 7D FF            [12] 1887 	mov	r5,#0xff
      0005F9                       1888 00105$:
      0005F9 DD FE            [24] 1889 	djnz	r5,00105$
                                   1890 ;	fire_alarm_panel.c:645: for(R7 = 255; R7 > 0; R7--) {
      0005FB DE FA            [24] 1891 	djnz	r6,00119$
                                   1892 ;	fire_alarm_panel.c:644: for(R5 = 1; R5 > 0; R5--) {
      0005FD DF F6            [24] 1893 	djnz	r7,00121$
                                   1894 ;	fire_alarm_panel.c:649: }
      0005FF 22               [24] 1895 	ret
                                   1896 ;------------------------------------------------------------
                                   1897 ;Allocation info for local variables in function 'delay1'
                                   1898 ;------------------------------------------------------------
                                   1899 ;R5            Allocated to registers r7 
                                   1900 ;R6            Allocated to registers r5 
                                   1901 ;R7            Allocated to registers r6 
                                   1902 ;------------------------------------------------------------
                                   1903 ;	fire_alarm_panel.c:651: void delay1(void)
                                   1904 ;	-----------------------------------------
                                   1905 ;	 function delay1
                                   1906 ;	-----------------------------------------
      000600                       1907 _delay1:
                                   1908 ;	fire_alarm_panel.c:655: for(R5 = 8; R5 > 0; R5--) {
      000600 7F 08            [12] 1909 	mov	r7,#0x08
                                   1910 ;	fire_alarm_panel.c:656: for(R7 = 255; R7 > 0; R7--) {
      000602                       1911 00123$:
      000602 7E FF            [12] 1912 	mov	r6,#0xff
                                   1913 ;	fire_alarm_panel.c:657: for(R6 = 255; R6 > 0; R6--);
      000604                       1914 00121$:
      000604 7D FF            [12] 1915 	mov	r5,#0xff
      000606                       1916 00107$:
      000606 DD FE            [24] 1917 	djnz	r5,00107$
                                   1918 ;	fire_alarm_panel.c:656: for(R7 = 255; R7 > 0; R7--) {
      000608 DE FA            [24] 1919 	djnz	r6,00121$
                                   1920 ;	fire_alarm_panel.c:655: for(R5 = 8; R5 > 0; R5--) {
      00060A DF F6            [24] 1921 	djnz	r7,00123$
                                   1922 ;	fire_alarm_panel.c:661: if(RI) {
      00060C 30 98 03         [24] 1923 	jnb	_RI,00112$
                                   1924 ;	fire_alarm_panel.c:662: receive();
                                   1925 ;	fire_alarm_panel.c:664: }
      00060F 02r04r4F         [24] 1926 	ljmp	_receive
      000612                       1927 00112$:
      000612 22               [24] 1928 	ret
                                   1929 ;------------------------------------------------------------
                                   1930 ;Allocation info for local variables in function 'delay'
                                   1931 ;------------------------------------------------------------
                                   1932 ;R6            Allocated to registers r6 
                                   1933 ;R7            Allocated to registers r7 
                                   1934 ;------------------------------------------------------------
                                   1935 ;	fire_alarm_panel.c:666: void delay(void)
                                   1936 ;	-----------------------------------------
                                   1937 ;	 function delay
                                   1938 ;	-----------------------------------------
      000613                       1939 _delay:
                                   1940 ;	fire_alarm_panel.c:670: for(R7 = 7; R7 > 0; R7--) {
      000613 7F 07            [12] 1941 	mov	r7,#0x07
                                   1942 ;	fire_alarm_panel.c:671: for(R6 = 15; R6 > 0; R6--);
      000615                       1943 00114$:
      000615 7E 0F            [12] 1944 	mov	r6,#0x0f
      000617                       1945 00104$:
      000617 DE FE            [24] 1946 	djnz	r6,00104$
                                   1947 ;	fire_alarm_panel.c:670: for(R7 = 7; R7 > 0; R7--) {
      000619 DF FA            [24] 1948 	djnz	r7,00114$
                                   1949 ;	fire_alarm_panel.c:673: } 
      00061B 22               [24] 1950 	ret
                                   1951 	.area CSEG    (CODE)
                                   1952 	.area CONST   (CODE)
                                   1953 	.area CONST   (CODE)
      000000                       1954 _INIT_COMMANDS:
      000000 20                    1955 	.db #0x20	; 32
      000001 28                    1956 	.db #0x28	; 40
      000002 0C                    1957 	.db #0x0c	; 12
      000003 01                    1958 	.db #0x01	; 1
      000004 06                    1959 	.db #0x06	; 6
      000005 80                    1960 	.db #0x80	; 128
      000006 00                    1961 	.db #0x00	; 0
                                   1962 	.area CSEG    (CODE)
                                   1963 	.area CONST   (CODE)
      000007                       1964 _LINE1:
      000007 01                    1965 	.db #0x01	; 1
      000008 06                    1966 	.db #0x06	; 6
      000009 80                    1967 	.db #0x80	; 128
      00000A 00                    1968 	.db #0x00	; 0
                                   1969 	.area CSEG    (CODE)
                                   1970 	.area CONST   (CODE)
      00000B                       1971 _LINE2:
      00000B C0                    1972 	.db #0xc0	; 192
      00000C 00                    1973 	.db #0x00	; 0
                                   1974 	.area CSEG    (CODE)
                                   1975 	.area CONST   (CODE)
      00000D                       1976 _TEXT1:
      00000D 20 41 47 4E 49 20 50  1977 	.ascii " AGNI PROTECTION"
             52 4F 54 45 43 54 49
             4F 4E
      00001D 00                    1978 	.db 0x00
                                   1979 	.area CSEG    (CODE)
                                   1980 	.area CONST   (CODE)
      00001E                       1981 _TEXT2:
      00001E 20 57 45 4C 43 4F 4D  1982 	.ascii " WELCOME TO ...."
             45 20 54 4F 20 2E 2E
             2E 2E
      00002E 00                    1983 	.db 0x00
                                   1984 	.area CSEG    (CODE)
                                   1985 	.area CONST   (CODE)
      00002F                       1986 _TEXT3:
      00002F 46 49 52 45 20 41 4C  1987 	.ascii "FIRE ALARM PANEL"
             41 52 4D 20 50 41 4E
             45 4C
      00003F 00                    1988 	.db 0x00
                                   1989 	.area CSEG    (CODE)
                                   1990 	.area CONST   (CODE)
      000040                       1991 _TZONE1:
      000040 20 5A 4F 4E 45 20 2D  1992 	.ascii " ZONE - 01      "
             20 30 31 20 20 20 20
             20 20
      000050 00                    1993 	.db 0x00
                                   1994 	.area CSEG    (CODE)
                                   1995 	.area CONST   (CODE)
      000051                       1996 _TZONE2:
      000051 20 5A 4F 4E 45 20 2D  1997 	.ascii " ZONE - 02      "
             20 30 32 20 20 20 20
             20 20
      000061 00                    1998 	.db 0x00
                                   1999 	.area CSEG    (CODE)
                                   2000 	.area CONST   (CODE)
      000062                       2001 _FIRE:
      000062 20 46 49 52 45 20 44  2002 	.ascii " FIRE DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000072 00                    2003 	.db 0x00
                                   2004 	.area CSEG    (CODE)
                                   2005 	.area CONST   (CODE)
      000073                       2006 _SHORT:
      000073 20 53 48 4F 52 54 20  2007 	.ascii " SHORT DETECTED "
             44 45 54 45 43 54 45
             44 20
      000083 00                    2008 	.db 0x00
                                   2009 	.area CSEG    (CODE)
                                   2010 	.area CONST   (CODE)
      000084                       2011 _OPEN:
      000084 20 4F 50 45 4E 20 44  2012 	.ascii " OPEN DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000094 00                    2013 	.db 0x00
                                   2014 	.area CSEG    (CODE)
                                   2015 	.area CONST   (CODE)
      000095                       2016 _TEXT4:
      000095 20 41 4C 4C 20 54 48  2017 	.ascii " ALL THE AREA   "
             45 20 41 52 45 41 20
             20 20
      0000A5 00                    2018 	.db 0x00
                                   2019 	.area CSEG    (CODE)
                                   2020 	.area CONST   (CODE)
      0000A6                       2021 _TLAMP:
      0000A6 50 41 4E 45 4C 20 54  2022 	.ascii "PANEL TESTING ON"
             45 53 54 49 4E 47 20
             4F 4E
      0000B6 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      0000B7                       2026 _TEVQ:
      0000B7 20 50 4C 45 41 53 45  2027 	.ascii " PLEASE EVACUATE"
             20 45 56 41 43 55 41
             54 45
      0000C7 00                    2028 	.db 0x00
                                   2029 	.area CSEG    (CODE)
                                   2030 	.area CONST   (CODE)
      0000C8                       2031 _ISO1:
      0000C8 5A 4F 4E 45 2D 20 30  2032 	.ascii "ZONE- 01 ISOLATE"
             31 20 49 53 4F 4C 41
             54 45
      0000D8 00                    2033 	.db 0x00
                                   2034 	.area CSEG    (CODE)
                                   2035 	.area CONST   (CODE)
      0000D9                       2036 _ISO2:
      0000D9 5A 4F 4E 45 2D 20 30  2037 	.ascii "ZONE- 02 ISOLATE"
             32 20 49 53 4F 4C 41
             54 45
      0000E9 00                    2038 	.db 0x00
                                   2039 	.area CSEG    (CODE)
                                   2040 	.area CONST   (CODE)
      0000EA                       2041 _ISO1H:
      0000EA 5A 4F 4E 45 2D 20 30  2042 	.ascii "ZONE- 01 HEALTHY"
             31 20 48 45 41 4C 54
             48 59
      0000FA 00                    2043 	.db 0x00
                                   2044 	.area CSEG    (CODE)
                                   2045 	.area CONST   (CODE)
      0000FB                       2046 _ISO2H:
      0000FB 5A 4F 4E 45 2D 20 30  2047 	.ascii "ZONE- 02 HEALTHY"
             32 20 48 45 41 4C 54
             48 59
      00010B 00                    2048 	.db 0x00
                                   2049 	.area CSEG    (CODE)
                                   2050 	.area CONST   (CODE)
      00010C                       2051 _LOWB:
      00010C 20 20 42 41 54 54 45  2052 	.ascii "  BATTERY LOW   "
             52 59 20 4C 4F 57 20
             20 20
      00011C 00                    2053 	.db 0x00
                                   2054 	.area CSEG    (CODE)
                                   2055 	.area CONST   (CODE)
      00011D                       2056 _LOWM:
      00011D 20 43 48 45 43 4B 20  2057 	.ascii " CHECK AC SUPPLY"
             41 43 20 53 55 50 50
             4C 59
      00012D 00                    2058 	.db 0x00
                                   2059 	.area CSEG    (CODE)
                                   2060 	.area XINIT   (CODE)
                                   2061 	.area CABS    (ABS,CODE)
