                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module fire_alarm_panel
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LOWM
                                     12 	.globl _LOWB
                                     13 	.globl _ISO2H
                                     14 	.globl _ISO1H
                                     15 	.globl _ISO2
                                     16 	.globl _ISO1
                                     17 	.globl _TEVQ
                                     18 	.globl _TLAMP
                                     19 	.globl _TEXT4
                                     20 	.globl _OPEN
                                     21 	.globl _SHORT
                                     22 	.globl _FIRE
                                     23 	.globl _TZONE2
                                     24 	.globl _TZONE1
                                     25 	.globl _TEXT3
                                     26 	.globl _TEXT2
                                     27 	.globl _TEXT1
                                     28 	.globl _LINE2
                                     29 	.globl _LINE1
                                     30 	.globl _INIT_COMMANDS
                                     31 	.globl _main
                                     32 	.globl _SHORT2
                                     33 	.globl _OPEN2
                                     34 	.globl _FIRE2
                                     35 	.globl _SHORT1
                                     36 	.globl _OPEN1
                                     37 	.globl _FIRE1
                                     38 	.globl _CFTLR
                                     39 	.globl _CFLR
                                     40 	.globl _BUZ
                                     41 	.globl _HOT
                                     42 	.globl _EN
                                     43 	.globl _RS
                                     44 	.globl _EVQ
                                     45 	.globl _SIL
                                     46 	.globl _LAMP
                                     47 	.globl _LB
                                     48 	.globl _BL
                                     49 	.globl _ZONE2
                                     50 	.globl _ZONE1
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _TH2
                                    145 	.globl _TL2
                                    146 	.globl _RCAP2H
                                    147 	.globl _RCAP2L
                                    148 	.globl _T2CON
                                    149 	.globl _B
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _PR2
                                    171 	.globl _PR1
                                    172 	.globl _LISO
                                    173 	.globl _SLC2
                                    174 	.globl _SLC1
                                    175 	.globl _Z2
                                    176 	.globl _Z1
                                    177 	.globl _set_indicators_PARM_4
                                    178 	.globl _set_indicators_PARM_3
                                    179 	.globl _set_indicators_PARM_2
                                    180 	.globl _L
                                    181 	.globl _U
                                    182 	.globl _BUZZER_COUNTER
                                    183 	.globl _P1_INDICATORS
                                    184 	.globl _RAP
                                    185 	.globl _BL_TIMER
                                    186 	.globl _BLT1
                                    187 	.globl _init_system
                                    188 	.globl _prz1
                                    189 	.globl _prz2
                                    190 	.globl _receive
                                    191 	.globl _send_data
                                    192 	.globl _silence_alarms
                                    193 	.globl _spliter
                                    194 	.globl _move
                                    195 	.globl _move1
                                    196 	.globl _lcd_cmd
                                    197 	.globl _lcd_data
                                    198 	.globl _lcd_disp
                                    199 	.globl _lcd_disp1
                                    200 	.globl _delay2
                                    201 	.globl _delay1
                                    202 	.globl _delay
                                    203 	.globl _set_indicators
                                    204 	.globl _update_indicators
                                    205 ;--------------------------------------------------------
                                    206 ; special function registers
                                    207 ;--------------------------------------------------------
                                    208 	.area RSEG    (ABS,DATA)
      000000                        209 	.org 0x0000
                           000080   210 _P0	=	0x0080
                           000081   211 _SP	=	0x0081
                           000082   212 _DPL	=	0x0082
                           000083   213 _DPH	=	0x0083
                           000087   214 _PCON	=	0x0087
                           000088   215 _TCON	=	0x0088
                           000089   216 _TMOD	=	0x0089
                           00008A   217 _TL0	=	0x008a
                           00008B   218 _TL1	=	0x008b
                           00008C   219 _TH0	=	0x008c
                           00008D   220 _TH1	=	0x008d
                           000090   221 _P1	=	0x0090
                           000098   222 _SCON	=	0x0098
                           000099   223 _SBUF	=	0x0099
                           0000A0   224 _P2	=	0x00a0
                           0000A8   225 _IE	=	0x00a8
                           0000B0   226 _P3	=	0x00b0
                           0000B8   227 _IP	=	0x00b8
                           0000D0   228 _PSW	=	0x00d0
                           0000E0   229 _ACC	=	0x00e0
                           0000F0   230 _B	=	0x00f0
                           0000C8   231 _T2CON	=	0x00c8
                           0000CA   232 _RCAP2L	=	0x00ca
                           0000CB   233 _RCAP2H	=	0x00cb
                           0000CC   234 _TL2	=	0x00cc
                           0000CD   235 _TH2	=	0x00cd
                                    236 ;--------------------------------------------------------
                                    237 ; special function bits
                                    238 ;--------------------------------------------------------
                                    239 	.area RSEG    (ABS,DATA)
      000000                        240 	.org 0x0000
                           000080   241 _P0_0	=	0x0080
                           000081   242 _P0_1	=	0x0081
                           000082   243 _P0_2	=	0x0082
                           000083   244 _P0_3	=	0x0083
                           000084   245 _P0_4	=	0x0084
                           000085   246 _P0_5	=	0x0085
                           000086   247 _P0_6	=	0x0086
                           000087   248 _P0_7	=	0x0087
                           000088   249 _IT0	=	0x0088
                           000089   250 _IE0	=	0x0089
                           00008A   251 _IT1	=	0x008a
                           00008B   252 _IE1	=	0x008b
                           00008C   253 _TR0	=	0x008c
                           00008D   254 _TF0	=	0x008d
                           00008E   255 _TR1	=	0x008e
                           00008F   256 _TF1	=	0x008f
                           000090   257 _P1_0	=	0x0090
                           000091   258 _P1_1	=	0x0091
                           000092   259 _P1_2	=	0x0092
                           000093   260 _P1_3	=	0x0093
                           000094   261 _P1_4	=	0x0094
                           000095   262 _P1_5	=	0x0095
                           000096   263 _P1_6	=	0x0096
                           000097   264 _P1_7	=	0x0097
                           000098   265 _RI	=	0x0098
                           000099   266 _TI	=	0x0099
                           00009A   267 _RB8	=	0x009a
                           00009B   268 _TB8	=	0x009b
                           00009C   269 _REN	=	0x009c
                           00009D   270 _SM2	=	0x009d
                           00009E   271 _SM1	=	0x009e
                           00009F   272 _SM0	=	0x009f
                           0000A0   273 _P2_0	=	0x00a0
                           0000A1   274 _P2_1	=	0x00a1
                           0000A2   275 _P2_2	=	0x00a2
                           0000A3   276 _P2_3	=	0x00a3
                           0000A4   277 _P2_4	=	0x00a4
                           0000A5   278 _P2_5	=	0x00a5
                           0000A6   279 _P2_6	=	0x00a6
                           0000A7   280 _P2_7	=	0x00a7
                           0000A8   281 _EX0	=	0x00a8
                           0000A9   282 _ET0	=	0x00a9
                           0000AA   283 _EX1	=	0x00aa
                           0000AB   284 _ET1	=	0x00ab
                           0000AC   285 _ES	=	0x00ac
                           0000AF   286 _EA	=	0x00af
                           0000B0   287 _P3_0	=	0x00b0
                           0000B1   288 _P3_1	=	0x00b1
                           0000B2   289 _P3_2	=	0x00b2
                           0000B3   290 _P3_3	=	0x00b3
                           0000B4   291 _P3_4	=	0x00b4
                           0000B5   292 _P3_5	=	0x00b5
                           0000B6   293 _P3_6	=	0x00b6
                           0000B7   294 _P3_7	=	0x00b7
                           0000B0   295 _RXD	=	0x00b0
                           0000B1   296 _TXD	=	0x00b1
                           0000B2   297 _INT0	=	0x00b2
                           0000B3   298 _INT1	=	0x00b3
                           0000B4   299 _T0	=	0x00b4
                           0000B5   300 _T1	=	0x00b5
                           0000B6   301 _WR	=	0x00b6
                           0000B7   302 _RD	=	0x00b7
                           0000B8   303 _PX0	=	0x00b8
                           0000B9   304 _PT0	=	0x00b9
                           0000BA   305 _PX1	=	0x00ba
                           0000BB   306 _PT1	=	0x00bb
                           0000BC   307 _PS	=	0x00bc
                           0000D0   308 _P	=	0x00d0
                           0000D1   309 _F1	=	0x00d1
                           0000D2   310 _OV	=	0x00d2
                           0000D3   311 _RS0	=	0x00d3
                           0000D4   312 _RS1	=	0x00d4
                           0000D5   313 _F0	=	0x00d5
                           0000D6   314 _AC	=	0x00d6
                           0000D7   315 _CY	=	0x00d7
                           0000AD   316 _ET2	=	0x00ad
                           0000BD   317 _PT2	=	0x00bd
                           0000C8   318 _T2CON_0	=	0x00c8
                           0000C9   319 _T2CON_1	=	0x00c9
                           0000CA   320 _T2CON_2	=	0x00ca
                           0000CB   321 _T2CON_3	=	0x00cb
                           0000CC   322 _T2CON_4	=	0x00cc
                           0000CD   323 _T2CON_5	=	0x00cd
                           0000CE   324 _T2CON_6	=	0x00ce
                           0000CF   325 _T2CON_7	=	0x00cf
                           0000C8   326 _CP_RL2	=	0x00c8
                           0000C9   327 _C_T2	=	0x00c9
                           0000CA   328 _TR2	=	0x00ca
                           0000CB   329 _EXEN2	=	0x00cb
                           0000CC   330 _TCLK	=	0x00cc
                           0000CD   331 _RCLK	=	0x00cd
                           0000CE   332 _EXF2	=	0x00ce
                           0000CF   333 _TF2	=	0x00cf
                           0000A4   334 _ZONE1	=	0x00a4
                           0000A5   335 _ZONE2	=	0x00a5
                           0000A7   336 _BL	=	0x00a7
                           0000A2   337 _LB	=	0x00a2
                           0000A6   338 _LAMP	=	0x00a6
                           0000A0   339 _SIL	=	0x00a0
                           0000A1   340 _EVQ	=	0x00a1
                           000086   341 _RS	=	0x0086
                           000087   342 _EN	=	0x0087
                           000094   343 _HOT	=	0x0094
                           000095   344 _BUZ	=	0x0095
                           000096   345 _CFLR	=	0x0096
                           000097   346 _CFTLR	=	0x0097
                           000080   347 _FIRE1	=	0x0080
                           000081   348 _OPEN1	=	0x0081
                           000082   349 _SHORT1	=	0x0082
                           000083   350 _FIRE2	=	0x0083
                           000084   351 _OPEN2	=	0x0084
                           000085   352 _SHORT2	=	0x0085
                                    353 ;--------------------------------------------------------
                                    354 ; overlayable register banks
                                    355 ;--------------------------------------------------------
                                    356 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        357 	.ds 8
                                    358 ;--------------------------------------------------------
                                    359 ; internal ram data
                                    360 ;--------------------------------------------------------
                                    361 	.area DSEG    (DATA)
      000000                        362 _BLT1::
      000000                        363 	.ds 1
      000001                        364 _BL_TIMER::
      000001                        365 	.ds 2
      000003                        366 _RAP::
      000003                        367 	.ds 1
      000004                        368 _P1_INDICATORS::
      000004                        369 	.ds 1
      000005                        370 _BUZZER_COUNTER::
      000005                        371 	.ds 1
      000006                        372 _U::
      000006                        373 	.ds 1
      000007                        374 _L::
      000007                        375 	.ds 1
      000008                        376 _set_indicators_PARM_2:
      000008                        377 	.ds 1
      000009                        378 _set_indicators_PARM_3:
      000009                        379 	.ds 1
      00000A                        380 _set_indicators_PARM_4:
      00000A                        381 	.ds 1
                                    382 ;--------------------------------------------------------
                                    383 ; overlayable items in internal ram
                                    384 ;--------------------------------------------------------
                                    385 	.area	OSEG    (OVR,DATA)
                                    386 	.area	OSEG    (OVR,DATA)
                                    387 	.area	OSEG    (OVR,DATA)
                                    388 	.area	OSEG    (OVR,DATA)
                                    389 	.area	OSEG    (OVR,DATA)
                                    390 ;--------------------------------------------------------
                                    391 ; Stack segment in internal ram
                                    392 ;--------------------------------------------------------
                                    393 	.area SSEG
      000000                        394 __start__stack:
      000000                        395 	.ds	1
                                    396 
                                    397 ;--------------------------------------------------------
                                    398 ; indirectly addressable internal ram data
                                    399 ;--------------------------------------------------------
                                    400 	.area ISEG    (DATA)
                                    401 ;--------------------------------------------------------
                                    402 ; absolute internal ram data
                                    403 ;--------------------------------------------------------
                                    404 	.area IABS    (ABS,DATA)
                                    405 	.area IABS    (ABS,DATA)
                                    406 ;--------------------------------------------------------
                                    407 ; bit data
                                    408 ;--------------------------------------------------------
                                    409 	.area BSEG    (BIT)
      000000                        410 _Z1::
      000000                        411 	.ds 1
      000001                        412 _Z2::
      000001                        413 	.ds 1
      000002                        414 _SLC1::
      000002                        415 	.ds 1
      000003                        416 _SLC2::
      000003                        417 	.ds 1
      000004                        418 _LISO::
      000004                        419 	.ds 1
      000005                        420 _PR1::
      000005                        421 	.ds 1
      000006                        422 _PR2::
      000006                        423 	.ds 1
                                    424 ;--------------------------------------------------------
                                    425 ; paged external ram data
                                    426 ;--------------------------------------------------------
                                    427 	.area PSEG    (PAG,XDATA)
                                    428 ;--------------------------------------------------------
                                    429 ; uninitialized external ram data
                                    430 ;--------------------------------------------------------
                                    431 	.area XSEG    (XDATA)
                                    432 ;--------------------------------------------------------
                                    433 ; absolute external ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area XABS    (ABS,XDATA)
                                    436 ;--------------------------------------------------------
                                    437 ; initialized external ram data
                                    438 ;--------------------------------------------------------
                                    439 	.area XISEG   (XDATA)
                                    440 	.area HOME    (CODE)
                                    441 	.area GSINIT0 (CODE)
                                    442 	.area GSINIT1 (CODE)
                                    443 	.area GSINIT2 (CODE)
                                    444 	.area GSINIT3 (CODE)
                                    445 	.area GSINIT4 (CODE)
                                    446 	.area GSINIT5 (CODE)
                                    447 	.area GSINIT  (CODE)
                                    448 	.area GSFINAL (CODE)
                                    449 	.area CSEG    (CODE)
                                    450 ;--------------------------------------------------------
                                    451 ; interrupt vector
                                    452 ;--------------------------------------------------------
                                    453 	.area HOME    (CODE)
      000000                        454 __interrupt_vect:
      000000 02r00r00         [24]  455 	ljmp	__sdcc_gsinit_startup
                                    456 ; restartable atomic support routines
      000003                        457 	.ds	5
      000008                        458 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  459 	nop
      000009 00               [12]  460 	nop
      00000A                        461 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  462 	movx	a, @r0
      00000B FB               [12]  463 	mov	r3, a
      00000C EA               [12]  464 	mov	a, r2
      00000D F2               [24]  465 	movx	@r0, a
      00000E 80 2C            [24]  466 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  467 	nop
      000011 00               [12]  468 	nop
      000012                        469 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  470 	movx	a, @dptr
      000013 FB               [12]  471 	mov	r3, a
      000014 EA               [12]  472 	mov	a, r2
      000015 F0               [24]  473 	movx	@dptr, a
      000016 80 24            [24]  474 	sjmp	sdcc_atomic_exchange_exit
      000018                        475 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  476 	mov	a, @r0
      000019 B5 02 02         [24]  477 	cjne	a, ar2, .+#5
      00001C EB               [12]  478 	mov	a, r3
      00001D F6               [12]  479 	mov	@r0, a
      00001E 22               [24]  480 	ret
      00001F 00               [12]  481 	nop
      000020                        482 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  483 	movx	a, @r0
      000021 B5 02 02         [24]  484 	cjne	a, ar2, .+#5
      000024 EB               [12]  485 	mov	a, r3
      000025 F2               [24]  486 	movx	@r0, a
      000026 22               [24]  487 	ret
      000027 00               [12]  488 	nop
      000028                        489 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  490 	movx	a, @dptr
      000029 B5 02 02         [24]  491 	cjne	a, ar2, .+#5
      00002C EB               [12]  492 	mov	a, r3
      00002D F0               [24]  493 	movx	@dptr, a
      00002E 22               [24]  494 	ret
      00002F                        495 sdcc_atomic_exchange_rollback_end::
                                    496 
      00002F                        497 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  498 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  499 	mov	r0, dpl
      000034 20 F5 D3         [24]  500 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        501 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  502 	mov	a, r2
      000038 C6               [12]  503 	xch	a, @r0
      000039 F5 82            [12]  504 	mov	dpl, a
      00003B 22               [24]  505 	ret
      00003C                        506 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  507 	mov	dpl, r3
      00003E 22               [24]  508 	ret
      00003F                        509 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  510 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  511 	mov	r0, dpl
      000044 20 F5 D9         [24]  512 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  513 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    514 ;--------------------------------------------------------
                                    515 ; global & static initialisations
                                    516 ;--------------------------------------------------------
                                    517 	.area HOME    (CODE)
                                    518 	.area GSINIT  (CODE)
                                    519 	.area GSFINAL (CODE)
                                    520 	.area GSINIT  (CODE)
                                    521 	.globl __sdcc_gsinit_startup
                                    522 	.globl __sdcc_program_startup
                                    523 	.globl __start__stack
                                    524 	.globl __mcs51_genXINIT
                                    525 	.globl __mcs51_genXRAMCLEAR
                                    526 	.globl __mcs51_genRAMCLEAR
                                    527 ;	fire_alarm_panel.c:28: __bit Z1 = 0;          // ISO Zone 1
                                    528 ;	assignBit
      000000 C2*00            [12]  529 	clr	_Z1
                                    530 ;	fire_alarm_panel.c:29: __bit Z2 = 0;          // ISO Zone 2
                                    531 ;	assignBit
      000002 C2*01            [12]  532 	clr	_Z2
                                    533 ;	fire_alarm_panel.c:30: __bit SLC1 = 0;        // Silence Zone 1
                                    534 ;	assignBit
      000004 C2*02            [12]  535 	clr	_SLC1
                                    536 ;	fire_alarm_panel.c:31: __bit SLC2 = 0;        // Silence Zone 2
                                    537 ;	assignBit
      000006 C2*03            [12]  538 	clr	_SLC2
                                    539 ;	fire_alarm_panel.c:32: __bit LISO = 0;        // Low battery silence
                                    540 ;	assignBit
      000008 C2*04            [12]  541 	clr	_LISO
                                    542 ;	fire_alarm_panel.c:33: __bit PR1 = 0;         // Zone 1 Problem
                                    543 ;	assignBit
      00000A C2*05            [12]  544 	clr	_PR1
                                    545 ;	fire_alarm_panel.c:34: __bit PR2 = 0;         // Zone 2 Problem
                                    546 ;	assignBit
      00000C C2*06            [12]  547 	clr	_PR2
                                    548 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  549 	ljmp	__sdcc_program_startup
                                    550 ;--------------------------------------------------------
                                    551 ; Home
                                    552 ;--------------------------------------------------------
                                    553 	.area HOME    (CODE)
                                    554 	.area HOME    (CODE)
      000049                        555 __sdcc_program_startup:
      000049 02r00r00         [24]  556 	ljmp	_main
                                    557 ;	return from main will return to caller
                                    558 ;--------------------------------------------------------
                                    559 ; code
                                    560 ;--------------------------------------------------------
                                    561 	.area CSEG    (CODE)
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'main'
                                    564 ;------------------------------------------------------------
                                    565 ;R0            Allocated to registers r7 
                                    566 ;buzzer_state  Allocated to registers r7 
                                    567 ;------------------------------------------------------------
                                    568 ;	fire_alarm_panel.c:92: void main(void)
                                    569 ;	-----------------------------------------
                                    570 ;	 function main
                                    571 ;	-----------------------------------------
      000000                        572 _main:
                           000007   573 	ar7 = 0x07
                           000006   574 	ar6 = 0x06
                           000005   575 	ar5 = 0x05
                           000004   576 	ar4 = 0x04
                           000003   577 	ar3 = 0x03
                           000002   578 	ar2 = 0x02
                           000001   579 	ar1 = 0x01
                           000000   580 	ar0 = 0x00
                                    581 ;	fire_alarm_panel.c:96: init_system();
      000000 12r04r1A         [24]  582 	lcall	_init_system
                                    583 ;	fire_alarm_panel.c:100: while(R0 < 15) {
      000003 7F 00            [12]  584 	mov	r7,#0x00
      000005                        585 00101$:
      000005 BF 0F 00         [24]  586 	cjne	r7,#0x0f,00633$
      000008                        587 00633$:
      000008 50 13            [24]  588 	jnc	00103$
                                    589 ;	fire_alarm_panel.c:101: lcd_cmd(INIT_COMMANDS);
      00000A 90r00r00         [24]  590 	mov	dptr,#_INIT_COMMANDS
      00000D 75 F0 80         [24]  591 	mov	b, #0x80
      000010 C0 07            [24]  592 	push	ar7
      000012 12r06r31         [24]  593 	lcall	_lcd_cmd
                                    594 ;	fire_alarm_panel.c:102: delay();
      000015 12r07r12         [24]  595 	lcall	_delay
      000018 D0 07            [24]  596 	pop	ar7
                                    597 ;	fire_alarm_panel.c:103: R0++;
      00001A 0F               [12]  598 	inc	r7
      00001B 80 E8            [24]  599 	sjmp	00101$
      00001D                        600 00103$:
                                    601 ;	fire_alarm_panel.c:107: lcd_cmd(LINE1);
      00001D 90r00r07         [24]  602 	mov	dptr,#_LINE1
      000020 75 F0 80         [24]  603 	mov	b, #0x80
      000023 12r06r31         [24]  604 	lcall	_lcd_cmd
                                    605 ;	fire_alarm_panel.c:108: lcd_disp(TEXT2);
      000026 90r00r1E         [24]  606 	mov	dptr,#_TEXT2
      000029 75 F0 80         [24]  607 	mov	b, #0x80
      00002C 12r06r85         [24]  608 	lcall	_lcd_disp
                                    609 ;	fire_alarm_panel.c:109: delay();
      00002F 12r07r12         [24]  610 	lcall	_delay
                                    611 ;	fire_alarm_panel.c:110: lcd_cmd(LINE2);
      000032 90r00r0B         [24]  612 	mov	dptr,#_LINE2
      000035 75 F0 80         [24]  613 	mov	b, #0x80
      000038 12r06r31         [24]  614 	lcall	_lcd_cmd
                                    615 ;	fire_alarm_panel.c:111: lcd_disp1(TEXT1);
      00003B 90r00r0D         [24]  616 	mov	dptr,#_TEXT1
      00003E 75 F0 80         [24]  617 	mov	b, #0x80
      000041 12r06rBA         [24]  618 	lcall	_lcd_disp1
                                    619 ;	fire_alarm_panel.c:113: while(1) {
      000044                        620 00224$:
                                    621 ;	fire_alarm_panel.c:115: if(RI) {
      000044 30 98 03         [24]  622 	jnb	_RI,00105$
                                    623 ;	fire_alarm_panel.c:116: receive();
      000047 12r05r4C         [24]  624 	lcall	_receive
      00004A                        625 00105$:
                                    626 ;	fire_alarm_panel.c:120: if (!PR1 && !PR2 && !LB && !LAMP && EVQ) { // Normal condition
      00004A 20*05 23         [24]  627 	jb	_PR1,00110$
      00004D 20*06 20         [24]  628 	jb	_PR2,00110$
      000050 20 A2 1D         [24]  629 	jb	_LB,00110$
      000053 20 A6 1A         [24]  630 	jb	_LAMP,00110$
      000056 30 A1 17         [24]  631 	jnb	_EVQ,00110$
                                    632 ;	fire_alarm_panel.c:121: if(BL_TIMER > 0) {
      000059 E5*01            [12]  633 	mov	a,_BL_TIMER
      00005B 45*02            [12]  634 	orl	a,(_BL_TIMER + 1)
      00005D 60 0D            [24]  635 	jz	00107$
                                    636 ;	fire_alarm_panel.c:122: BL_TIMER--;
      00005F 15*01            [12]  637 	dec	_BL_TIMER
      000061 74 FF            [12]  638 	mov	a,#0xff
      000063 B5*01 02         [24]  639 	cjne	a,_BL_TIMER,00642$
      000066 15*02            [12]  640 	dec	(_BL_TIMER + 1)
      000068                        641 00642$:
                                    642 ;	fire_alarm_panel.c:123: BL = 1; // Keep backlight ON for 5 minutes
                                    643 ;	assignBit
      000068 D2 A7            [12]  644 	setb	_BL
      00006A 80 0C            [24]  645 	sjmp	00111$
      00006C                        646 00107$:
                                    647 ;	fire_alarm_panel.c:125: BL = 0; // Turn OFF after 5 minutes
                                    648 ;	assignBit
      00006C C2 A7            [12]  649 	clr	_BL
      00006E 80 08            [24]  650 	sjmp	00111$
      000070                        651 00110$:
                                    652 ;	fire_alarm_panel.c:129: BL = 1;
                                    653 ;	assignBit
      000070 D2 A7            [12]  654 	setb	_BL
                                    655 ;	fire_alarm_panel.c:130: BL_TIMER = BL_TIMEOUT; // Reset timer when returning to normal
      000072 75*01 2C         [24]  656 	mov	_BL_TIMER,#0x2c
      000075 75*02 01         [24]  657 	mov	(_BL_TIMER + 1),#0x01
      000078                        658 00111$:
                                    659 ;	fire_alarm_panel.c:139: if(!PR1 && !PR2 && !LB) {
      000078 20*05 18         [24]  660 	jb	_PR1,00117$
      00007B 20*06 15         [24]  661 	jb	_PR2,00117$
      00007E 20 A2 12         [24]  662 	jb	_LB,00117$
                                    663 ;	fire_alarm_panel.c:140: lcd_cmd(LINE1);
      000081 90r00r07         [24]  664 	mov	dptr,#_LINE1
      000084 75 F0 80         [24]  665 	mov	b, #0x80
      000087 12r06r31         [24]  666 	lcall	_lcd_cmd
                                    667 ;	fire_alarm_panel.c:141: lcd_disp(TEXT1);
      00008A 90r00r0D         [24]  668 	mov	dptr,#_TEXT1
      00008D 75 F0 80         [24]  669 	mov	b, #0x80
      000090 12r06r85         [24]  670 	lcall	_lcd_disp
      000093                        671 00117$:
                                    672 ;	fire_alarm_panel.c:144: if(RI) {
      000093 30 98 03         [24]  673 	jnb	_RI,00121$
                                    674 ;	fire_alarm_panel.c:145: receive();
      000096 12r05r4C         [24]  675 	lcall	_receive
      000099                        676 00121$:
                                    677 ;	fire_alarm_panel.c:149: if(!ZONE1) {
      000099 20 A4 30         [24]  678 	jb	_ZONE1,00132$
                                    679 ;	fire_alarm_panel.c:151: Z1 = 0; // Mark as healthy/not isolated
                                    680 ;	assignBit
      00009C C2*00            [12]  681 	clr	_Z1
                                    682 ;	fire_alarm_panel.c:152: PR1 = 0; // No problems
                                    683 ;	assignBit
      00009E C2*05            [12]  684 	clr	_PR1
                                    685 ;	fire_alarm_panel.c:153: lcd_cmd(LINE2);
      0000A0 90r00r0B         [24]  686 	mov	dptr,#_LINE2
      0000A3 75 F0 80         [24]  687 	mov	b, #0x80
      0000A6 12r06r31         [24]  688 	lcall	_lcd_cmd
                                    689 ;	fire_alarm_panel.c:154: lcd_disp(ISO1H); // Show "ZONE-01 HEALTHY"
      0000A9 90r00rEA         [24]  690 	mov	dptr,#_ISO1H
      0000AC 75 F0 80         [24]  691 	mov	b, #0x80
      0000AF 12r06r85         [24]  692 	lcall	_lcd_disp
                                    693 ;	fire_alarm_panel.c:156: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      0000B2 75*08 00         [24]  694 	mov	_set_indicators_PARM_2,#0x00
      0000B5 75*09 01         [24]  695 	mov	_set_indicators_PARM_3,#0x01
      0000B8 75*0A 00         [24]  696 	mov	_set_indicators_PARM_4,#0x00
      0000BB 75 82 01         [24]  697 	mov	dpl, #0x01
      0000BE 12r07r1B         [24]  698 	lcall	_set_indicators
                                    699 ;	fire_alarm_panel.c:157: delay1();
      0000C1 12r06rFF         [24]  700 	lcall	_delay1
                                    701 ;	fire_alarm_panel.c:158: if(RI) receive();
      0000C4 30 98 36         [24]  702 	jnb	_RI,00133$
      0000C7 12r05r4C         [24]  703 	lcall	_receive
      0000CA 80 31            [24]  704 	sjmp	00133$
      0000CC                        705 00132$:
                                    706 ;	fire_alarm_panel.c:161: Z1 = 1; // Mark as isolated
                                    707 ;	assignBit
      0000CC D2*00            [12]  708 	setb	_Z1
                                    709 ;	fire_alarm_panel.c:164: if(FIRE1 && OPEN1 && SHORT1) {
      0000CE 30 80 21         [24]  710 	jnb	_FIRE1,00125$
      0000D1 30 81 1E         [24]  711 	jnb	_OPEN1,00125$
      0000D4 30 82 1B         [24]  712 	jnb	_SHORT1,00125$
                                    713 ;	fire_alarm_panel.c:166: PR1 = 0;
                                    714 ;	assignBit
      0000D7 C2*05            [12]  715 	clr	_PR1
                                    716 ;	fire_alarm_panel.c:167: SLC1 = 0;
                                    717 ;	assignBit
      0000D9 C2*02            [12]  718 	clr	_SLC1
                                    719 ;	fire_alarm_panel.c:168: lcd_cmd(LINE2);
      0000DB 90r00r0B         [24]  720 	mov	dptr,#_LINE2
      0000DE 75 F0 80         [24]  721 	mov	b, #0x80
      0000E1 12r06r31         [24]  722 	lcall	_lcd_cmd
                                    723 ;	fire_alarm_panel.c:169: lcd_disp(ISO1); // Show "ZONE-01 ISOLATE" only when healthy
      0000E4 90r00rC8         [24]  724 	mov	dptr,#_ISO1
      0000E7 75 F0 80         [24]  725 	mov	b, #0x80
      0000EA 12r06r85         [24]  726 	lcall	_lcd_disp
                                    727 ;	fire_alarm_panel.c:170: delay1();
      0000ED 12r06rFF         [24]  728 	lcall	_delay1
      0000F0 80 05            [24]  729 	sjmp	00126$
      0000F2                        730 00125$:
                                    731 ;	fire_alarm_panel.c:173: PR1 = 1;
                                    732 ;	assignBit
      0000F2 D2*05            [12]  733 	setb	_PR1
                                    734 ;	fire_alarm_panel.c:174: prz1();
      0000F4 12r04r60         [24]  735 	lcall	_prz1
      0000F7                        736 00126$:
                                    737 ;	fire_alarm_panel.c:176: if(RI) receive();
      0000F7 30 98 03         [24]  738 	jnb	_RI,00133$
      0000FA 12r05r4C         [24]  739 	lcall	_receive
      0000FD                        740 00133$:
                                    741 ;	fire_alarm_panel.c:180: if(!ZONE2) {
      0000FD 20 A5 30         [24]  742 	jb	_ZONE2,00144$
                                    743 ;	fire_alarm_panel.c:182: Z2 = 0; // Mark as healthy/not isolated
                                    744 ;	assignBit
      000100 C2*01            [12]  745 	clr	_Z2
                                    746 ;	fire_alarm_panel.c:183: PR2 = 0; // No problems
                                    747 ;	assignBit
      000102 C2*06            [12]  748 	clr	_PR2
                                    749 ;	fire_alarm_panel.c:184: lcd_cmd(LINE2);
      000104 90r00r0B         [24]  750 	mov	dptr,#_LINE2
      000107 75 F0 80         [24]  751 	mov	b, #0x80
      00010A 12r06r31         [24]  752 	lcall	_lcd_cmd
                                    753 ;	fire_alarm_panel.c:185: lcd_disp(ISO2H); // Show "ZONE-02 HEALTHY"
      00010D 90r00rFB         [24]  754 	mov	dptr,#_ISO2H
      000110 75 F0 80         [24]  755 	mov	b, #0x80
      000113 12r06r85         [24]  756 	lcall	_lcd_disp
                                    757 ;	fire_alarm_panel.c:187: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000116 75*08 00         [24]  758 	mov	_set_indicators_PARM_2,#0x00
      000119 75*09 01         [24]  759 	mov	_set_indicators_PARM_3,#0x01
      00011C 75*0A 00         [24]  760 	mov	_set_indicators_PARM_4,#0x00
      00011F 75 82 01         [24]  761 	mov	dpl, #0x01
      000122 12r07r1B         [24]  762 	lcall	_set_indicators
                                    763 ;	fire_alarm_panel.c:188: delay1();
      000125 12r06rFF         [24]  764 	lcall	_delay1
                                    765 ;	fire_alarm_panel.c:189: if(RI) receive();
      000128 30 98 36         [24]  766 	jnb	_RI,00145$
      00012B 12r05r4C         [24]  767 	lcall	_receive
      00012E 80 31            [24]  768 	sjmp	00145$
      000130                        769 00144$:
                                    770 ;	fire_alarm_panel.c:192: Z2 = 1; // Mark as isolated
                                    771 ;	assignBit
      000130 D2*01            [12]  772 	setb	_Z2
                                    773 ;	fire_alarm_panel.c:195: if(FIRE2 && OPEN2 && SHORT2) {
      000132 30 83 21         [24]  774 	jnb	_FIRE2,00137$
      000135 30 84 1E         [24]  775 	jnb	_OPEN2,00137$
      000138 30 85 1B         [24]  776 	jnb	_SHORT2,00137$
                                    777 ;	fire_alarm_panel.c:197: PR2 = 0;
                                    778 ;	assignBit
      00013B C2*06            [12]  779 	clr	_PR2
                                    780 ;	fire_alarm_panel.c:198: SLC2 = 0;
                                    781 ;	assignBit
      00013D C2*03            [12]  782 	clr	_SLC2
                                    783 ;	fire_alarm_panel.c:199: lcd_cmd(LINE2);
      00013F 90r00r0B         [24]  784 	mov	dptr,#_LINE2
      000142 75 F0 80         [24]  785 	mov	b, #0x80
      000145 12r06r31         [24]  786 	lcall	_lcd_cmd
                                    787 ;	fire_alarm_panel.c:200: lcd_disp(ISO2); // Show "ZONE-02 ISOLATE" only when healthy
      000148 90r00rD9         [24]  788 	mov	dptr,#_ISO2
      00014B 75 F0 80         [24]  789 	mov	b, #0x80
      00014E 12r06r85         [24]  790 	lcall	_lcd_disp
                                    791 ;	fire_alarm_panel.c:201: delay1();
      000151 12r06rFF         [24]  792 	lcall	_delay1
      000154 80 05            [24]  793 	sjmp	00138$
      000156                        794 00137$:
                                    795 ;	fire_alarm_panel.c:204: PR2 = 1;
                                    796 ;	assignBit
      000156 D2*06            [12]  797 	setb	_PR2
                                    798 ;	fire_alarm_panel.c:205: prz2();
      000158 12r04rD6         [24]  799 	lcall	_prz2
      00015B                        800 00138$:
                                    801 ;	fire_alarm_panel.c:207: if(RI) receive();
      00015B 30 98 03         [24]  802 	jnb	_RI,00145$
      00015E 12r05r4C         [24]  803 	lcall	_receive
      000161                        804 00145$:
                                    805 ;	fire_alarm_panel.c:211: if(!ZONE1 && !ZONE2) {
      000161 20 A4 2D         [24]  806 	jb	_ZONE1,00149$
      000164 20 A5 2A         [24]  807 	jb	_ZONE2,00149$
                                    808 ;	fire_alarm_panel.c:212: lcd_cmd(LINE2);
      000167 90r00r0B         [24]  809 	mov	dptr,#_LINE2
      00016A 75 F0 80         [24]  810 	mov	b, #0x80
      00016D 12r06r31         [24]  811 	lcall	_lcd_cmd
                                    812 ;	fire_alarm_panel.c:213: lcd_disp(TEXT3);
      000170 90r00r2F         [24]  813 	mov	dptr,#_TEXT3
      000173 75 F0 80         [24]  814 	mov	b, #0x80
      000176 12r06r85         [24]  815 	lcall	_lcd_disp
                                    816 ;	fire_alarm_panel.c:215: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000179 75*08 00         [24]  817 	mov	_set_indicators_PARM_2,#0x00
      00017C 75*09 01         [24]  818 	mov	_set_indicators_PARM_3,#0x01
      00017F 75*0A 00         [24]  819 	mov	_set_indicators_PARM_4,#0x00
      000182 75 82 01         [24]  820 	mov	dpl, #0x01
      000185 12r07r1B         [24]  821 	lcall	_set_indicators
                                    822 ;	fire_alarm_panel.c:216: delay1();
      000188 12r06rFF         [24]  823 	lcall	_delay1
                                    824 ;	fire_alarm_panel.c:217: if(RI) receive();
      00018B 30 98 03         [24]  825 	jnb	_RI,00149$
      00018E 12r05r4C         [24]  826 	lcall	_receive
      000191                        827 00149$:
                                    828 ;	fire_alarm_panel.c:221: if(!SIL) {
      000191 20 A0 03         [24]  829 	jb	_SIL,00152$
                                    830 ;	fire_alarm_panel.c:222: silence_alarms();
      000194 12r05rEA         [24]  831 	lcall	_silence_alarms
      000197                        832 00152$:
                                    833 ;	fire_alarm_panel.c:226: if(RI) receive();
      000197 30 98 03         [24]  834 	jnb	_RI,00154$
      00019A 12r05r4C         [24]  835 	lcall	_receive
      00019D                        836 00154$:
                                    837 ;	fire_alarm_panel.c:228: if(!LAMP) { // Lamp test button pressed (active low)
      00019D 30 A6 03         [24]  838 	jnb	_LAMP,00664$
      0001A0 02r02r2D         [24]  839 	ljmp	00161$
      0001A3                        840 00664$:
                                    841 ;	fire_alarm_panel.c:230: lcd_cmd(LINE1);
      0001A3 90r00r07         [24]  842 	mov	dptr,#_LINE1
      0001A6 75 F0 80         [24]  843 	mov	b, #0x80
      0001A9 12r06r31         [24]  844 	lcall	_lcd_cmd
                                    845 ;	fire_alarm_panel.c:231: lcd_disp(TLAMP);
      0001AC 90r00rA6         [24]  846 	mov	dptr,#_TLAMP
      0001AF 75 F0 80         [24]  847 	mov	b, #0x80
      0001B2 12r06r85         [24]  848 	lcall	_lcd_disp
                                    849 ;	fire_alarm_panel.c:232: lcd_cmd(LINE2);
      0001B5 90r00r0B         [24]  850 	mov	dptr,#_LINE2
      0001B8 75 F0 80         [24]  851 	mov	b, #0x80
      0001BB 12r06r31         [24]  852 	lcall	_lcd_cmd
                                    853 ;	fire_alarm_panel.c:233: lcd_disp(TZONE1);
      0001BE 90r00r40         [24]  854 	mov	dptr,#_TZONE1
      0001C1 75 F0 80         [24]  855 	mov	b, #0x80
      0001C4 12r06r85         [24]  856 	lcall	_lcd_disp
                                    857 ;	fire_alarm_panel.c:234: delay1();
      0001C7 12r06rFF         [24]  858 	lcall	_delay1
                                    859 ;	fire_alarm_panel.c:235: delay1();
      0001CA 12r06rFF         [24]  860 	lcall	_delay1
                                    861 ;	fire_alarm_panel.c:238: set_indicators(0, 1, 0, 1);  // HOT=ON, BUZ=ON, CFLR=ON, CFTLR=ON
      0001CD 75*08 01         [24]  862 	mov	_set_indicators_PARM_2,#0x01
      0001D0 75*09 00         [24]  863 	mov	_set_indicators_PARM_3,#0x00
      0001D3 75*0A 01         [24]  864 	mov	_set_indicators_PARM_4,#0x01
      0001D6 75 82 00         [24]  865 	mov	dpl, #0x00
      0001D9 12r07r1B         [24]  866 	lcall	_set_indicators
                                    867 ;	fire_alarm_panel.c:239: delay1();
      0001DC 12r06rFF         [24]  868 	lcall	_delay1
                                    869 ;	fire_alarm_panel.c:240: set_indicators(1, 0, 1, 0);  // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      0001DF 75*08 00         [24]  870 	mov	_set_indicators_PARM_2,#0x00
      0001E2 75*09 01         [24]  871 	mov	_set_indicators_PARM_3,#0x01
      0001E5 75*0A 00         [24]  872 	mov	_set_indicators_PARM_4,#0x00
      0001E8 75 82 01         [24]  873 	mov	dpl, #0x01
      0001EB 12r07r1B         [24]  874 	lcall	_set_indicators
                                    875 ;	fire_alarm_panel.c:242: lcd_cmd(LINE2);
      0001EE 90r00r0B         [24]  876 	mov	dptr,#_LINE2
      0001F1 75 F0 80         [24]  877 	mov	b, #0x80
      0001F4 12r06r31         [24]  878 	lcall	_lcd_cmd
                                    879 ;	fire_alarm_panel.c:243: lcd_disp(TZONE2);
      0001F7 90r00r51         [24]  880 	mov	dptr,#_TZONE2
      0001FA 75 F0 80         [24]  881 	mov	b, #0x80
      0001FD 12r06r85         [24]  882 	lcall	_lcd_disp
                                    883 ;	fire_alarm_panel.c:244: delay1();
      000200 12r06rFF         [24]  884 	lcall	_delay1
                                    885 ;	fire_alarm_panel.c:247: set_indicators(0, 1, 0, 1);  // HOT=ON, BUZ=ON, CFLR=ON, CFTLR=ON
      000203 75*08 01         [24]  886 	mov	_set_indicators_PARM_2,#0x01
      000206 75*09 00         [24]  887 	mov	_set_indicators_PARM_3,#0x00
      000209 75*0A 01         [24]  888 	mov	_set_indicators_PARM_4,#0x01
      00020C 75 82 00         [24]  889 	mov	dpl, #0x00
      00020F 12r07r1B         [24]  890 	lcall	_set_indicators
                                    891 ;	fire_alarm_panel.c:248: delay1();
      000212 12r06rFF         [24]  892 	lcall	_delay1
                                    893 ;	fire_alarm_panel.c:249: set_indicators(1, 0, 1, 0);  // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000215 75*08 00         [24]  894 	mov	_set_indicators_PARM_2,#0x00
      000218 75*09 01         [24]  895 	mov	_set_indicators_PARM_3,#0x01
      00021B 75*0A 00         [24]  896 	mov	_set_indicators_PARM_4,#0x00
      00021E 75 82 01         [24]  897 	mov	dpl, #0x01
      000221 12r07r1B         [24]  898 	lcall	_set_indicators
                                    899 ;	fire_alarm_panel.c:252: while(!LAMP);
      000224                        900 00155$:
      000224 30 A6 FD         [24]  901 	jnb	_LAMP,00155$
                                    902 ;	fire_alarm_panel.c:253: if(RI) receive();
      000227 30 98 03         [24]  903 	jnb	_RI,00161$
      00022A 12r05r4C         [24]  904 	lcall	_receive
      00022D                        905 00161$:
                                    906 ;	fire_alarm_panel.c:257: if(!EVQ) {
      00022D 20 A1 53         [24]  907 	jb	_EVQ,00169$
                                    908 ;	fire_alarm_panel.c:258: set_indicators(0, 1, 0, 0);  // HOT=ON, BUZ=ON, CFLR=ON, CFTLR=OFF
      000230 75*08 01         [24]  909 	mov	_set_indicators_PARM_2,#0x01
      000233 75*09 00         [24]  910 	mov	_set_indicators_PARM_3,#0x00
      000236 75*0A 00         [24]  911 	mov	_set_indicators_PARM_4,#0x00
      000239 75 82 00         [24]  912 	mov	dpl, #0x00
      00023C 12r07r1B         [24]  913 	lcall	_set_indicators
                                    914 ;	fire_alarm_panel.c:259: lcd_cmd(LINE1);
      00023F 90r00r07         [24]  915 	mov	dptr,#_LINE1
      000242 75 F0 80         [24]  916 	mov	b, #0x80
      000245 12r06r31         [24]  917 	lcall	_lcd_cmd
                                    918 ;	fire_alarm_panel.c:260: lcd_disp(TEVQ);
      000248 90r00rB7         [24]  919 	mov	dptr,#_TEVQ
      00024B 75 F0 80         [24]  920 	mov	b, #0x80
      00024E 12r06r85         [24]  921 	lcall	_lcd_disp
                                    922 ;	fire_alarm_panel.c:261: lcd_cmd(LINE2);
      000251 90r00r0B         [24]  923 	mov	dptr,#_LINE2
      000254 75 F0 80         [24]  924 	mov	b, #0x80
      000257 12r06r31         [24]  925 	lcall	_lcd_cmd
                                    926 ;	fire_alarm_panel.c:262: lcd_disp(TEXT4);
      00025A 90r00r95         [24]  927 	mov	dptr,#_TEXT4
      00025D 75 F0 80         [24]  928 	mov	b, #0x80
      000260 12r06r85         [24]  929 	lcall	_lcd_disp
                                    930 ;	fire_alarm_panel.c:265: while(!EVQ && !RI) {
      000263                        931 00163$:
      000263 20 A1 08         [24]  932 	jb	_EVQ,00165$
      000266 20 98 05         [24]  933 	jb	_RI,00165$
                                    934 ;	fire_alarm_panel.c:266: delay1();
      000269 12r06rFF         [24]  935 	lcall	_delay1
      00026C 80 F5            [24]  936 	sjmp	00163$
      00026E                        937 00165$:
                                    938 ;	fire_alarm_panel.c:269: if(RI) receive();
      00026E 30 98 03         [24]  939 	jnb	_RI,00167$
      000271 12r05r4C         [24]  940 	lcall	_receive
      000274                        941 00167$:
                                    942 ;	fire_alarm_panel.c:272: set_indicators(1, 0, 1, 0);  // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      000274 75*08 00         [24]  943 	mov	_set_indicators_PARM_2,#0x00
      000277 75*09 01         [24]  944 	mov	_set_indicators_PARM_3,#0x01
      00027A 75*0A 00         [24]  945 	mov	_set_indicators_PARM_4,#0x00
      00027D 75 82 01         [24]  946 	mov	dpl, #0x01
      000280 12r07r1B         [24]  947 	lcall	_set_indicators
      000283                        948 00169$:
                                    949 ;	fire_alarm_panel.c:275: delay();
      000283 12r07r12         [24]  950 	lcall	_delay
                                    951 ;	fire_alarm_panel.c:278: if(!PR1 && !PR2 && !LB && !ZONE1 && !ZONE2) {
      000286 20*05 3F         [24]  952 	jb	_PR1,00171$
      000289 20*06 3C         [24]  953 	jb	_PR2,00171$
      00028C 20 A2 39         [24]  954 	jb	_LB,00171$
      00028F 20 A4 36         [24]  955 	jb	_ZONE1,00171$
      000292 20 A5 33         [24]  956 	jb	_ZONE2,00171$
                                    957 ;	fire_alarm_panel.c:279: lcd_cmd(LINE1);
      000295 90r00r07         [24]  958 	mov	dptr,#_LINE1
      000298 75 F0 80         [24]  959 	mov	b, #0x80
      00029B 12r06r31         [24]  960 	lcall	_lcd_cmd
                                    961 ;	fire_alarm_panel.c:280: lcd_disp(TEXT1);
      00029E 90r00r0D         [24]  962 	mov	dptr,#_TEXT1
      0002A1 75 F0 80         [24]  963 	mov	b, #0x80
      0002A4 12r06r85         [24]  964 	lcall	_lcd_disp
                                    965 ;	fire_alarm_panel.c:281: lcd_cmd(LINE2);
      0002A7 90r00r0B         [24]  966 	mov	dptr,#_LINE2
      0002AA 75 F0 80         [24]  967 	mov	b, #0x80
      0002AD 12r06r31         [24]  968 	lcall	_lcd_cmd
                                    969 ;	fire_alarm_panel.c:282: lcd_disp(TEXT3);
      0002B0 90r00r2F         [24]  970 	mov	dptr,#_TEXT3
      0002B3 75 F0 80         [24]  971 	mov	b, #0x80
      0002B6 12r06r85         [24]  972 	lcall	_lcd_disp
                                    973 ;	fire_alarm_panel.c:284: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      0002B9 75*08 00         [24]  974 	mov	_set_indicators_PARM_2,#0x00
      0002BC 75*09 01         [24]  975 	mov	_set_indicators_PARM_3,#0x01
      0002BF 75*0A 00         [24]  976 	mov	_set_indicators_PARM_4,#0x00
      0002C2 75 82 01         [24]  977 	mov	dpl, #0x01
      0002C5 12r07r1B         [24]  978 	lcall	_set_indicators
      0002C8                        979 00171$:
                                    980 ;	fire_alarm_panel.c:288: if(!PR1 && !PR2 && !LB) {
      0002C8 20*05 1B         [24]  981 	jb	_PR1,00211$
      0002CB 20*06 18         [24]  982 	jb	_PR2,00211$
      0002CE 20 A2 15         [24]  983 	jb	_LB,00211$
                                    984 ;	fire_alarm_panel.c:290: set_indicators(1, 0, 1, 0); // HOT=OFF, BUZ=OFF, CFLR=OFF, CFTLR=OFF
      0002D1 75*08 00         [24]  985 	mov	_set_indicators_PARM_2,#0x00
      0002D4 75*09 01         [24]  986 	mov	_set_indicators_PARM_3,#0x01
      0002D7 75*0A 00         [24]  987 	mov	_set_indicators_PARM_4,#0x00
      0002DA 75 82 01         [24]  988 	mov	dpl, #0x01
      0002DD 12r07r1B         [24]  989 	lcall	_set_indicators
                                    990 ;	fire_alarm_panel.c:291: BUZZER_COUNTER = 0; // Reset buzzer counter
      0002E0 75*05 00         [24]  991 	mov	_BUZZER_COUNTER,#0x00
      0002E3 02r03rAE         [24]  992 	ljmp	00212$
      0002E6                        993 00211$:
                                    994 ;	fire_alarm_panel.c:294: BUZZER_COUNTER++;
      0002E6 05*05            [12]  995 	inc	_BUZZER_COUNTER
                                    996 ;	fire_alarm_panel.c:295: if(BUZZER_COUNTER > (BUZZER_ON_TIME + BUZZER_OFF_TIME)) {
      0002E8 E5*05            [12]  997 	mov	a,_BUZZER_COUNTER
      0002EA 24 AF            [12]  998 	add	a,#0xff - 0x50
      0002EC 50 03            [24]  999 	jnc	00177$
                                   1000 ;	fire_alarm_panel.c:296: BUZZER_COUNTER = 0; // Reset counter
      0002EE 75*05 00         [24] 1001 	mov	_BUZZER_COUNTER,#0x00
      0002F1                       1002 00177$:
                                   1003 ;	fire_alarm_panel.c:300: unsigned char buzzer_state = (BUZZER_COUNTER < BUZZER_ON_TIME) ? 1 : 0;
      0002F1 74 CE            [12] 1004 	mov	a,#0x100 - 0x32
      0002F3 25*05            [12] 1005 	add	a,_BUZZER_COUNTER
      0002F5 40 04            [24] 1006 	jc	00228$
      0002F7 7F 01            [12] 1007 	mov	r7,#0x01
      0002F9 80 02            [24] 1008 	sjmp	00229$
      0002FB                       1009 00228$:
      0002FB 7F 00            [12] 1010 	mov	r7,#0x00
      0002FD                       1011 00229$:
                                   1012 ;	fire_alarm_panel.c:303: if((PR1 && !FIRE1) || (PR2 && !FIRE2)) {
      0002FD 30*05 03         [24] 1013 	jnb	_PR1,00204$
      000300 30 80 06         [24] 1014 	jnb	_FIRE1,00199$
      000303                       1015 00204$:
      000303 30*06 3E         [24] 1016 	jnb	_PR2,00200$
      000306 20 83 3B         [24] 1017 	jb	_FIRE2,00200$
      000309                       1018 00199$:
                                   1019 ;	fire_alarm_panel.c:305: if((!SLC1 && PR1 && !FIRE1) || (!SLC2 && PR2 && !FIRE2)) {
      000309 20*02 06         [24] 1020 	jb	_SLC1,00185$
      00030C 30*05 03         [24] 1021 	jnb	_PR1,00185$
      00030F 30 80 09         [24] 1022 	jnb	_FIRE1,00178$
      000312                       1023 00185$:
      000312 20*03 1A         [24] 1024 	jb	_SLC2,00179$
      000315 30*06 17         [24] 1025 	jnb	_PR2,00179$
      000318 20 83 14         [24] 1026 	jb	_FIRE2,00179$
      00031B                       1027 00178$:
                                   1028 ;	fire_alarm_panel.c:307: set_indicators(0, buzzer_state, 0, 0); // HOT=ON, BUZ=repeating, CFLR=ON, CFTLR=OFF
      00031B 8F*08            [24] 1029 	mov	_set_indicators_PARM_2,r7
      00031D 75*09 00         [24] 1030 	mov	_set_indicators_PARM_3,#0x00
      000320 75*0A 00         [24] 1031 	mov	_set_indicators_PARM_4,#0x00
      000323 75 82 00         [24] 1032 	mov	dpl, #0x00
      000326 C0 07            [24] 1033 	push	ar7
      000328 12r07r1B         [24] 1034 	lcall	_set_indicators
      00032B D0 07            [24] 1035 	pop	ar7
      00032D 80 5A            [24] 1036 	sjmp	00201$
      00032F                       1037 00179$:
                                   1038 ;	fire_alarm_panel.c:310: set_indicators(1, 0, 0, 0); // HOT=OFF(silenced), BUZ=OFF(silenced), CFLR=ON, CFTLR=OFF
      00032F 75*08 00         [24] 1039 	mov	_set_indicators_PARM_2,#0x00
      000332 75*09 00         [24] 1040 	mov	_set_indicators_PARM_3,#0x00
      000335 75*0A 00         [24] 1041 	mov	_set_indicators_PARM_4,#0x00
      000338 75 82 01         [24] 1042 	mov	dpl, #0x01
      00033B C0 07            [24] 1043 	push	ar7
      00033D 12r07r1B         [24] 1044 	lcall	_set_indicators
      000340 D0 07            [24] 1045 	pop	ar7
      000342 80 45            [24] 1046 	sjmp	00201$
      000344                       1047 00200$:
                                   1048 ;	fire_alarm_panel.c:314: else if((PR1 && (!SHORT1 || !OPEN1)) || (PR2 && (!SHORT2 || !OPEN2))) {
      000344 30*05 06         [24] 1049 	jnb	_PR1,00198$
      000347 30 82 0C         [24] 1050 	jnb	_SHORT1,00192$
      00034A 30 81 09         [24] 1051 	jnb	_OPEN1,00192$
      00034D                       1052 00198$:
      00034D 30*06 39         [24] 1053 	jnb	_PR2,00201$
      000350 30 85 03         [24] 1054 	jnb	_SHORT2,00192$
      000353 20 84 33         [24] 1055 	jb	_OPEN2,00201$
      000356                       1056 00192$:
                                   1057 ;	fire_alarm_panel.c:316: if((!SLC1 && PR1) || (!SLC2 && PR2)) {
      000356 20*02 03         [24] 1058 	jb	_SLC1,00191$
      000359 20*05 06         [24] 1059 	jb	_PR1,00186$
      00035C                       1060 00191$:
      00035C 20*03 17         [24] 1061 	jb	_SLC2,00187$
      00035F 30*06 14         [24] 1062 	jnb	_PR2,00187$
      000362                       1063 00186$:
                                   1064 ;	fire_alarm_panel.c:318: set_indicators(1, buzzer_state, 1, 1); // HOT=OFF, BUZ=repeating, CFLR=OFF, CFTLR=ON
      000362 8F*08            [24] 1065 	mov	_set_indicators_PARM_2,r7
      000364 75*09 01         [24] 1066 	mov	_set_indicators_PARM_3,#0x01
      000367 75*0A 01         [24] 1067 	mov	_set_indicators_PARM_4,#0x01
      00036A 75 82 01         [24] 1068 	mov	dpl, #0x01
      00036D C0 07            [24] 1069 	push	ar7
      00036F 12r07r1B         [24] 1070 	lcall	_set_indicators
      000372 D0 07            [24] 1071 	pop	ar7
      000374 80 13            [24] 1072 	sjmp	00201$
      000376                       1073 00187$:
                                   1074 ;	fire_alarm_panel.c:321: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      000376 75*08 00         [24] 1075 	mov	_set_indicators_PARM_2,#0x00
      000379 75*09 01         [24] 1076 	mov	_set_indicators_PARM_3,#0x01
      00037C 75*0A 01         [24] 1077 	mov	_set_indicators_PARM_4,#0x01
      00037F 75 82 01         [24] 1078 	mov	dpl, #0x01
      000382 C0 07            [24] 1079 	push	ar7
      000384 12r07r1B         [24] 1080 	lcall	_set_indicators
      000387 D0 07            [24] 1081 	pop	ar7
      000389                       1082 00201$:
                                   1083 ;	fire_alarm_panel.c:326: if(LB) {
      000389 30 A2 22         [24] 1084 	jnb	_LB,00212$
                                   1085 ;	fire_alarm_panel.c:327: if(!LISO) {
      00038C 20*04 10         [24] 1086 	jb	_LISO,00206$
                                   1087 ;	fire_alarm_panel.c:329: set_indicators(1, buzzer_state, 1, 1); // HOT=OFF, BUZ=repeating, CFLR=OFF, CFTLR=ON
      00038F 8F*08            [24] 1088 	mov	_set_indicators_PARM_2,r7
      000391 75*09 01         [24] 1089 	mov	_set_indicators_PARM_3,#0x01
      000394 75*0A 01         [24] 1090 	mov	_set_indicators_PARM_4,#0x01
      000397 75 82 01         [24] 1091 	mov	dpl, #0x01
      00039A 12r07r1B         [24] 1092 	lcall	_set_indicators
      00039D 80 0F            [24] 1093 	sjmp	00212$
      00039F                       1094 00206$:
                                   1095 ;	fire_alarm_panel.c:332: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      00039F 75*08 00         [24] 1096 	mov	_set_indicators_PARM_2,#0x00
      0003A2 75*09 01         [24] 1097 	mov	_set_indicators_PARM_3,#0x01
      0003A5 75*0A 01         [24] 1098 	mov	_set_indicators_PARM_4,#0x01
      0003A8 75 82 01         [24] 1099 	mov	dpl, #0x01
      0003AB 12r07r1B         [24] 1100 	lcall	_set_indicators
      0003AE                       1101 00212$:
                                   1102 ;	fire_alarm_panel.c:340: if(LB) {  // Fixed: LB=1 means battery is low
      0003AE 30 A2 64         [24] 1103 	jnb	_LB,00221$
                                   1104 ;	fire_alarm_panel.c:342: if(!LISO) {
      0003B1 20*04 25         [24] 1105 	jb	_LISO,00218$
                                   1106 ;	fire_alarm_panel.c:343: set_indicators(1, 1, 1, 1); // HOT=OFF, BUZ=ON, CFLR=OFF, CFTLR=ON
      0003B4 75*08 01         [24] 1107 	mov	_set_indicators_PARM_2,#0x01
      0003B7 75*09 01         [24] 1108 	mov	_set_indicators_PARM_3,#0x01
      0003BA 75*0A 01         [24] 1109 	mov	_set_indicators_PARM_4,#0x01
      0003BD 75 82 01         [24] 1110 	mov	dpl, #0x01
      0003C0 12r07r1B         [24] 1111 	lcall	_set_indicators
                                   1112 ;	fire_alarm_panel.c:344: if(!SIL) {
      0003C3 20 A0 22         [24] 1113 	jb	_SIL,00219$
                                   1114 ;	fire_alarm_panel.c:346: LISO = 1;
                                   1115 ;	assignBit
      0003C6 D2*04            [12] 1116 	setb	_LISO
                                   1117 ;	fire_alarm_panel.c:347: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      0003C8 75*08 00         [24] 1118 	mov	_set_indicators_PARM_2,#0x00
      0003CB 75*09 01         [24] 1119 	mov	_set_indicators_PARM_3,#0x01
      0003CE 75*0A 01         [24] 1120 	mov	_set_indicators_PARM_4,#0x01
      0003D1 75 82 01         [24] 1121 	mov	dpl, #0x01
      0003D4 12r07r1B         [24] 1122 	lcall	_set_indicators
      0003D7 80 0F            [24] 1123 	sjmp	00219$
      0003D9                       1124 00218$:
                                   1125 ;	fire_alarm_panel.c:350: set_indicators(1, 0, 1, 1); // HOT=OFF, BUZ=OFF(silenced), CFLR=OFF, CFTLR=ON
      0003D9 75*08 00         [24] 1126 	mov	_set_indicators_PARM_2,#0x00
      0003DC 75*09 01         [24] 1127 	mov	_set_indicators_PARM_3,#0x01
      0003DF 75*0A 01         [24] 1128 	mov	_set_indicators_PARM_4,#0x01
      0003E2 75 82 01         [24] 1129 	mov	dpl, #0x01
      0003E5 12r07r1B         [24] 1130 	lcall	_set_indicators
      0003E8                       1131 00219$:
                                   1132 ;	fire_alarm_panel.c:353: lcd_cmd(LINE1);
      0003E8 90r00r07         [24] 1133 	mov	dptr,#_LINE1
      0003EB 75 F0 80         [24] 1134 	mov	b, #0x80
      0003EE 12r06r31         [24] 1135 	lcall	_lcd_cmd
                                   1136 ;	fire_alarm_panel.c:354: lcd_disp(LOWB);
      0003F1 90r01r0C         [24] 1137 	mov	dptr,#_LOWB
      0003F4 75 F0 80         [24] 1138 	mov	b, #0x80
      0003F7 12r06r85         [24] 1139 	lcall	_lcd_disp
                                   1140 ;	fire_alarm_panel.c:355: lcd_cmd(LINE2);
      0003FA 90r00r0B         [24] 1141 	mov	dptr,#_LINE2
      0003FD 75 F0 80         [24] 1142 	mov	b, #0x80
      000400 12r06r31         [24] 1143 	lcall	_lcd_cmd
                                   1144 ;	fire_alarm_panel.c:356: lcd_disp(LOWM);
      000403 90r01r1D         [24] 1145 	mov	dptr,#_LOWM
      000406 75 F0 80         [24] 1146 	mov	b, #0x80
      000409 12r06r85         [24] 1147 	lcall	_lcd_disp
                                   1148 ;	fire_alarm_panel.c:357: delay1();
      00040C 12r06rFF         [24] 1149 	lcall	_delay1
                                   1150 ;	fire_alarm_panel.c:358: delay1();
      00040F 12r06rFF         [24] 1151 	lcall	_delay1
                                   1152 ;	fire_alarm_panel.c:361: continue;
      000412 02r00r44         [24] 1153 	ljmp	00224$
      000415                       1154 00221$:
                                   1155 ;	fire_alarm_panel.c:364: LISO = 0;
                                   1156 ;	assignBit
      000415 C2*04            [12] 1157 	clr	_LISO
                                   1158 ;	fire_alarm_panel.c:368: }
      000417 02r00r44         [24] 1159 	ljmp	00224$
                                   1160 ;------------------------------------------------------------
                                   1161 ;Allocation info for local variables in function 'init_system'
                                   1162 ;------------------------------------------------------------
                                   1163 ;	fire_alarm_panel.c:370: void init_system(void)
                                   1164 ;	-----------------------------------------
                                   1165 ;	 function init_system
                                   1166 ;	-----------------------------------------
      00041A                       1167 _init_system:
                                   1168 ;	fire_alarm_panel.c:373: TMOD = 0x20;
      00041A 75 89 20         [24] 1169 	mov	_TMOD,#0x20
                                   1170 ;	fire_alarm_panel.c:374: TH1 = 253;  // -3 for 9600 baud
      00041D 75 8D FD         [24] 1171 	mov	_TH1,#0xfd
                                   1172 ;	fire_alarm_panel.c:375: SCON = 0x50;
      000420 75 98 50         [24] 1173 	mov	_SCON,#0x50
                                   1174 ;	fire_alarm_panel.c:376: TR1 = 1;
                                   1175 ;	assignBit
      000423 D2 8E            [12] 1176 	setb	_TR1
                                   1177 ;	fire_alarm_panel.c:379: P0 = 0xFF;  // All inputs pulled high (active low inputs)
      000425 75 80 FF         [24] 1178 	mov	_P0,#0xff
                                   1179 ;	fire_alarm_panel.c:380: P2 = 0xFF;  // Control inputs pulled high
      000428 75 A0 FF         [24] 1180 	mov	_P2,#0xff
                                   1181 ;	fire_alarm_panel.c:381: P3 = 0xFF;
      00042B 75 B0 FF         [24] 1182 	mov	_P3,#0xff
                                   1183 ;	fire_alarm_panel.c:384: P1 = 0x00;
      00042E 75 90 00         [24] 1184 	mov	_P1,#0x00
                                   1185 ;	fire_alarm_panel.c:388: set_indicators(1, 0, 1, 0);
      000431 75*08 00         [24] 1186 	mov	_set_indicators_PARM_2,#0x00
      000434 75*09 01         [24] 1187 	mov	_set_indicators_PARM_3,#0x01
      000437 75*0A 00         [24] 1188 	mov	_set_indicators_PARM_4,#0x00
      00043A 75 82 01         [24] 1189 	mov	dpl, #0x01
      00043D 12r07r1B         [24] 1190 	lcall	_set_indicators
                                   1191 ;	fire_alarm_panel.c:390: BL = 1;     // Backlight ON initially
                                   1192 ;	assignBit
      000440 D2 A7            [12] 1193 	setb	_BL
                                   1194 ;	fire_alarm_panel.c:393: LISO = 0;
                                   1195 ;	assignBit
      000442 C2*04            [12] 1196 	clr	_LISO
                                   1197 ;	fire_alarm_panel.c:394: SLC1 = 0;
                                   1198 ;	assignBit
      000444 C2*02            [12] 1199 	clr	_SLC1
                                   1200 ;	fire_alarm_panel.c:395: SLC2 = 0;
                                   1201 ;	assignBit
      000446 C2*03            [12] 1202 	clr	_SLC2
                                   1203 ;	fire_alarm_panel.c:396: Z1 = 0;
                                   1204 ;	assignBit
      000448 C2*00            [12] 1205 	clr	_Z1
                                   1206 ;	fire_alarm_panel.c:397: Z2 = 0;
                                   1207 ;	assignBit
      00044A C2*01            [12] 1208 	clr	_Z2
                                   1209 ;	fire_alarm_panel.c:398: PR1 = 0;
                                   1210 ;	assignBit
      00044C C2*05            [12] 1211 	clr	_PR1
                                   1212 ;	fire_alarm_panel.c:399: PR2 = 0;
                                   1213 ;	assignBit
      00044E C2*06            [12] 1214 	clr	_PR2
                                   1215 ;	fire_alarm_panel.c:401: BLT1 = 30;
      000450 75*00 1E         [24] 1216 	mov	_BLT1,#0x1e
                                   1217 ;	fire_alarm_panel.c:402: BL_TIMER = BL_TIMEOUT; // Start 5-minute countdown for normal condition
      000453 75*01 2C         [24] 1218 	mov	_BL_TIMER,#0x2c
      000456 75*02 01         [24] 1219 	mov	(_BL_TIMER + 1),#0x01
                                   1220 ;	fire_alarm_panel.c:403: RAP = 0;
      000459 75*03 00         [24] 1221 	mov	_RAP,#0x00
                                   1222 ;	fire_alarm_panel.c:404: BUZZER_COUNTER = 0; // Initialize buzzer counter
      00045C 75*05 00         [24] 1223 	mov	_BUZZER_COUNTER,#0x00
                                   1224 ;	fire_alarm_panel.c:405: }
      00045F 22               [24] 1225 	ret
                                   1226 ;------------------------------------------------------------
                                   1227 ;Allocation info for local variables in function 'prz1'
                                   1228 ;------------------------------------------------------------
                                   1229 ;	fire_alarm_panel.c:407: void prz1(void)
                                   1230 ;	-----------------------------------------
                                   1231 ;	 function prz1
                                   1232 ;	-----------------------------------------
      000460                       1233 _prz1:
                                   1234 ;	fire_alarm_panel.c:409: if(!Z1) {
      000460 20*00 12         [24] 1235 	jb	_Z1,00102$
                                   1236 ;	fire_alarm_panel.c:410: lcd_cmd(LINE1);
      000463 90r00r07         [24] 1237 	mov	dptr,#_LINE1
      000466 75 F0 80         [24] 1238 	mov	b, #0x80
      000469 12r06r31         [24] 1239 	lcall	_lcd_cmd
                                   1240 ;	fire_alarm_panel.c:411: lcd_disp(TZONE1);
      00046C 90r00r40         [24] 1241 	mov	dptr,#_TZONE1
      00046F 75 F0 80         [24] 1242 	mov	b, #0x80
      000472 12r06r85         [24] 1243 	lcall	_lcd_disp
      000475                       1244 00102$:
                                   1245 ;	fire_alarm_panel.c:415: if(!SHORT1) {
      000475 20 82 14         [24] 1246 	jb	_SHORT1,00112$
                                   1247 ;	fire_alarm_panel.c:416: lcd_cmd(LINE2);
      000478 90r00r0B         [24] 1248 	mov	dptr,#_LINE2
      00047B 75 F0 80         [24] 1249 	mov	b, #0x80
      00047E 12r06r31         [24] 1250 	lcall	_lcd_cmd
                                   1251 ;	fire_alarm_panel.c:417: lcd_disp(SHORT);
      000481 90r00r73         [24] 1252 	mov	dptr,#_SHORT
      000484 75 F0 80         [24] 1253 	mov	b, #0x80
      000487 12r06r85         [24] 1254 	lcall	_lcd_disp
      00048A 80 47            [24] 1255 	sjmp	00113$
      00048C                       1256 00112$:
                                   1257 ;	fire_alarm_panel.c:419: } else if(!FIRE1) {
      00048C 20 80 14         [24] 1258 	jb	_FIRE1,00109$
                                   1259 ;	fire_alarm_panel.c:420: lcd_cmd(LINE2);
      00048F 90r00r0B         [24] 1260 	mov	dptr,#_LINE2
      000492 75 F0 80         [24] 1261 	mov	b, #0x80
      000495 12r06r31         [24] 1262 	lcall	_lcd_cmd
                                   1263 ;	fire_alarm_panel.c:421: lcd_disp(FIRE);
      000498 90r00r62         [24] 1264 	mov	dptr,#_FIRE
      00049B 75 F0 80         [24] 1265 	mov	b, #0x80
      00049E 12r06r85         [24] 1266 	lcall	_lcd_disp
      0004A1 80 30            [24] 1267 	sjmp	00113$
      0004A3                       1268 00109$:
                                   1269 ;	fire_alarm_panel.c:423: } else if(!OPEN1) {
      0004A3 20 81 14         [24] 1270 	jb	_OPEN1,00106$
                                   1271 ;	fire_alarm_panel.c:424: lcd_cmd(LINE2);
      0004A6 90r00r0B         [24] 1272 	mov	dptr,#_LINE2
      0004A9 75 F0 80         [24] 1273 	mov	b, #0x80
      0004AC 12r06r31         [24] 1274 	lcall	_lcd_cmd
                                   1275 ;	fire_alarm_panel.c:425: lcd_disp(OPEN);
      0004AF 90r00r84         [24] 1276 	mov	dptr,#_OPEN
      0004B2 75 F0 80         [24] 1277 	mov	b, #0x80
      0004B5 12r06r85         [24] 1278 	lcall	_lcd_disp
      0004B8 80 19            [24] 1279 	sjmp	00113$
      0004BA                       1280 00106$:
                                   1281 ;	fire_alarm_panel.c:430: PR1 = 0;
                                   1282 ;	assignBit
      0004BA C2*05            [12] 1283 	clr	_PR1
                                   1284 ;	fire_alarm_panel.c:431: SLC1 = 0;
                                   1285 ;	assignBit
      0004BC C2*02            [12] 1286 	clr	_SLC1
                                   1287 ;	fire_alarm_panel.c:433: if(ZONE1) { // If zone is not isolated
      0004BE 30 A4 12         [24] 1288 	jnb	_ZONE1,00113$
                                   1289 ;	fire_alarm_panel.c:434: lcd_cmd(LINE2);
      0004C1 90r00r0B         [24] 1290 	mov	dptr,#_LINE2
      0004C4 75 F0 80         [24] 1291 	mov	b, #0x80
      0004C7 12r06r31         [24] 1292 	lcall	_lcd_cmd
                                   1293 ;	fire_alarm_panel.c:435: lcd_disp(ISO1H);
      0004CA 90r00rEA         [24] 1294 	mov	dptr,#_ISO1H
      0004CD 75 F0 80         [24] 1295 	mov	b, #0x80
      0004D0 12r06r85         [24] 1296 	lcall	_lcd_disp
      0004D3                       1297 00113$:
                                   1298 ;	fire_alarm_panel.c:439: delay1();
                                   1299 ;	fire_alarm_panel.c:440: }
      0004D3 02r06rFF         [24] 1300 	ljmp	_delay1
                                   1301 ;------------------------------------------------------------
                                   1302 ;Allocation info for local variables in function 'prz2'
                                   1303 ;------------------------------------------------------------
                                   1304 ;	fire_alarm_panel.c:442: void prz2(void)
                                   1305 ;	-----------------------------------------
                                   1306 ;	 function prz2
                                   1307 ;	-----------------------------------------
      0004D6                       1308 _prz2:
                                   1309 ;	fire_alarm_panel.c:444: if(!Z2) { // Fixed: should check Z2 for zone 2 testing
      0004D6 20*01 12         [24] 1310 	jb	_Z2,00102$
                                   1311 ;	fire_alarm_panel.c:445: lcd_cmd(LINE1);
      0004D9 90r00r07         [24] 1312 	mov	dptr,#_LINE1
      0004DC 75 F0 80         [24] 1313 	mov	b, #0x80
      0004DF 12r06r31         [24] 1314 	lcall	_lcd_cmd
                                   1315 ;	fire_alarm_panel.c:446: lcd_disp(TZONE2);
      0004E2 90r00r51         [24] 1316 	mov	dptr,#_TZONE2
      0004E5 75 F0 80         [24] 1317 	mov	b, #0x80
      0004E8 12r06r85         [24] 1318 	lcall	_lcd_disp
      0004EB                       1319 00102$:
                                   1320 ;	fire_alarm_panel.c:450: if(!SHORT2) {
      0004EB 20 85 14         [24] 1321 	jb	_SHORT2,00112$
                                   1322 ;	fire_alarm_panel.c:451: lcd_cmd(LINE2);
      0004EE 90r00r0B         [24] 1323 	mov	dptr,#_LINE2
      0004F1 75 F0 80         [24] 1324 	mov	b, #0x80
      0004F4 12r06r31         [24] 1325 	lcall	_lcd_cmd
                                   1326 ;	fire_alarm_panel.c:452: lcd_disp(SHORT);
      0004F7 90r00r73         [24] 1327 	mov	dptr,#_SHORT
      0004FA 75 F0 80         [24] 1328 	mov	b, #0x80
      0004FD 12r06r85         [24] 1329 	lcall	_lcd_disp
      000500 80 47            [24] 1330 	sjmp	00113$
      000502                       1331 00112$:
                                   1332 ;	fire_alarm_panel.c:454: } else if(!FIRE2) {
      000502 20 83 14         [24] 1333 	jb	_FIRE2,00109$
                                   1334 ;	fire_alarm_panel.c:455: lcd_cmd(LINE2);
      000505 90r00r0B         [24] 1335 	mov	dptr,#_LINE2
      000508 75 F0 80         [24] 1336 	mov	b, #0x80
      00050B 12r06r31         [24] 1337 	lcall	_lcd_cmd
                                   1338 ;	fire_alarm_panel.c:456: lcd_disp(FIRE);
      00050E 90r00r62         [24] 1339 	mov	dptr,#_FIRE
      000511 75 F0 80         [24] 1340 	mov	b, #0x80
      000514 12r06r85         [24] 1341 	lcall	_lcd_disp
      000517 80 30            [24] 1342 	sjmp	00113$
      000519                       1343 00109$:
                                   1344 ;	fire_alarm_panel.c:458: } else if(!OPEN2) {
      000519 20 84 14         [24] 1345 	jb	_OPEN2,00106$
                                   1346 ;	fire_alarm_panel.c:459: lcd_cmd(LINE2);
      00051C 90r00r0B         [24] 1347 	mov	dptr,#_LINE2
      00051F 75 F0 80         [24] 1348 	mov	b, #0x80
      000522 12r06r31         [24] 1349 	lcall	_lcd_cmd
                                   1350 ;	fire_alarm_panel.c:460: lcd_disp(OPEN);
      000525 90r00r84         [24] 1351 	mov	dptr,#_OPEN
      000528 75 F0 80         [24] 1352 	mov	b, #0x80
      00052B 12r06r85         [24] 1353 	lcall	_lcd_disp
      00052E 80 19            [24] 1354 	sjmp	00113$
      000530                       1355 00106$:
                                   1356 ;	fire_alarm_panel.c:465: PR2 = 0;
                                   1357 ;	assignBit
      000530 C2*06            [12] 1358 	clr	_PR2
                                   1359 ;	fire_alarm_panel.c:466: SLC2 = 0;
                                   1360 ;	assignBit
      000532 C2*03            [12] 1361 	clr	_SLC2
                                   1362 ;	fire_alarm_panel.c:468: if(ZONE2) { // If zone is not isolated
      000534 30 A5 12         [24] 1363 	jnb	_ZONE2,00113$
                                   1364 ;	fire_alarm_panel.c:469: lcd_cmd(LINE2);
      000537 90r00r0B         [24] 1365 	mov	dptr,#_LINE2
      00053A 75 F0 80         [24] 1366 	mov	b, #0x80
      00053D 12r06r31         [24] 1367 	lcall	_lcd_cmd
                                   1368 ;	fire_alarm_panel.c:470: lcd_disp(ISO2H);
      000540 90r00rFB         [24] 1369 	mov	dptr,#_ISO2H
      000543 75 F0 80         [24] 1370 	mov	b, #0x80
      000546 12r06r85         [24] 1371 	lcall	_lcd_disp
      000549                       1372 00113$:
                                   1373 ;	fire_alarm_panel.c:474: delay1();
                                   1374 ;	fire_alarm_panel.c:475: }
      000549 02r06rFF         [24] 1375 	ljmp	_delay1
                                   1376 ;------------------------------------------------------------
                                   1377 ;Allocation info for local variables in function 'receive'
                                   1378 ;------------------------------------------------------------
                                   1379 ;received_data Allocated to registers r7 
                                   1380 ;------------------------------------------------------------
                                   1381 ;	fire_alarm_panel.c:477: void receive(void)
                                   1382 ;	-----------------------------------------
                                   1383 ;	 function receive
                                   1384 ;	-----------------------------------------
      00054C                       1385 _receive:
                                   1386 ;	fire_alarm_panel.c:481: received_data = SBUF;
      00054C AF 99            [24] 1387 	mov	r7,_SBUF
                                   1388 ;	fire_alarm_panel.c:482: RI = 0;
                                   1389 ;	assignBit
      00054E C2 98            [12] 1390 	clr	_RI
                                   1391 ;	fire_alarm_panel.c:483: SBUF = received_data;
      000550 8F 99            [24] 1392 	mov	_SBUF,r7
                                   1393 ;	fire_alarm_panel.c:484: while(!TI);
      000552                       1394 00101$:
                                   1395 ;	fire_alarm_panel.c:485: TI = 0;
                                   1396 ;	assignBit
      000552 10 99 02         [24] 1397 	jbc	_TI,00281$
      000555 80 FB            [24] 1398 	sjmp	00101$
      000557                       1399 00281$:
                                   1400 ;	fire_alarm_panel.c:487: switch(received_data) {
      000557 BF 00 02         [24] 1401 	cjne	r7,#0x00,00282$
      00055A 80 32            [24] 1402 	sjmp	00106$
      00055C                       1403 00282$:
      00055C BF 01 02         [24] 1404 	cjne	r7,#0x01,00283$
      00055F 80 3C            [24] 1405 	sjmp	00110$
      000561                       1406 00283$:
      000561 BF 02 02         [24] 1407 	cjne	r7,#0x02,00284$
      000564 80 46            [24] 1408 	sjmp	00114$
      000566                       1409 00284$:
      000566 BF 03 02         [24] 1410 	cjne	r7,#0x03,00285$
      000569 80 55            [24] 1411 	sjmp	00122$
      00056B                       1412 00285$:
      00056B BF 40 02         [24] 1413 	cjne	r7,#0x40,00286$
      00056E 80 46            [24] 1414 	sjmp	00118$
      000570                       1415 00286$:
      000570 BF AA 02         [24] 1416 	cjne	r7,#0xaa,00287$
      000573 80 0A            [24] 1417 	sjmp	00104$
      000575                       1418 00287$:
      000575 BF BB 02         [24] 1419 	cjne	r7,#0xbb,00288$
      000578 80 0B            [24] 1420 	sjmp	00105$
      00057A                       1421 00288$:
                                   1422 ;	fire_alarm_panel.c:488: case 0xAA:
      00057A BF FF 5C         [24] 1423 	cjne	r7,#0xff,00130$
      00057D 80 50            [24] 1424 	sjmp	00126$
      00057F                       1425 00104$:
                                   1426 ;	fire_alarm_panel.c:489: send_data(P2);
      00057F 85 A0 82         [24] 1427 	mov	dpl, _P2
                                   1428 ;	fire_alarm_panel.c:490: break;
                                   1429 ;	fire_alarm_panel.c:492: case 0xBB:
      000582 02r05rE1         [24] 1430 	ljmp	_send_data
      000585                       1431 00105$:
                                   1432 ;	fire_alarm_panel.c:493: send_data(P0 | 0xC0);
      000585 74 C0            [12] 1433 	mov	a,#0xc0
      000587 45 80            [12] 1434 	orl	a,_P0
      000589 F5 82            [12] 1435 	mov	dpl,a
                                   1436 ;	fire_alarm_panel.c:494: break;
                                   1437 ;	fire_alarm_panel.c:496: case 0x00:
      00058B 02r05rE1         [24] 1438 	ljmp	_send_data
      00058E                       1439 00106$:
                                   1440 ;	fire_alarm_panel.c:497: silence_alarms();
      00058E C0 07            [24] 1441 	push	ar7
      000590 12r05rEA         [24] 1442 	lcall	_silence_alarms
      000593 D0 07            [24] 1443 	pop	ar7
                                   1444 ;	fire_alarm_panel.c:498: SBUF = received_data;
      000595 8F 99            [24] 1445 	mov	_SBUF,r7
                                   1446 ;	fire_alarm_panel.c:499: while(!TI);
      000597                       1447 00107$:
                                   1448 ;	fire_alarm_panel.c:500: TI = 0;
                                   1449 ;	assignBit
      000597 10 99 02         [24] 1450 	jbc	_TI,00290$
      00059A 80 FB            [24] 1451 	sjmp	00107$
      00059C                       1452 00290$:
                                   1453 ;	fire_alarm_panel.c:501: break;
                                   1454 ;	fire_alarm_panel.c:503: case 0x01:
      00059C 22               [24] 1455 	ret
      00059D                       1456 00110$:
                                   1457 ;	fire_alarm_panel.c:504: silence_alarms();
      00059D C0 07            [24] 1458 	push	ar7
      00059F 12r05rEA         [24] 1459 	lcall	_silence_alarms
      0005A2 D0 07            [24] 1460 	pop	ar7
                                   1461 ;	fire_alarm_panel.c:505: SBUF = received_data;
      0005A4 8F 99            [24] 1462 	mov	_SBUF,r7
                                   1463 ;	fire_alarm_panel.c:506: while(!TI);
      0005A6                       1464 00111$:
                                   1465 ;	fire_alarm_panel.c:507: TI = 0;
                                   1466 ;	assignBit
      0005A6 10 99 02         [24] 1467 	jbc	_TI,00291$
      0005A9 80 FB            [24] 1468 	sjmp	00111$
      0005AB                       1469 00291$:
                                   1470 ;	fire_alarm_panel.c:508: break;
                                   1471 ;	fire_alarm_panel.c:510: case 0x02:
      0005AB 22               [24] 1472 	ret
      0005AC                       1473 00114$:
                                   1474 ;	fire_alarm_panel.c:511: EVQ = 0;
                                   1475 ;	assignBit
      0005AC C2 A1            [12] 1476 	clr	_EVQ
                                   1477 ;	fire_alarm_panel.c:512: SBUF = received_data;
      0005AE 8F 99            [24] 1478 	mov	_SBUF,r7
                                   1479 ;	fire_alarm_panel.c:513: while(!TI);
      0005B0                       1480 00115$:
                                   1481 ;	fire_alarm_panel.c:514: TI = 0;
                                   1482 ;	assignBit
      0005B0 10 99 02         [24] 1483 	jbc	_TI,00292$
      0005B3 80 FB            [24] 1484 	sjmp	00115$
      0005B5                       1485 00292$:
                                   1486 ;	fire_alarm_panel.c:515: break;
                                   1487 ;	fire_alarm_panel.c:517: case 0x40:
      0005B5 22               [24] 1488 	ret
      0005B6                       1489 00118$:
                                   1490 ;	fire_alarm_panel.c:518: Z2 = 1;
                                   1491 ;	assignBit
      0005B6 D2*01            [12] 1492 	setb	_Z2
                                   1493 ;	fire_alarm_panel.c:519: SBUF = received_data;
      0005B8 8F 99            [24] 1494 	mov	_SBUF,r7
                                   1495 ;	fire_alarm_panel.c:520: while(!TI);
      0005BA                       1496 00119$:
                                   1497 ;	fire_alarm_panel.c:521: TI = 0;
                                   1498 ;	assignBit
      0005BA 10 99 02         [24] 1499 	jbc	_TI,00293$
      0005BD 80 FB            [24] 1500 	sjmp	00119$
      0005BF                       1501 00293$:
                                   1502 ;	fire_alarm_panel.c:522: break;
                                   1503 ;	fire_alarm_panel.c:524: case 0x03:
      0005BF 22               [24] 1504 	ret
      0005C0                       1505 00122$:
                                   1506 ;	fire_alarm_panel.c:525: silence_alarms();
      0005C0 C0 07            [24] 1507 	push	ar7
      0005C2 12r05rEA         [24] 1508 	lcall	_silence_alarms
      0005C5 D0 07            [24] 1509 	pop	ar7
                                   1510 ;	fire_alarm_panel.c:526: SBUF = received_data;
      0005C7 8F 99            [24] 1511 	mov	_SBUF,r7
                                   1512 ;	fire_alarm_panel.c:527: while(!TI);
      0005C9                       1513 00123$:
                                   1514 ;	fire_alarm_panel.c:528: TI = 0;
                                   1515 ;	assignBit
      0005C9 10 99 02         [24] 1516 	jbc	_TI,00294$
      0005CC 80 FB            [24] 1517 	sjmp	00123$
      0005CE                       1518 00294$:
                                   1519 ;	fire_alarm_panel.c:529: break;
                                   1520 ;	fire_alarm_panel.c:531: case 0xFF:
      0005CE 22               [24] 1521 	ret
      0005CF                       1522 00126$:
                                   1523 ;	fire_alarm_panel.c:532: SBUF = received_data;
      0005CF 8F 99            [24] 1524 	mov	_SBUF,r7
                                   1525 ;	fire_alarm_panel.c:533: while(!TI);
      0005D1                       1526 00127$:
                                   1527 ;	fire_alarm_panel.c:534: TI = 0;
                                   1528 ;	assignBit
      0005D1 10 99 02         [24] 1529 	jbc	_TI,00295$
      0005D4 80 FB            [24] 1530 	sjmp	00127$
      0005D6                       1531 00295$:
                                   1532 ;	fire_alarm_panel.c:536: init_system();
                                   1533 ;	fire_alarm_panel.c:537: break;
                                   1534 ;	fire_alarm_panel.c:539: default:
      0005D6 02r04r1A         [24] 1535 	ljmp	_init_system
      0005D9                       1536 00130$:
                                   1537 ;	fire_alarm_panel.c:541: SBUF = received_data;
      0005D9 8F 99            [24] 1538 	mov	_SBUF,r7
                                   1539 ;	fire_alarm_panel.c:542: while(!TI);
      0005DB                       1540 00131$:
                                   1541 ;	fire_alarm_panel.c:543: TI = 0;
                                   1542 ;	assignBit
      0005DB 10 99 02         [24] 1543 	jbc	_TI,00296$
      0005DE 80 FB            [24] 1544 	sjmp	00131$
      0005E0                       1545 00296$:
                                   1546 ;	fire_alarm_panel.c:545: }
                                   1547 ;	fire_alarm_panel.c:546: }
      0005E0 22               [24] 1548 	ret
                                   1549 ;------------------------------------------------------------
                                   1550 ;Allocation info for local variables in function 'send_data'
                                   1551 ;------------------------------------------------------------
                                   1552 ;data          Allocated to registers 
                                   1553 ;------------------------------------------------------------
                                   1554 ;	fire_alarm_panel.c:548: void send_data(unsigned char data)
                                   1555 ;	-----------------------------------------
                                   1556 ;	 function send_data
                                   1557 ;	-----------------------------------------
      0005E1                       1558 _send_data:
      0005E1 85 82 99         [24] 1559 	mov	_SBUF,dpl
                                   1560 ;	fire_alarm_panel.c:551: while(!TI);
      0005E4                       1561 00101$:
                                   1562 ;	fire_alarm_panel.c:552: TI = 0;
                                   1563 ;	assignBit
      0005E4 10 99 02         [24] 1564 	jbc	_TI,00118$
      0005E7 80 FB            [24] 1565 	sjmp	00101$
      0005E9                       1566 00118$:
                                   1567 ;	fire_alarm_panel.c:553: }
      0005E9 22               [24] 1568 	ret
                                   1569 ;------------------------------------------------------------
                                   1570 ;Allocation info for local variables in function 'silence_alarms'
                                   1571 ;------------------------------------------------------------
                                   1572 ;	fire_alarm_panel.c:555: void silence_alarms(void)
                                   1573 ;	-----------------------------------------
                                   1574 ;	 function silence_alarms
                                   1575 ;	-----------------------------------------
      0005EA                       1576 _silence_alarms:
                                   1577 ;	fire_alarm_panel.c:557: SLC1 = 1;
                                   1578 ;	assignBit
      0005EA D2*02            [12] 1579 	setb	_SLC1
                                   1580 ;	fire_alarm_panel.c:558: SLC2 = 1;
                                   1581 ;	assignBit
      0005EC D2*03            [12] 1582 	setb	_SLC2
                                   1583 ;	fire_alarm_panel.c:559: LISO = 1;
                                   1584 ;	assignBit
      0005EE D2*04            [12] 1585 	setb	_LISO
                                   1586 ;	fire_alarm_panel.c:561: }
      0005F0 22               [24] 1587 	ret
                                   1588 ;------------------------------------------------------------
                                   1589 ;Allocation info for local variables in function 'spliter'
                                   1590 ;------------------------------------------------------------
                                   1591 ;data          Allocated to registers r7 
                                   1592 ;------------------------------------------------------------
                                   1593 ;	fire_alarm_panel.c:563: void spliter(unsigned char data)
                                   1594 ;	-----------------------------------------
                                   1595 ;	 function spliter
                                   1596 ;	-----------------------------------------
      0005F1                       1597 _spliter:
      0005F1 AF 82            [24] 1598 	mov	r7, dpl
                                   1599 ;	fire_alarm_panel.c:565: L = data & 0x0F;
      0005F3 74 0F            [12] 1600 	mov	a,#0x0f
      0005F5 5F               [12] 1601 	anl	a,r7
      0005F6 F5*07            [12] 1602 	mov	_L,a
                                   1603 ;	fire_alarm_panel.c:566: U = (data >> 4) & 0x0F;
      0005F8 EF               [12] 1604 	mov	a,r7
      0005F9 C4               [12] 1605 	swap	a
      0005FA 54 0F            [12] 1606 	anl	a,#0x0f
      0005FC F5*06            [12] 1607 	mov	_U,a
                                   1608 ;	fire_alarm_panel.c:567: }
      0005FE 22               [24] 1609 	ret
                                   1610 ;------------------------------------------------------------
                                   1611 ;Allocation info for local variables in function 'move'
                                   1612 ;------------------------------------------------------------
                                   1613 ;data          Allocated to registers r7 
                                   1614 ;------------------------------------------------------------
                                   1615 ;	fire_alarm_panel.c:569: void move(unsigned char data)
                                   1616 ;	-----------------------------------------
                                   1617 ;	 function move
                                   1618 ;	-----------------------------------------
      0005FF                       1619 _move:
      0005FF AF 82            [24] 1620 	mov	r7, dpl
                                   1621 ;	fire_alarm_panel.c:571: P1 = (P1_INDICATORS & 0xF0) | (data & 0x0F);  // Use shadow register for indicators
      000601 E5*04            [12] 1622 	mov	a,_P1_INDICATORS
      000603 54 F0            [12] 1623 	anl	a,#0xf0
      000605 FE               [12] 1624 	mov	r6,a
      000606 74 0F            [12] 1625 	mov	a,#0x0f
      000608 5F               [12] 1626 	anl	a,r7
      000609 4E               [12] 1627 	orl	a,r6
      00060A F5 90            [12] 1628 	mov	_P1,a
                                   1629 ;	fire_alarm_panel.c:572: EN = 1;
                                   1630 ;	assignBit
      00060C D2 87            [12] 1631 	setb	_EN
                                   1632 ;	fire_alarm_panel.c:573: delay();
      00060E 12r07r12         [24] 1633 	lcall	_delay
                                   1634 ;	fire_alarm_panel.c:574: EN = 0;
                                   1635 ;	assignBit
      000611 C2 87            [12] 1636 	clr	_EN
                                   1637 ;	fire_alarm_panel.c:575: delay();
                                   1638 ;	fire_alarm_panel.c:576: }
      000613 02r07r12         [24] 1639 	ljmp	_delay
                                   1640 ;------------------------------------------------------------
                                   1641 ;Allocation info for local variables in function 'move1'
                                   1642 ;------------------------------------------------------------
                                   1643 ;data          Allocated to registers r7 
                                   1644 ;------------------------------------------------------------
                                   1645 ;	fire_alarm_panel.c:578: void move1(unsigned char data)
                                   1646 ;	-----------------------------------------
                                   1647 ;	 function move1
                                   1648 ;	-----------------------------------------
      000616                       1649 _move1:
      000616 AF 82            [24] 1650 	mov	r7, dpl
                                   1651 ;	fire_alarm_panel.c:580: P1 = (P1_INDICATORS & 0xF0) | (data & 0x0F);  // Use shadow register for indicators
      000618 E5*04            [12] 1652 	mov	a,_P1_INDICATORS
      00061A 54 F0            [12] 1653 	anl	a,#0xf0
      00061C FE               [12] 1654 	mov	r6,a
      00061D 74 0F            [12] 1655 	mov	a,#0x0f
      00061F 5F               [12] 1656 	anl	a,r7
      000620 4E               [12] 1657 	orl	a,r6
      000621 F5 90            [12] 1658 	mov	_P1,a
                                   1659 ;	fire_alarm_panel.c:581: EN = 1;
                                   1660 ;	assignBit
      000623 D2 87            [12] 1661 	setb	_EN
                                   1662 ;	fire_alarm_panel.c:585: __endasm;
      000625 00               [12] 1663 	nop
                                   1664 ;	fire_alarm_panel.c:586: EN = 0;
                                   1665 ;	assignBit
      000626 C2 87            [12] 1666 	clr	_EN
                                   1667 ;	fire_alarm_panel.c:596: __endasm;
      000628 00               [12] 1668 	nop
      000629 00               [12] 1669 	nop
      00062A 00               [12] 1670 	nop
      00062B 00               [12] 1671 	nop
      00062C 00               [12] 1672 	nop
      00062D 00               [12] 1673 	nop
      00062E 00               [12] 1674 	nop
      00062F 00               [12] 1675 	nop
                                   1676 ;	fire_alarm_panel.c:597: }
      000630 22               [24] 1677 	ret
                                   1678 ;------------------------------------------------------------
                                   1679 ;Allocation info for local variables in function 'lcd_cmd'
                                   1680 ;------------------------------------------------------------
                                   1681 ;cmd_ptr       Allocated to registers r5 r6 r7 
                                   1682 ;cmd           Allocated to registers r3 
                                   1683 ;i             Allocated to registers r4 
                                   1684 ;------------------------------------------------------------
                                   1685 ;	fire_alarm_panel.c:599: void lcd_cmd(unsigned char *cmd_ptr)
                                   1686 ;	-----------------------------------------
                                   1687 ;	 function lcd_cmd
                                   1688 ;	-----------------------------------------
      000631                       1689 _lcd_cmd:
      000631 AD 82            [24] 1690 	mov	r5, dpl
      000633 AE 83            [24] 1691 	mov	r6, dph
      000635 AF F0            [24] 1692 	mov	r7, b
                                   1693 ;	fire_alarm_panel.c:604: while((cmd = cmd_ptr[i]) != 0) {
      000637 7C 00            [12] 1694 	mov	r4,#0x00
      000639                       1695 00101$:
      000639 EC               [12] 1696 	mov	a,r4
      00063A 2D               [12] 1697 	add	a, r5
      00063B F9               [12] 1698 	mov	r1,a
      00063C E4               [12] 1699 	clr	a
      00063D 3E               [12] 1700 	addc	a, r6
      00063E FA               [12] 1701 	mov	r2,a
      00063F 8F 03            [24] 1702 	mov	ar3,r7
      000641 89 82            [24] 1703 	mov	dpl,r1
      000643 8A 83            [24] 1704 	mov	dph,r2
      000645 8B F0            [24] 1705 	mov	b,r3
      000647 12r00r00         [24] 1706 	lcall	__gptrget
      00064A FB               [12] 1707 	mov	r3,a
      00064B 60 26            [24] 1708 	jz	00104$
                                   1709 ;	fire_alarm_panel.c:605: i++;
      00064D 0C               [12] 1710 	inc	r4
                                   1711 ;	fire_alarm_panel.c:606: RS = 0;
                                   1712 ;	assignBit
      00064E C2 86            [12] 1713 	clr	_RS
                                   1714 ;	fire_alarm_panel.c:607: spliter(cmd);
      000650 8B 82            [24] 1715 	mov	dpl, r3
      000652 C0 07            [24] 1716 	push	ar7
      000654 C0 06            [24] 1717 	push	ar6
      000656 C0 05            [24] 1718 	push	ar5
      000658 C0 04            [24] 1719 	push	ar4
      00065A 12r05rF1         [24] 1720 	lcall	_spliter
                                   1721 ;	fire_alarm_panel.c:608: move(U);
      00065D 85*06 82         [24] 1722 	mov	dpl, _U
      000660 12r05rFF         [24] 1723 	lcall	_move
                                   1724 ;	fire_alarm_panel.c:609: move(L);
      000663 85*07 82         [24] 1725 	mov	dpl, _L
      000666 12r05rFF         [24] 1726 	lcall	_move
      000669 D0 04            [24] 1727 	pop	ar4
      00066B D0 05            [24] 1728 	pop	ar5
      00066D D0 06            [24] 1729 	pop	ar6
      00066F D0 07            [24] 1730 	pop	ar7
      000671 80 C6            [24] 1731 	sjmp	00101$
      000673                       1732 00104$:
                                   1733 ;	fire_alarm_panel.c:611: }
      000673 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'lcd_data'
                                   1737 ;------------------------------------------------------------
                                   1738 ;data          Allocated to registers 
                                   1739 ;------------------------------------------------------------
                                   1740 ;	fire_alarm_panel.c:613: void lcd_data(unsigned char data)
                                   1741 ;	-----------------------------------------
                                   1742 ;	 function lcd_data
                                   1743 ;	-----------------------------------------
      000674                       1744 _lcd_data:
                                   1745 ;	fire_alarm_panel.c:615: RS = 1;
                                   1746 ;	assignBit
      000674 D2 86            [12] 1747 	setb	_RS
                                   1748 ;	fire_alarm_panel.c:616: spliter(data);
      000676 12r05rF1         [24] 1749 	lcall	_spliter
                                   1750 ;	fire_alarm_panel.c:617: move1(U);
      000679 85*06 82         [24] 1751 	mov	dpl, _U
      00067C 12r06r16         [24] 1752 	lcall	_move1
                                   1753 ;	fire_alarm_panel.c:618: move1(L);
      00067F 85*07 82         [24] 1754 	mov	dpl, _L
                                   1755 ;	fire_alarm_panel.c:619: }
      000682 02r06r16         [24] 1756 	ljmp	_move1
                                   1757 ;------------------------------------------------------------
                                   1758 ;Allocation info for local variables in function 'lcd_disp'
                                   1759 ;------------------------------------------------------------
                                   1760 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1761 ;ch            Allocated to registers r3 
                                   1762 ;i             Allocated to registers r4 
                                   1763 ;------------------------------------------------------------
                                   1764 ;	fire_alarm_panel.c:621: void lcd_disp(unsigned char *text_ptr)
                                   1765 ;	-----------------------------------------
                                   1766 ;	 function lcd_disp
                                   1767 ;	-----------------------------------------
      000685                       1768 _lcd_disp:
      000685 AD 82            [24] 1769 	mov	r5, dpl
      000687 AE 83            [24] 1770 	mov	r6, dph
      000689 AF F0            [24] 1771 	mov	r7, b
                                   1772 ;	fire_alarm_panel.c:626: while((ch = text_ptr[i]) != 0) {
      00068B 7C 00            [12] 1773 	mov	r4,#0x00
      00068D                       1774 00101$:
      00068D EC               [12] 1775 	mov	a,r4
      00068E 2D               [12] 1776 	add	a, r5
      00068F F9               [12] 1777 	mov	r1,a
      000690 E4               [12] 1778 	clr	a
      000691 3E               [12] 1779 	addc	a, r6
      000692 FA               [12] 1780 	mov	r2,a
      000693 8F 03            [24] 1781 	mov	ar3,r7
      000695 89 82            [24] 1782 	mov	dpl,r1
      000697 8A 83            [24] 1783 	mov	dph,r2
      000699 8B F0            [24] 1784 	mov	b,r3
      00069B 12r00r00         [24] 1785 	lcall	__gptrget
      00069E FB               [12] 1786 	mov	r3,a
      00069F 60 18            [24] 1787 	jz	00104$
                                   1788 ;	fire_alarm_panel.c:627: i++;
      0006A1 0C               [12] 1789 	inc	r4
                                   1790 ;	fire_alarm_panel.c:628: lcd_data(ch);
      0006A2 8B 82            [24] 1791 	mov	dpl, r3
      0006A4 C0 07            [24] 1792 	push	ar7
      0006A6 C0 06            [24] 1793 	push	ar6
      0006A8 C0 05            [24] 1794 	push	ar5
      0006AA C0 04            [24] 1795 	push	ar4
      0006AC 12r06r74         [24] 1796 	lcall	_lcd_data
      0006AF D0 04            [24] 1797 	pop	ar4
      0006B1 D0 05            [24] 1798 	pop	ar5
      0006B3 D0 06            [24] 1799 	pop	ar6
      0006B5 D0 07            [24] 1800 	pop	ar7
      0006B7 80 D4            [24] 1801 	sjmp	00101$
      0006B9                       1802 00104$:
                                   1803 ;	fire_alarm_panel.c:630: }
      0006B9 22               [24] 1804 	ret
                                   1805 ;------------------------------------------------------------
                                   1806 ;Allocation info for local variables in function 'lcd_disp1'
                                   1807 ;------------------------------------------------------------
                                   1808 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1809 ;ch            Allocated to registers r3 
                                   1810 ;i             Allocated to registers r4 
                                   1811 ;------------------------------------------------------------
                                   1812 ;	fire_alarm_panel.c:632: void lcd_disp1(unsigned char *text_ptr)
                                   1813 ;	-----------------------------------------
                                   1814 ;	 function lcd_disp1
                                   1815 ;	-----------------------------------------
      0006BA                       1816 _lcd_disp1:
      0006BA AD 82            [24] 1817 	mov	r5, dpl
      0006BC AE 83            [24] 1818 	mov	r6, dph
      0006BE AF F0            [24] 1819 	mov	r7, b
                                   1820 ;	fire_alarm_panel.c:637: while((ch = text_ptr[i]) != 0) {
      0006C0 7C 00            [12] 1821 	mov	r4,#0x00
      0006C2                       1822 00101$:
      0006C2 EC               [12] 1823 	mov	a,r4
      0006C3 2D               [12] 1824 	add	a, r5
      0006C4 F9               [12] 1825 	mov	r1,a
      0006C5 E4               [12] 1826 	clr	a
      0006C6 3E               [12] 1827 	addc	a, r6
      0006C7 FA               [12] 1828 	mov	r2,a
      0006C8 8F 03            [24] 1829 	mov	ar3,r7
      0006CA 89 82            [24] 1830 	mov	dpl,r1
      0006CC 8A 83            [24] 1831 	mov	dph,r2
      0006CE 8B F0            [24] 1832 	mov	b,r3
      0006D0 12r00r00         [24] 1833 	lcall	__gptrget
      0006D3 FB               [12] 1834 	mov	r3,a
      0006D4 60 1B            [24] 1835 	jz	00104$
                                   1836 ;	fire_alarm_panel.c:638: i++;
      0006D6 0C               [12] 1837 	inc	r4
                                   1838 ;	fire_alarm_panel.c:639: lcd_data(ch);
      0006D7 8B 82            [24] 1839 	mov	dpl, r3
      0006D9 C0 07            [24] 1840 	push	ar7
      0006DB C0 06            [24] 1841 	push	ar6
      0006DD C0 05            [24] 1842 	push	ar5
      0006DF C0 04            [24] 1843 	push	ar4
      0006E1 12r06r74         [24] 1844 	lcall	_lcd_data
                                   1845 ;	fire_alarm_panel.c:640: delay2();
      0006E4 12r06rF2         [24] 1846 	lcall	_delay2
      0006E7 D0 04            [24] 1847 	pop	ar4
      0006E9 D0 05            [24] 1848 	pop	ar5
      0006EB D0 06            [24] 1849 	pop	ar6
      0006ED D0 07            [24] 1850 	pop	ar7
      0006EF 80 D1            [24] 1851 	sjmp	00101$
      0006F1                       1852 00104$:
                                   1853 ;	fire_alarm_panel.c:642: }
      0006F1 22               [24] 1854 	ret
                                   1855 ;------------------------------------------------------------
                                   1856 ;Allocation info for local variables in function 'delay2'
                                   1857 ;------------------------------------------------------------
                                   1858 ;R5            Allocated to registers r7 
                                   1859 ;R6            Allocated to registers r5 
                                   1860 ;R7            Allocated to registers r6 
                                   1861 ;------------------------------------------------------------
                                   1862 ;	fire_alarm_panel.c:644: void delay2(void)
                                   1863 ;	-----------------------------------------
                                   1864 ;	 function delay2
                                   1865 ;	-----------------------------------------
      0006F2                       1866 _delay2:
                                   1867 ;	fire_alarm_panel.c:648: for(R5 = 1; R5 > 0; R5--) {
      0006F2 7F 01            [12] 1868 	mov	r7,#0x01
                                   1869 ;	fire_alarm_panel.c:649: for(R7 = 255; R7 > 0; R7--) {
      0006F4                       1870 00121$:
      0006F4 7E FF            [12] 1871 	mov	r6,#0xff
                                   1872 ;	fire_alarm_panel.c:650: for(R6 = 255; R6 > 0; R6--);
      0006F6                       1873 00119$:
      0006F6 7D FF            [12] 1874 	mov	r5,#0xff
      0006F8                       1875 00105$:
      0006F8 DD FE            [24] 1876 	djnz	r5,00105$
                                   1877 ;	fire_alarm_panel.c:649: for(R7 = 255; R7 > 0; R7--) {
      0006FA DE FA            [24] 1878 	djnz	r6,00119$
                                   1879 ;	fire_alarm_panel.c:648: for(R5 = 1; R5 > 0; R5--) {
      0006FC DF F6            [24] 1880 	djnz	r7,00121$
                                   1881 ;	fire_alarm_panel.c:653: }
      0006FE 22               [24] 1882 	ret
                                   1883 ;------------------------------------------------------------
                                   1884 ;Allocation info for local variables in function 'delay1'
                                   1885 ;------------------------------------------------------------
                                   1886 ;R5            Allocated to registers r7 
                                   1887 ;R6            Allocated to registers r5 
                                   1888 ;R7            Allocated to registers r6 
                                   1889 ;------------------------------------------------------------
                                   1890 ;	fire_alarm_panel.c:655: void delay1(void)
                                   1891 ;	-----------------------------------------
                                   1892 ;	 function delay1
                                   1893 ;	-----------------------------------------
      0006FF                       1894 _delay1:
                                   1895 ;	fire_alarm_panel.c:659: for(R5 = 8; R5 > 0; R5--) {
      0006FF 7F 08            [12] 1896 	mov	r7,#0x08
                                   1897 ;	fire_alarm_panel.c:660: for(R7 = 255; R7 > 0; R7--) {
      000701                       1898 00123$:
      000701 7E FF            [12] 1899 	mov	r6,#0xff
                                   1900 ;	fire_alarm_panel.c:661: for(R6 = 255; R6 > 0; R6--);
      000703                       1901 00121$:
      000703 7D FF            [12] 1902 	mov	r5,#0xff
      000705                       1903 00107$:
      000705 DD FE            [24] 1904 	djnz	r5,00107$
                                   1905 ;	fire_alarm_panel.c:660: for(R7 = 255; R7 > 0; R7--) {
      000707 DE FA            [24] 1906 	djnz	r6,00121$
                                   1907 ;	fire_alarm_panel.c:659: for(R5 = 8; R5 > 0; R5--) {
      000709 DF F6            [24] 1908 	djnz	r7,00123$
                                   1909 ;	fire_alarm_panel.c:665: if(RI) {
      00070B 30 98 03         [24] 1910 	jnb	_RI,00112$
                                   1911 ;	fire_alarm_panel.c:666: receive();
                                   1912 ;	fire_alarm_panel.c:668: }
      00070E 02r05r4C         [24] 1913 	ljmp	_receive
      000711                       1914 00112$:
      000711 22               [24] 1915 	ret
                                   1916 ;------------------------------------------------------------
                                   1917 ;Allocation info for local variables in function 'delay'
                                   1918 ;------------------------------------------------------------
                                   1919 ;R6            Allocated to registers r6 
                                   1920 ;R7            Allocated to registers r7 
                                   1921 ;------------------------------------------------------------
                                   1922 ;	fire_alarm_panel.c:670: void delay(void)
                                   1923 ;	-----------------------------------------
                                   1924 ;	 function delay
                                   1925 ;	-----------------------------------------
      000712                       1926 _delay:
                                   1927 ;	fire_alarm_panel.c:674: for(R7 = 7; R7 > 0; R7--) {
      000712 7F 07            [12] 1928 	mov	r7,#0x07
                                   1929 ;	fire_alarm_panel.c:675: for(R6 = 15; R6 > 0; R6--);
      000714                       1930 00114$:
      000714 7E 0F            [12] 1931 	mov	r6,#0x0f
      000716                       1932 00104$:
      000716 DE FE            [24] 1933 	djnz	r6,00104$
                                   1934 ;	fire_alarm_panel.c:674: for(R7 = 7; R7 > 0; R7--) {
      000718 DF FA            [24] 1935 	djnz	r7,00114$
                                   1936 ;	fire_alarm_panel.c:677: }
      00071A 22               [24] 1937 	ret
                                   1938 ;------------------------------------------------------------
                                   1939 ;Allocation info for local variables in function 'set_indicators'
                                   1940 ;------------------------------------------------------------
                                   1941 ;buz_on        Allocated with name '_set_indicators_PARM_2'
                                   1942 ;cflr_off      Allocated with name '_set_indicators_PARM_3'
                                   1943 ;cftlr_on      Allocated with name '_set_indicators_PARM_4'
                                   1944 ;hot_off       Allocated to registers r7 
                                   1945 ;hot_pin       Allocated to registers 
                                   1946 ;buz_pin       Allocated to registers r6 
                                   1947 ;cflr_pin      Allocated to registers r5 
                                   1948 ;cftlr_pin     Allocated to registers r4 
                                   1949 ;------------------------------------------------------------
                                   1950 ;	fire_alarm_panel.c:679: void set_indicators(unsigned char hot_off, unsigned char buz_on, unsigned char cflr_off, unsigned char cftlr_on)
                                   1951 ;	-----------------------------------------
                                   1952 ;	 function set_indicators
                                   1953 ;	-----------------------------------------
      00071B                       1954 _set_indicators:
      00071B AF 82            [24] 1955 	mov	r7, dpl
                                   1956 ;	fire_alarm_panel.c:689: unsigned char buz_pin = buz_on;       // BUZ: normal logic (1=ON, 0=OFF)  
      00071D AE*08            [24] 1957 	mov	r6,_set_indicators_PARM_2
                                   1958 ;	fire_alarm_panel.c:690: unsigned char cflr_pin = cflr_off;    // CFLR: inverse logic (1=OFF, 0=ON)
      00071F AD*09            [24] 1959 	mov	r5,_set_indicators_PARM_3
                                   1960 ;	fire_alarm_panel.c:691: unsigned char cftlr_pin = cftlr_on;   // CFTLR: normal logic (1=ON, 0=OFF)
      000721 AC*0A            [24] 1961 	mov	r4,_set_indicators_PARM_4
                                   1962 ;	fire_alarm_panel.c:694: P1_INDICATORS = (hot_pin << 4) | (buz_pin << 5) | (cflr_pin << 6) | (cftlr_pin << 7);
      000723 EF               [12] 1963 	mov	a,r7
      000724 C4               [12] 1964 	swap	a
      000725 54 F0            [12] 1965 	anl	a,#0xf0
      000727 FF               [12] 1966 	mov	r7,a
      000728 EE               [12] 1967 	mov	a,r6
      000729 C4               [12] 1968 	swap	a
      00072A 23               [12] 1969 	rl	a
      00072B 54 E0            [12] 1970 	anl	a,#0xe0
      00072D 42 07            [12] 1971 	orl	ar7,a
      00072F ED               [12] 1972 	mov	a,r5
      000730 03               [12] 1973 	rr	a
      000731 03               [12] 1974 	rr	a
      000732 54 C0            [12] 1975 	anl	a,#0xc0
      000734 42 07            [12] 1976 	orl	ar7,a
      000736 EC               [12] 1977 	mov	a,r4
      000737 03               [12] 1978 	rr	a
      000738 54 80            [12] 1979 	anl	a,#0x80
      00073A 4F               [12] 1980 	orl	a,r7
      00073B F5*04            [12] 1981 	mov	_P1_INDICATORS,a
                                   1982 ;	fire_alarm_panel.c:695: update_indicators();
                                   1983 ;	fire_alarm_panel.c:696: }
      00073D 02r07r40         [24] 1984 	ljmp	_update_indicators
                                   1985 ;------------------------------------------------------------
                                   1986 ;Allocation info for local variables in function 'update_indicators'
                                   1987 ;------------------------------------------------------------
                                   1988 ;	fire_alarm_panel.c:698: void update_indicators(void)
                                   1989 ;	-----------------------------------------
                                   1990 ;	 function update_indicators
                                   1991 ;	-----------------------------------------
      000740                       1992 _update_indicators:
                                   1993 ;	fire_alarm_panel.c:701: P1 = (P1 & 0x0F) | (P1_INDICATORS & 0xF0);
      000740 E5 90            [12] 1994 	mov	a,_P1
      000742 54 0F            [12] 1995 	anl	a,#0x0f
      000744 FF               [12] 1996 	mov	r7,a
      000745 E5*04            [12] 1997 	mov	a,_P1_INDICATORS
      000747 54 F0            [12] 1998 	anl	a,#0xf0
      000749 4F               [12] 1999 	orl	a,r7
      00074A F5 90            [12] 2000 	mov	_P1,a
                                   2001 ;	fire_alarm_panel.c:702: } 
      00074C 22               [24] 2002 	ret
                                   2003 	.area CSEG    (CODE)
                                   2004 	.area CONST   (CODE)
                                   2005 	.area CONST   (CODE)
      000000                       2006 _INIT_COMMANDS:
      000000 20                    2007 	.db #0x20	; 32
      000001 28                    2008 	.db #0x28	; 40
      000002 0C                    2009 	.db #0x0c	; 12
      000003 01                    2010 	.db #0x01	; 1
      000004 06                    2011 	.db #0x06	; 6
      000005 80                    2012 	.db #0x80	; 128
      000006 00                    2013 	.db #0x00	; 0
                                   2014 	.area CSEG    (CODE)
                                   2015 	.area CONST   (CODE)
      000007                       2016 _LINE1:
      000007 01                    2017 	.db #0x01	; 1
      000008 06                    2018 	.db #0x06	; 6
      000009 80                    2019 	.db #0x80	; 128
      00000A 00                    2020 	.db #0x00	; 0
                                   2021 	.area CSEG    (CODE)
                                   2022 	.area CONST   (CODE)
      00000B                       2023 _LINE2:
      00000B C0                    2024 	.db #0xc0	; 192
      00000C 00                    2025 	.db #0x00	; 0
                                   2026 	.area CSEG    (CODE)
                                   2027 	.area CONST   (CODE)
      00000D                       2028 _TEXT1:
      00000D 20 41 47 4E 49 20 50  2029 	.ascii " AGNI PROTECTION"
             52 4F 54 45 43 54 49
             4F 4E
      00001D 00                    2030 	.db 0x00
                                   2031 	.area CSEG    (CODE)
                                   2032 	.area CONST   (CODE)
      00001E                       2033 _TEXT2:
      00001E 20 57 45 4C 43 4F 4D  2034 	.ascii " WELCOME TO ...."
             45 20 54 4F 20 2E 2E
             2E 2E
      00002E 00                    2035 	.db 0x00
                                   2036 	.area CSEG    (CODE)
                                   2037 	.area CONST   (CODE)
      00002F                       2038 _TEXT3:
      00002F 46 49 52 45 20 41 4C  2039 	.ascii "FIRE ALARM PANEL"
             41 52 4D 20 50 41 4E
             45 4C
      00003F 00                    2040 	.db 0x00
                                   2041 	.area CSEG    (CODE)
                                   2042 	.area CONST   (CODE)
      000040                       2043 _TZONE1:
      000040 20 5A 4F 4E 45 20 2D  2044 	.ascii " ZONE - 01      "
             20 30 31 20 20 20 20
             20 20
      000050 00                    2045 	.db 0x00
                                   2046 	.area CSEG    (CODE)
                                   2047 	.area CONST   (CODE)
      000051                       2048 _TZONE2:
      000051 20 5A 4F 4E 45 20 2D  2049 	.ascii " ZONE - 02      "
             20 30 32 20 20 20 20
             20 20
      000061 00                    2050 	.db 0x00
                                   2051 	.area CSEG    (CODE)
                                   2052 	.area CONST   (CODE)
      000062                       2053 _FIRE:
      000062 20 46 49 52 45 20 44  2054 	.ascii " FIRE DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000072 00                    2055 	.db 0x00
                                   2056 	.area CSEG    (CODE)
                                   2057 	.area CONST   (CODE)
      000073                       2058 _SHORT:
      000073 20 53 48 4F 52 54 20  2059 	.ascii " SHORT DETECTED "
             44 45 54 45 43 54 45
             44 20
      000083 00                    2060 	.db 0x00
                                   2061 	.area CSEG    (CODE)
                                   2062 	.area CONST   (CODE)
      000084                       2063 _OPEN:
      000084 20 4F 50 45 4E 20 44  2064 	.ascii " OPEN DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000094 00                    2065 	.db 0x00
                                   2066 	.area CSEG    (CODE)
                                   2067 	.area CONST   (CODE)
      000095                       2068 _TEXT4:
      000095 20 41 4C 4C 20 54 48  2069 	.ascii " ALL THE AREA   "
             45 20 41 52 45 41 20
             20 20
      0000A5 00                    2070 	.db 0x00
                                   2071 	.area CSEG    (CODE)
                                   2072 	.area CONST   (CODE)
      0000A6                       2073 _TLAMP:
      0000A6 50 41 4E 45 4C 20 54  2074 	.ascii "PANEL TESTING ON"
             45 53 54 49 4E 47 20
             4F 4E
      0000B6 00                    2075 	.db 0x00
                                   2076 	.area CSEG    (CODE)
                                   2077 	.area CONST   (CODE)
      0000B7                       2078 _TEVQ:
      0000B7 20 50 4C 45 41 53 45  2079 	.ascii " PLEASE EVACUATE"
             20 45 56 41 43 55 41
             54 45
      0000C7 00                    2080 	.db 0x00
                                   2081 	.area CSEG    (CODE)
                                   2082 	.area CONST   (CODE)
      0000C8                       2083 _ISO1:
      0000C8 5A 4F 4E 45 2D 20 30  2084 	.ascii "ZONE- 01 ISOLATE"
             31 20 49 53 4F 4C 41
             54 45
      0000D8 00                    2085 	.db 0x00
                                   2086 	.area CSEG    (CODE)
                                   2087 	.area CONST   (CODE)
      0000D9                       2088 _ISO2:
      0000D9 5A 4F 4E 45 2D 20 30  2089 	.ascii "ZONE- 02 ISOLATE"
             32 20 49 53 4F 4C 41
             54 45
      0000E9 00                    2090 	.db 0x00
                                   2091 	.area CSEG    (CODE)
                                   2092 	.area CONST   (CODE)
      0000EA                       2093 _ISO1H:
      0000EA 5A 4F 4E 45 2D 20 30  2094 	.ascii "ZONE- 01 HEALTHY"
             31 20 48 45 41 4C 54
             48 59
      0000FA 00                    2095 	.db 0x00
                                   2096 	.area CSEG    (CODE)
                                   2097 	.area CONST   (CODE)
      0000FB                       2098 _ISO2H:
      0000FB 5A 4F 4E 45 2D 20 30  2099 	.ascii "ZONE- 02 HEALTHY"
             32 20 48 45 41 4C 54
             48 59
      00010B 00                    2100 	.db 0x00
                                   2101 	.area CSEG    (CODE)
                                   2102 	.area CONST   (CODE)
      00010C                       2103 _LOWB:
      00010C 20 20 42 41 54 54 45  2104 	.ascii "  BATTERY LOW   "
             52 59 20 4C 4F 57 20
             20 20
      00011C 00                    2105 	.db 0x00
                                   2106 	.area CSEG    (CODE)
                                   2107 	.area CONST   (CODE)
      00011D                       2108 _LOWM:
      00011D 20 43 48 45 43 4B 20  2109 	.ascii " CHECK AC SUPPLY"
             41 43 20 53 55 50 50
             4C 59
      00012D 00                    2110 	.db 0x00
                                   2111 	.area CSEG    (CODE)
                                   2112 	.area XINIT   (CODE)
                                   2113 	.area CABS    (ABS,CODE)
