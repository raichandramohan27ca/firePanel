                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module fire_alarm_panel
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LOWM
                                     12 	.globl _LOWB
                                     13 	.globl _ISO2H
                                     14 	.globl _ISO1H
                                     15 	.globl _ISO2
                                     16 	.globl _ISO1
                                     17 	.globl _TEVQ
                                     18 	.globl _TLAMP
                                     19 	.globl _TEXT4
                                     20 	.globl _OPEN
                                     21 	.globl _SHORT
                                     22 	.globl _FIRE
                                     23 	.globl _TZONE2
                                     24 	.globl _TZONE1
                                     25 	.globl _TEXT3
                                     26 	.globl _TEXT2
                                     27 	.globl _TEXT1
                                     28 	.globl _LINE2
                                     29 	.globl _LINE1
                                     30 	.globl _INIT_COMMANDS
                                     31 	.globl _main
                                     32 	.globl _SHORT2
                                     33 	.globl _OPEN2
                                     34 	.globl _FIRE2
                                     35 	.globl _SHORT1
                                     36 	.globl _OPEN1
                                     37 	.globl _FIRE1
                                     38 	.globl _CFTLR
                                     39 	.globl _CFLR
                                     40 	.globl _BUZ
                                     41 	.globl _HOT
                                     42 	.globl _EN
                                     43 	.globl _RS
                                     44 	.globl _EVQ
                                     45 	.globl _SIL
                                     46 	.globl _LAMP
                                     47 	.globl _LB
                                     48 	.globl _BL
                                     49 	.globl _ZONE2
                                     50 	.globl _ZONE1
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _TH2
                                    145 	.globl _TL2
                                    146 	.globl _RCAP2H
                                    147 	.globl _RCAP2L
                                    148 	.globl _T2CON
                                    149 	.globl _B
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _PR2
                                    171 	.globl _PR1
                                    172 	.globl _LISO
                                    173 	.globl _SLC2
                                    174 	.globl _SLC1
                                    175 	.globl _Z2
                                    176 	.globl _Z1
                                    177 	.globl _L
                                    178 	.globl _U
                                    179 	.globl _RAP
                                    180 	.globl _BL_TIMER
                                    181 	.globl _BLT1
                                    182 	.globl _init_system
                                    183 	.globl _prz1
                                    184 	.globl _prz2
                                    185 	.globl _receive
                                    186 	.globl _send_data
                                    187 	.globl _silence_alarms
                                    188 	.globl _spliter
                                    189 	.globl _move
                                    190 	.globl _move1
                                    191 	.globl _lcd_cmd
                                    192 	.globl _lcd_data
                                    193 	.globl _lcd_disp
                                    194 	.globl _lcd_disp1
                                    195 	.globl _delay2
                                    196 	.globl _delay1
                                    197 	.globl _delay
                                    198 ;--------------------------------------------------------
                                    199 ; special function registers
                                    200 ;--------------------------------------------------------
                                    201 	.area RSEG    (ABS,DATA)
      000000                        202 	.org 0x0000
                           000080   203 _P0	=	0x0080
                           000081   204 _SP	=	0x0081
                           000082   205 _DPL	=	0x0082
                           000083   206 _DPH	=	0x0083
                           000087   207 _PCON	=	0x0087
                           000088   208 _TCON	=	0x0088
                           000089   209 _TMOD	=	0x0089
                           00008A   210 _TL0	=	0x008a
                           00008B   211 _TL1	=	0x008b
                           00008C   212 _TH0	=	0x008c
                           00008D   213 _TH1	=	0x008d
                           000090   214 _P1	=	0x0090
                           000098   215 _SCON	=	0x0098
                           000099   216 _SBUF	=	0x0099
                           0000A0   217 _P2	=	0x00a0
                           0000A8   218 _IE	=	0x00a8
                           0000B0   219 _P3	=	0x00b0
                           0000B8   220 _IP	=	0x00b8
                           0000D0   221 _PSW	=	0x00d0
                           0000E0   222 _ACC	=	0x00e0
                           0000F0   223 _B	=	0x00f0
                           0000C8   224 _T2CON	=	0x00c8
                           0000CA   225 _RCAP2L	=	0x00ca
                           0000CB   226 _RCAP2H	=	0x00cb
                           0000CC   227 _TL2	=	0x00cc
                           0000CD   228 _TH2	=	0x00cd
                                    229 ;--------------------------------------------------------
                                    230 ; special function bits
                                    231 ;--------------------------------------------------------
                                    232 	.area RSEG    (ABS,DATA)
      000000                        233 	.org 0x0000
                           000080   234 _P0_0	=	0x0080
                           000081   235 _P0_1	=	0x0081
                           000082   236 _P0_2	=	0x0082
                           000083   237 _P0_3	=	0x0083
                           000084   238 _P0_4	=	0x0084
                           000085   239 _P0_5	=	0x0085
                           000086   240 _P0_6	=	0x0086
                           000087   241 _P0_7	=	0x0087
                           000088   242 _IT0	=	0x0088
                           000089   243 _IE0	=	0x0089
                           00008A   244 _IT1	=	0x008a
                           00008B   245 _IE1	=	0x008b
                           00008C   246 _TR0	=	0x008c
                           00008D   247 _TF0	=	0x008d
                           00008E   248 _TR1	=	0x008e
                           00008F   249 _TF1	=	0x008f
                           000090   250 _P1_0	=	0x0090
                           000091   251 _P1_1	=	0x0091
                           000092   252 _P1_2	=	0x0092
                           000093   253 _P1_3	=	0x0093
                           000094   254 _P1_4	=	0x0094
                           000095   255 _P1_5	=	0x0095
                           000096   256 _P1_6	=	0x0096
                           000097   257 _P1_7	=	0x0097
                           000098   258 _RI	=	0x0098
                           000099   259 _TI	=	0x0099
                           00009A   260 _RB8	=	0x009a
                           00009B   261 _TB8	=	0x009b
                           00009C   262 _REN	=	0x009c
                           00009D   263 _SM2	=	0x009d
                           00009E   264 _SM1	=	0x009e
                           00009F   265 _SM0	=	0x009f
                           0000A0   266 _P2_0	=	0x00a0
                           0000A1   267 _P2_1	=	0x00a1
                           0000A2   268 _P2_2	=	0x00a2
                           0000A3   269 _P2_3	=	0x00a3
                           0000A4   270 _P2_4	=	0x00a4
                           0000A5   271 _P2_5	=	0x00a5
                           0000A6   272 _P2_6	=	0x00a6
                           0000A7   273 _P2_7	=	0x00a7
                           0000A8   274 _EX0	=	0x00a8
                           0000A9   275 _ET0	=	0x00a9
                           0000AA   276 _EX1	=	0x00aa
                           0000AB   277 _ET1	=	0x00ab
                           0000AC   278 _ES	=	0x00ac
                           0000AF   279 _EA	=	0x00af
                           0000B0   280 _P3_0	=	0x00b0
                           0000B1   281 _P3_1	=	0x00b1
                           0000B2   282 _P3_2	=	0x00b2
                           0000B3   283 _P3_3	=	0x00b3
                           0000B4   284 _P3_4	=	0x00b4
                           0000B5   285 _P3_5	=	0x00b5
                           0000B6   286 _P3_6	=	0x00b6
                           0000B7   287 _P3_7	=	0x00b7
                           0000B0   288 _RXD	=	0x00b0
                           0000B1   289 _TXD	=	0x00b1
                           0000B2   290 _INT0	=	0x00b2
                           0000B3   291 _INT1	=	0x00b3
                           0000B4   292 _T0	=	0x00b4
                           0000B5   293 _T1	=	0x00b5
                           0000B6   294 _WR	=	0x00b6
                           0000B7   295 _RD	=	0x00b7
                           0000B8   296 _PX0	=	0x00b8
                           0000B9   297 _PT0	=	0x00b9
                           0000BA   298 _PX1	=	0x00ba
                           0000BB   299 _PT1	=	0x00bb
                           0000BC   300 _PS	=	0x00bc
                           0000D0   301 _P	=	0x00d0
                           0000D1   302 _F1	=	0x00d1
                           0000D2   303 _OV	=	0x00d2
                           0000D3   304 _RS0	=	0x00d3
                           0000D4   305 _RS1	=	0x00d4
                           0000D5   306 _F0	=	0x00d5
                           0000D6   307 _AC	=	0x00d6
                           0000D7   308 _CY	=	0x00d7
                           0000AD   309 _ET2	=	0x00ad
                           0000BD   310 _PT2	=	0x00bd
                           0000C8   311 _T2CON_0	=	0x00c8
                           0000C9   312 _T2CON_1	=	0x00c9
                           0000CA   313 _T2CON_2	=	0x00ca
                           0000CB   314 _T2CON_3	=	0x00cb
                           0000CC   315 _T2CON_4	=	0x00cc
                           0000CD   316 _T2CON_5	=	0x00cd
                           0000CE   317 _T2CON_6	=	0x00ce
                           0000CF   318 _T2CON_7	=	0x00cf
                           0000C8   319 _CP_RL2	=	0x00c8
                           0000C9   320 _C_T2	=	0x00c9
                           0000CA   321 _TR2	=	0x00ca
                           0000CB   322 _EXEN2	=	0x00cb
                           0000CC   323 _TCLK	=	0x00cc
                           0000CD   324 _RCLK	=	0x00cd
                           0000CE   325 _EXF2	=	0x00ce
                           0000CF   326 _TF2	=	0x00cf
                           0000A4   327 _ZONE1	=	0x00a4
                           0000A5   328 _ZONE2	=	0x00a5
                           0000A7   329 _BL	=	0x00a7
                           0000A2   330 _LB	=	0x00a2
                           0000A6   331 _LAMP	=	0x00a6
                           0000A0   332 _SIL	=	0x00a0
                           0000A1   333 _EVQ	=	0x00a1
                           000086   334 _RS	=	0x0086
                           000087   335 _EN	=	0x0087
                           000094   336 _HOT	=	0x0094
                           000095   337 _BUZ	=	0x0095
                           000096   338 _CFLR	=	0x0096
                           000097   339 _CFTLR	=	0x0097
                           000080   340 _FIRE1	=	0x0080
                           000081   341 _OPEN1	=	0x0081
                           000082   342 _SHORT1	=	0x0082
                           000083   343 _FIRE2	=	0x0083
                           000084   344 _OPEN2	=	0x0084
                           000085   345 _SHORT2	=	0x0085
                                    346 ;--------------------------------------------------------
                                    347 ; overlayable register banks
                                    348 ;--------------------------------------------------------
                                    349 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        350 	.ds 8
                                    351 ;--------------------------------------------------------
                                    352 ; internal ram data
                                    353 ;--------------------------------------------------------
                                    354 	.area DSEG    (DATA)
      000000                        355 _BLT1::
      000000                        356 	.ds 1
      000001                        357 _BL_TIMER::
      000001                        358 	.ds 2
      000003                        359 _RAP::
      000003                        360 	.ds 1
      000004                        361 _U::
      000004                        362 	.ds 1
      000005                        363 _L::
      000005                        364 	.ds 1
                                    365 ;--------------------------------------------------------
                                    366 ; overlayable items in internal ram
                                    367 ;--------------------------------------------------------
                                    368 	.area	OSEG    (OVR,DATA)
                                    369 	.area	OSEG    (OVR,DATA)
                                    370 	.area	OSEG    (OVR,DATA)
                                    371 	.area	OSEG    (OVR,DATA)
                                    372 	.area	OSEG    (OVR,DATA)
                                    373 ;--------------------------------------------------------
                                    374 ; Stack segment in internal ram
                                    375 ;--------------------------------------------------------
                                    376 	.area SSEG
      000000                        377 __start__stack:
      000000                        378 	.ds	1
                                    379 
                                    380 ;--------------------------------------------------------
                                    381 ; indirectly addressable internal ram data
                                    382 ;--------------------------------------------------------
                                    383 	.area ISEG    (DATA)
                                    384 ;--------------------------------------------------------
                                    385 ; absolute internal ram data
                                    386 ;--------------------------------------------------------
                                    387 	.area IABS    (ABS,DATA)
                                    388 	.area IABS    (ABS,DATA)
                                    389 ;--------------------------------------------------------
                                    390 ; bit data
                                    391 ;--------------------------------------------------------
                                    392 	.area BSEG    (BIT)
      000000                        393 _Z1::
      000000                        394 	.ds 1
      000001                        395 _Z2::
      000001                        396 	.ds 1
      000002                        397 _SLC1::
      000002                        398 	.ds 1
      000003                        399 _SLC2::
      000003                        400 	.ds 1
      000004                        401 _LISO::
      000004                        402 	.ds 1
      000005                        403 _PR1::
      000005                        404 	.ds 1
      000006                        405 _PR2::
      000006                        406 	.ds 1
                                    407 ;--------------------------------------------------------
                                    408 ; paged external ram data
                                    409 ;--------------------------------------------------------
                                    410 	.area PSEG    (PAG,XDATA)
                                    411 ;--------------------------------------------------------
                                    412 ; uninitialized external ram data
                                    413 ;--------------------------------------------------------
                                    414 	.area XSEG    (XDATA)
                                    415 ;--------------------------------------------------------
                                    416 ; absolute external ram data
                                    417 ;--------------------------------------------------------
                                    418 	.area XABS    (ABS,XDATA)
                                    419 ;--------------------------------------------------------
                                    420 ; initialized external ram data
                                    421 ;--------------------------------------------------------
                                    422 	.area XISEG   (XDATA)
                                    423 	.area HOME    (CODE)
                                    424 	.area GSINIT0 (CODE)
                                    425 	.area GSINIT1 (CODE)
                                    426 	.area GSINIT2 (CODE)
                                    427 	.area GSINIT3 (CODE)
                                    428 	.area GSINIT4 (CODE)
                                    429 	.area GSINIT5 (CODE)
                                    430 	.area GSINIT  (CODE)
                                    431 	.area GSFINAL (CODE)
                                    432 	.area CSEG    (CODE)
                                    433 ;--------------------------------------------------------
                                    434 ; interrupt vector
                                    435 ;--------------------------------------------------------
                                    436 	.area HOME    (CODE)
      000000                        437 __interrupt_vect:
      000000 02r00r00         [24]  438 	ljmp	__sdcc_gsinit_startup
                                    439 ; restartable atomic support routines
      000003                        440 	.ds	5
      000008                        441 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  442 	nop
      000009 00               [12]  443 	nop
      00000A                        444 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  445 	movx	a, @r0
      00000B FB               [12]  446 	mov	r3, a
      00000C EA               [12]  447 	mov	a, r2
      00000D F2               [24]  448 	movx	@r0, a
      00000E 80 2C            [24]  449 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  450 	nop
      000011 00               [12]  451 	nop
      000012                        452 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  453 	movx	a, @dptr
      000013 FB               [12]  454 	mov	r3, a
      000014 EA               [12]  455 	mov	a, r2
      000015 F0               [24]  456 	movx	@dptr, a
      000016 80 24            [24]  457 	sjmp	sdcc_atomic_exchange_exit
      000018                        458 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  459 	mov	a, @r0
      000019 B5 02 02         [24]  460 	cjne	a, ar2, .+#5
      00001C EB               [12]  461 	mov	a, r3
      00001D F6               [12]  462 	mov	@r0, a
      00001E 22               [24]  463 	ret
      00001F 00               [12]  464 	nop
      000020                        465 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  466 	movx	a, @r0
      000021 B5 02 02         [24]  467 	cjne	a, ar2, .+#5
      000024 EB               [12]  468 	mov	a, r3
      000025 F2               [24]  469 	movx	@r0, a
      000026 22               [24]  470 	ret
      000027 00               [12]  471 	nop
      000028                        472 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  473 	movx	a, @dptr
      000029 B5 02 02         [24]  474 	cjne	a, ar2, .+#5
      00002C EB               [12]  475 	mov	a, r3
      00002D F0               [24]  476 	movx	@dptr, a
      00002E 22               [24]  477 	ret
      00002F                        478 sdcc_atomic_exchange_rollback_end::
                                    479 
      00002F                        480 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  481 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  482 	mov	r0, dpl
      000034 20 F5 D3         [24]  483 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        484 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  485 	mov	a, r2
      000038 C6               [12]  486 	xch	a, @r0
      000039 F5 82            [12]  487 	mov	dpl, a
      00003B 22               [24]  488 	ret
      00003C                        489 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  490 	mov	dpl, r3
      00003E 22               [24]  491 	ret
      00003F                        492 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  493 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  494 	mov	r0, dpl
      000044 20 F5 D9         [24]  495 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  496 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    497 ;--------------------------------------------------------
                                    498 ; global & static initialisations
                                    499 ;--------------------------------------------------------
                                    500 	.area HOME    (CODE)
                                    501 	.area GSINIT  (CODE)
                                    502 	.area GSFINAL (CODE)
                                    503 	.area GSINIT  (CODE)
                                    504 	.globl __sdcc_gsinit_startup
                                    505 	.globl __sdcc_program_startup
                                    506 	.globl __start__stack
                                    507 	.globl __mcs51_genXINIT
                                    508 	.globl __mcs51_genXRAMCLEAR
                                    509 	.globl __mcs51_genRAMCLEAR
                                    510 ;	fire_alarm_panel.c:28: __bit Z1 = 0;          // ISO Zone 1
                                    511 ;	assignBit
      000000 C2*00            [12]  512 	clr	_Z1
                                    513 ;	fire_alarm_panel.c:29: __bit Z2 = 0;          // ISO Zone 2
                                    514 ;	assignBit
      000002 C2*01            [12]  515 	clr	_Z2
                                    516 ;	fire_alarm_panel.c:30: __bit SLC1 = 0;        // Silence Zone 1
                                    517 ;	assignBit
      000004 C2*02            [12]  518 	clr	_SLC1
                                    519 ;	fire_alarm_panel.c:31: __bit SLC2 = 0;        // Silence Zone 2
                                    520 ;	assignBit
      000006 C2*03            [12]  521 	clr	_SLC2
                                    522 ;	fire_alarm_panel.c:32: __bit LISO = 0;        // Low battery silence
                                    523 ;	assignBit
      000008 C2*04            [12]  524 	clr	_LISO
                                    525 ;	fire_alarm_panel.c:33: __bit PR1 = 0;         // Zone 1 Problem
                                    526 ;	assignBit
      00000A C2*05            [12]  527 	clr	_PR1
                                    528 ;	fire_alarm_panel.c:34: __bit PR2 = 0;         // Zone 2 Problem
                                    529 ;	assignBit
      00000C C2*06            [12]  530 	clr	_PR2
                                    531 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  532 	ljmp	__sdcc_program_startup
                                    533 ;--------------------------------------------------------
                                    534 ; Home
                                    535 ;--------------------------------------------------------
                                    536 	.area HOME    (CODE)
                                    537 	.area HOME    (CODE)
      000049                        538 __sdcc_program_startup:
      000049 02r00r00         [24]  539 	ljmp	_main
                                    540 ;	return from main will return to caller
                                    541 ;--------------------------------------------------------
                                    542 ; code
                                    543 ;--------------------------------------------------------
                                    544 	.area CSEG    (CODE)
                                    545 ;------------------------------------------------------------
                                    546 ;Allocation info for local variables in function 'main'
                                    547 ;------------------------------------------------------------
                                    548 ;R0            Allocated to registers r7 
                                    549 ;------------------------------------------------------------
                                    550 ;	fire_alarm_panel.c:86: void main(void)
                                    551 ;	-----------------------------------------
                                    552 ;	 function main
                                    553 ;	-----------------------------------------
      000000                        554 _main:
                           000007   555 	ar7 = 0x07
                           000006   556 	ar6 = 0x06
                           000005   557 	ar5 = 0x05
                           000004   558 	ar4 = 0x04
                           000003   559 	ar3 = 0x03
                           000002   560 	ar2 = 0x02
                           000001   561 	ar1 = 0x01
                           000000   562 	ar0 = 0x00
                                    563 ;	fire_alarm_panel.c:90: init_system();
      000000 12r02rEF         [24]  564 	lcall	_init_system
                                    565 ;	fire_alarm_panel.c:94: while(R0 < 15) {
      000003 7F 00            [12]  566 	mov	r7,#0x00
      000005                        567 00101$:
      000005 BF 0F 00         [24]  568 	cjne	r7,#0x0f,00539$
      000008                        569 00539$:
      000008 50 13            [24]  570 	jnc	00103$
                                    571 ;	fire_alarm_panel.c:95: lcd_cmd(INIT_COMMANDS);
      00000A 90r00r00         [24]  572 	mov	dptr,#_INIT_COMMANDS
      00000D 75 F0 80         [24]  573 	mov	b, #0x80
      000010 C0 07            [24]  574 	push	ar7
      000012 12r05r30         [24]  575 	lcall	_lcd_cmd
                                    576 ;	fire_alarm_panel.c:96: delay();
      000015 12r06r11         [24]  577 	lcall	_delay
      000018 D0 07            [24]  578 	pop	ar7
                                    579 ;	fire_alarm_panel.c:97: R0++;
      00001A 0F               [12]  580 	inc	r7
      00001B 80 E8            [24]  581 	sjmp	00101$
      00001D                        582 00103$:
                                    583 ;	fire_alarm_panel.c:101: lcd_cmd(LINE1);
      00001D 90r00r07         [24]  584 	mov	dptr,#_LINE1
      000020 75 F0 80         [24]  585 	mov	b, #0x80
      000023 12r05r30         [24]  586 	lcall	_lcd_cmd
                                    587 ;	fire_alarm_panel.c:102: lcd_disp(TEXT2);
      000026 90r00r1E         [24]  588 	mov	dptr,#_TEXT2
      000029 75 F0 80         [24]  589 	mov	b, #0x80
      00002C 12r05r84         [24]  590 	lcall	_lcd_disp
                                    591 ;	fire_alarm_panel.c:103: delay();
      00002F 12r06r11         [24]  592 	lcall	_delay
                                    593 ;	fire_alarm_panel.c:104: lcd_cmd(LINE2);
      000032 90r00r0B         [24]  594 	mov	dptr,#_LINE2
      000035 75 F0 80         [24]  595 	mov	b, #0x80
      000038 12r05r30         [24]  596 	lcall	_lcd_cmd
                                    597 ;	fire_alarm_panel.c:105: lcd_disp1(TEXT1);
      00003B 90r00r0D         [24]  598 	mov	dptr,#_TEXT1
      00003E 75 F0 80         [24]  599 	mov	b, #0x80
      000041 12r05rB9         [24]  600 	lcall	_lcd_disp1
                                    601 ;	fire_alarm_panel.c:107: while(1) {
      000044                        602 00204$:
                                    603 ;	fire_alarm_panel.c:109: if(RI) {
      000044 30 98 03         [24]  604 	jnb	_RI,00105$
                                    605 ;	fire_alarm_panel.c:110: receive();
      000047 12r04r4D         [24]  606 	lcall	_receive
      00004A                        607 00105$:
                                    608 ;	fire_alarm_panel.c:114: if (!PR1 && !PR2 && !LB && !LAMP && EVQ) { // Normal condition
      00004A 20*05 23         [24]  609 	jb	_PR1,00110$
      00004D 20*06 20         [24]  610 	jb	_PR2,00110$
      000050 20 A2 1D         [24]  611 	jb	_LB,00110$
      000053 20 A6 1A         [24]  612 	jb	_LAMP,00110$
      000056 30 A1 17         [24]  613 	jnb	_EVQ,00110$
                                    614 ;	fire_alarm_panel.c:115: if(BL_TIMER > 0) {
      000059 E5*01            [12]  615 	mov	a,_BL_TIMER
      00005B 45*02            [12]  616 	orl	a,(_BL_TIMER + 1)
      00005D 60 0D            [24]  617 	jz	00107$
                                    618 ;	fire_alarm_panel.c:116: BL_TIMER--;
      00005F 15*01            [12]  619 	dec	_BL_TIMER
      000061 74 FF            [12]  620 	mov	a,#0xff
      000063 B5*01 02         [24]  621 	cjne	a,_BL_TIMER,00548$
      000066 15*02            [12]  622 	dec	(_BL_TIMER + 1)
      000068                        623 00548$:
                                    624 ;	fire_alarm_panel.c:117: BL = 1; // Keep backlight ON for 5 minutes
                                    625 ;	assignBit
      000068 D2 A7            [12]  626 	setb	_BL
      00006A 80 0C            [24]  627 	sjmp	00111$
      00006C                        628 00107$:
                                    629 ;	fire_alarm_panel.c:119: BL = 0; // Turn OFF after 5 minutes
                                    630 ;	assignBit
      00006C C2 A7            [12]  631 	clr	_BL
      00006E 80 08            [24]  632 	sjmp	00111$
      000070                        633 00110$:
                                    634 ;	fire_alarm_panel.c:123: BL = 1;
                                    635 ;	assignBit
      000070 D2 A7            [12]  636 	setb	_BL
                                    637 ;	fire_alarm_panel.c:124: BL_TIMER = BL_TIMEOUT; // Reset timer when returning to normal
      000072 75*01 2C         [24]  638 	mov	_BL_TIMER,#0x2c
      000075 75*02 01         [24]  639 	mov	(_BL_TIMER + 1),#0x01
      000078                        640 00111$:
                                    641 ;	fire_alarm_panel.c:133: lcd_cmd(LINE1);
      000078 90r00r07         [24]  642 	mov	dptr,#_LINE1
      00007B 75 F0 80         [24]  643 	mov	b, #0x80
      00007E 12r05r30         [24]  644 	lcall	_lcd_cmd
                                    645 ;	fire_alarm_panel.c:134: lcd_disp(TEXT1);
      000081 90r00r0D         [24]  646 	mov	dptr,#_TEXT1
      000084 75 F0 80         [24]  647 	mov	b, #0x80
      000087 12r05r84         [24]  648 	lcall	_lcd_disp
                                    649 ;	fire_alarm_panel.c:136: if(RI) {
      00008A 30 98 03         [24]  650 	jnb	_RI,00117$
                                    651 ;	fire_alarm_panel.c:137: receive();
      00008D 12r04r4D         [24]  652 	lcall	_receive
      000090                        653 00117$:
                                    654 ;	fire_alarm_panel.c:141: if(!ZONE1) {
      000090 20 A4 21         [24]  655 	jb	_ZONE1,00130$
                                    656 ;	fire_alarm_panel.c:143: Z1 = 0; // Mark as healthy/not isolated
                                    657 ;	assignBit
      000093 C2*00            [12]  658 	clr	_Z1
                                    659 ;	fire_alarm_panel.c:144: PR1 = 0; // No problems
                                    660 ;	assignBit
      000095 C2*05            [12]  661 	clr	_PR1
                                    662 ;	fire_alarm_panel.c:145: lcd_cmd(LINE2);
      000097 90r00r0B         [24]  663 	mov	dptr,#_LINE2
      00009A 75 F0 80         [24]  664 	mov	b, #0x80
      00009D 12r05r30         [24]  665 	lcall	_lcd_cmd
                                    666 ;	fire_alarm_panel.c:146: lcd_disp(ISO1H); // Show "ZONE-01 HEALTHY"
      0000A0 90r00rEA         [24]  667 	mov	dptr,#_ISO1H
      0000A3 75 F0 80         [24]  668 	mov	b, #0x80
      0000A6 12r05r84         [24]  669 	lcall	_lcd_disp
                                    670 ;	fire_alarm_panel.c:147: delay1();
      0000A9 12r05rFE         [24]  671 	lcall	_delay1
                                    672 ;	fire_alarm_panel.c:148: if(RI) receive();
      0000AC 30 98 3C         [24]  673 	jnb	_RI,00131$
      0000AF 12r04r4D         [24]  674 	lcall	_receive
      0000B2 80 37            [24]  675 	sjmp	00131$
      0000B4                        676 00130$:
                                    677 ;	fire_alarm_panel.c:151: Z1 = 1; // Mark as isolated
                                    678 ;	assignBit
      0000B4 D2*00            [12]  679 	setb	_Z1
                                    680 ;	fire_alarm_panel.c:152: lcd_cmd(LINE2);
      0000B6 90r00r0B         [24]  681 	mov	dptr,#_LINE2
      0000B9 75 F0 80         [24]  682 	mov	b, #0x80
      0000BC 12r05r30         [24]  683 	lcall	_lcd_cmd
                                    684 ;	fire_alarm_panel.c:153: lcd_disp(ISO1); // Show "ZONE-01 ISOLATE"
      0000BF 90r00rC8         [24]  685 	mov	dptr,#_ISO1
      0000C2 75 F0 80         [24]  686 	mov	b, #0x80
      0000C5 12r05r84         [24]  687 	lcall	_lcd_disp
                                    688 ;	fire_alarm_panel.c:154: delay1();
      0000C8 12r05rFE         [24]  689 	lcall	_delay1
                                    690 ;	fire_alarm_panel.c:155: if(RI) receive();
      0000CB 30 98 03         [24]  691 	jnb	_RI,00121$
      0000CE 12r04r4D         [24]  692 	lcall	_receive
      0000D1                        693 00121$:
                                    694 ;	fire_alarm_panel.c:158: if(FIRE1 && OPEN1 && SHORT1) {
      0000D1 30 80 0C         [24]  695 	jnb	_FIRE1,00125$
      0000D4 30 81 09         [24]  696 	jnb	_OPEN1,00125$
      0000D7 30 82 06         [24]  697 	jnb	_SHORT1,00125$
                                    698 ;	fire_alarm_panel.c:160: PR1 = 0;
                                    699 ;	assignBit
      0000DA C2*05            [12]  700 	clr	_PR1
                                    701 ;	fire_alarm_panel.c:161: SLC1 = 0;
                                    702 ;	assignBit
      0000DC C2*02            [12]  703 	clr	_SLC1
      0000DE 80 0B            [24]  704 	sjmp	00131$
      0000E0                        705 00125$:
                                    706 ;	fire_alarm_panel.c:164: PR1 = 1;
                                    707 ;	assignBit
      0000E0 D2*05            [12]  708 	setb	_PR1
                                    709 ;	fire_alarm_panel.c:165: prz1();
      0000E2 12r03r2B         [24]  710 	lcall	_prz1
                                    711 ;	fire_alarm_panel.c:166: if(RI) receive();
      0000E5 30 98 03         [24]  712 	jnb	_RI,00131$
      0000E8 12r04r4D         [24]  713 	lcall	_receive
      0000EB                        714 00131$:
                                    715 ;	fire_alarm_panel.c:171: if(!ZONE2) {
      0000EB 20 A5 21         [24]  716 	jb	_ZONE2,00144$
                                    717 ;	fire_alarm_panel.c:173: Z2 = 0; // Mark as healthy/not isolated
                                    718 ;	assignBit
      0000EE C2*01            [12]  719 	clr	_Z2
                                    720 ;	fire_alarm_panel.c:174: PR2 = 0; // No problems
                                    721 ;	assignBit
      0000F0 C2*06            [12]  722 	clr	_PR2
                                    723 ;	fire_alarm_panel.c:175: lcd_cmd(LINE2);
      0000F2 90r00r0B         [24]  724 	mov	dptr,#_LINE2
      0000F5 75 F0 80         [24]  725 	mov	b, #0x80
      0000F8 12r05r30         [24]  726 	lcall	_lcd_cmd
                                    727 ;	fire_alarm_panel.c:176: lcd_disp(ISO2H); // Show "ZONE-02 HEALTHY"
      0000FB 90r00rFB         [24]  728 	mov	dptr,#_ISO2H
      0000FE 75 F0 80         [24]  729 	mov	b, #0x80
      000101 12r05r84         [24]  730 	lcall	_lcd_disp
                                    731 ;	fire_alarm_panel.c:177: delay1();
      000104 12r05rFE         [24]  732 	lcall	_delay1
                                    733 ;	fire_alarm_panel.c:178: if(RI) receive();
      000107 30 98 3C         [24]  734 	jnb	_RI,00145$
      00010A 12r04r4D         [24]  735 	lcall	_receive
      00010D 80 37            [24]  736 	sjmp	00145$
      00010F                        737 00144$:
                                    738 ;	fire_alarm_panel.c:181: Z2 = 1; // Mark as isolated
                                    739 ;	assignBit
      00010F D2*01            [12]  740 	setb	_Z2
                                    741 ;	fire_alarm_panel.c:182: lcd_cmd(LINE2);
      000111 90r00r0B         [24]  742 	mov	dptr,#_LINE2
      000114 75 F0 80         [24]  743 	mov	b, #0x80
      000117 12r05r30         [24]  744 	lcall	_lcd_cmd
                                    745 ;	fire_alarm_panel.c:183: lcd_disp(ISO2); // Show "ZONE-02 ISOLATE"
      00011A 90r00rD9         [24]  746 	mov	dptr,#_ISO2
      00011D 75 F0 80         [24]  747 	mov	b, #0x80
      000120 12r05r84         [24]  748 	lcall	_lcd_disp
                                    749 ;	fire_alarm_panel.c:184: delay1();
      000123 12r05rFE         [24]  750 	lcall	_delay1
                                    751 ;	fire_alarm_panel.c:185: if(RI) receive();
      000126 30 98 03         [24]  752 	jnb	_RI,00135$
      000129 12r04r4D         [24]  753 	lcall	_receive
      00012C                        754 00135$:
                                    755 ;	fire_alarm_panel.c:188: if(FIRE2 && OPEN2 && SHORT2) {
      00012C 30 83 0C         [24]  756 	jnb	_FIRE2,00139$
      00012F 30 84 09         [24]  757 	jnb	_OPEN2,00139$
      000132 30 85 06         [24]  758 	jnb	_SHORT2,00139$
                                    759 ;	fire_alarm_panel.c:190: PR2 = 0;
                                    760 ;	assignBit
      000135 C2*06            [12]  761 	clr	_PR2
                                    762 ;	fire_alarm_panel.c:191: SLC2 = 0;
                                    763 ;	assignBit
      000137 C2*03            [12]  764 	clr	_SLC2
      000139 80 0B            [24]  765 	sjmp	00145$
      00013B                        766 00139$:
                                    767 ;	fire_alarm_panel.c:194: PR2 = 1;
                                    768 ;	assignBit
      00013B D2*06            [12]  769 	setb	_PR2
                                    770 ;	fire_alarm_panel.c:195: prz2();
      00013D 12r03rBC         [24]  771 	lcall	_prz2
                                    772 ;	fire_alarm_panel.c:196: if(RI) receive();
      000140 30 98 03         [24]  773 	jnb	_RI,00145$
      000143 12r04r4D         [24]  774 	lcall	_receive
      000146                        775 00145$:
                                    776 ;	fire_alarm_panel.c:201: if(!ZONE1 && !ZONE2) {
      000146 20 A4 1E         [24]  777 	jb	_ZONE1,00149$
      000149 20 A5 1B         [24]  778 	jb	_ZONE2,00149$
                                    779 ;	fire_alarm_panel.c:202: lcd_cmd(LINE2);
      00014C 90r00r0B         [24]  780 	mov	dptr,#_LINE2
      00014F 75 F0 80         [24]  781 	mov	b, #0x80
      000152 12r05r30         [24]  782 	lcall	_lcd_cmd
                                    783 ;	fire_alarm_panel.c:203: lcd_disp(TEXT3);
      000155 90r00r2F         [24]  784 	mov	dptr,#_TEXT3
      000158 75 F0 80         [24]  785 	mov	b, #0x80
      00015B 12r05r84         [24]  786 	lcall	_lcd_disp
                                    787 ;	fire_alarm_panel.c:204: delay1();
      00015E 12r05rFE         [24]  788 	lcall	_delay1
                                    789 ;	fire_alarm_panel.c:205: if(RI) receive();
      000161 30 98 03         [24]  790 	jnb	_RI,00149$
      000164 12r04r4D         [24]  791 	lcall	_receive
      000167                        792 00149$:
                                    793 ;	fire_alarm_panel.c:209: if(!SIL) {
      000167 20 A0 03         [24]  794 	jb	_SIL,00152$
                                    795 ;	fire_alarm_panel.c:210: silence_alarms();
      00016A 12r04rEB         [24]  796 	lcall	_silence_alarms
      00016D                        797 00152$:
                                    798 ;	fire_alarm_panel.c:214: if(RI) receive();
      00016D 30 98 03         [24]  799 	jnb	_RI,00154$
      000170 12r04r4D         [24]  800 	lcall	_receive
      000173                        801 00154$:
                                    802 ;	fire_alarm_panel.c:216: if(!LAMP) { // Lamp test button pressed (active low)
      000173 20 A6 6E         [24]  803 	jb	_LAMP,00161$
                                    804 ;	fire_alarm_panel.c:218: lcd_cmd(LINE1);
      000176 90r00r07         [24]  805 	mov	dptr,#_LINE1
      000179 75 F0 80         [24]  806 	mov	b, #0x80
      00017C 12r05r30         [24]  807 	lcall	_lcd_cmd
                                    808 ;	fire_alarm_panel.c:219: lcd_disp(TLAMP);
      00017F 90r00rA6         [24]  809 	mov	dptr,#_TLAMP
      000182 75 F0 80         [24]  810 	mov	b, #0x80
      000185 12r05r84         [24]  811 	lcall	_lcd_disp
                                    812 ;	fire_alarm_panel.c:220: lcd_cmd(LINE2);
      000188 90r00r0B         [24]  813 	mov	dptr,#_LINE2
      00018B 75 F0 80         [24]  814 	mov	b, #0x80
      00018E 12r05r30         [24]  815 	lcall	_lcd_cmd
                                    816 ;	fire_alarm_panel.c:221: lcd_disp(TZONE1);
      000191 90r00r40         [24]  817 	mov	dptr,#_TZONE1
      000194 75 F0 80         [24]  818 	mov	b, #0x80
      000197 12r05r84         [24]  819 	lcall	_lcd_disp
                                    820 ;	fire_alarm_panel.c:222: delay1();
      00019A 12r05rFE         [24]  821 	lcall	_delay1
                                    822 ;	fire_alarm_panel.c:223: delay1();
      00019D 12r05rFE         [24]  823 	lcall	_delay1
                                    824 ;	fire_alarm_panel.c:226: CFLR = 0; CFTLR = 1; HOT = 0; BUZ = 1;  // CFLR and HOT use inverse logic
                                    825 ;	assignBit
      0001A0 C2 96            [12]  826 	clr	_CFLR
                                    827 ;	assignBit
      0001A2 D2 97            [12]  828 	setb	_CFTLR
                                    829 ;	assignBit
      0001A4 C2 94            [12]  830 	clr	_HOT
                                    831 ;	assignBit
      0001A6 D2 95            [12]  832 	setb	_BUZ
                                    833 ;	fire_alarm_panel.c:227: delay1();
      0001A8 12r05rFE         [24]  834 	lcall	_delay1
                                    835 ;	fire_alarm_panel.c:228: CFLR = 1; CFTLR = 0; HOT = 1; BUZ = 0;  // CFLR and HOT use inverse logic
                                    836 ;	assignBit
      0001AB D2 96            [12]  837 	setb	_CFLR
                                    838 ;	assignBit
      0001AD C2 97            [12]  839 	clr	_CFTLR
                                    840 ;	assignBit
      0001AF D2 94            [12]  841 	setb	_HOT
                                    842 ;	assignBit
      0001B1 C2 95            [12]  843 	clr	_BUZ
                                    844 ;	fire_alarm_panel.c:230: lcd_cmd(LINE2);
      0001B3 90r00r0B         [24]  845 	mov	dptr,#_LINE2
      0001B6 75 F0 80         [24]  846 	mov	b, #0x80
      0001B9 12r05r30         [24]  847 	lcall	_lcd_cmd
                                    848 ;	fire_alarm_panel.c:231: lcd_disp(TZONE2);
      0001BC 90r00r51         [24]  849 	mov	dptr,#_TZONE2
      0001BF 75 F0 80         [24]  850 	mov	b, #0x80
      0001C2 12r05r84         [24]  851 	lcall	_lcd_disp
                                    852 ;	fire_alarm_panel.c:232: delay1();
      0001C5 12r05rFE         [24]  853 	lcall	_delay1
                                    854 ;	fire_alarm_panel.c:235: CFLR = 0; CFTLR = 1; HOT = 0; BUZ = 1;  // CFLR and HOT use inverse logic
                                    855 ;	assignBit
      0001C8 C2 96            [12]  856 	clr	_CFLR
                                    857 ;	assignBit
      0001CA D2 97            [12]  858 	setb	_CFTLR
                                    859 ;	assignBit
      0001CC C2 94            [12]  860 	clr	_HOT
                                    861 ;	assignBit
      0001CE D2 95            [12]  862 	setb	_BUZ
                                    863 ;	fire_alarm_panel.c:236: delay1();
      0001D0 12r05rFE         [24]  864 	lcall	_delay1
                                    865 ;	fire_alarm_panel.c:237: CFLR = 1; CFTLR = 0; HOT = 1; BUZ = 0;  // CFLR and HOT use inverse logic
                                    866 ;	assignBit
      0001D3 D2 96            [12]  867 	setb	_CFLR
                                    868 ;	assignBit
      0001D5 C2 97            [12]  869 	clr	_CFTLR
                                    870 ;	assignBit
      0001D7 D2 94            [12]  871 	setb	_HOT
                                    872 ;	assignBit
      0001D9 C2 95            [12]  873 	clr	_BUZ
                                    874 ;	fire_alarm_panel.c:240: while(!LAMP);
      0001DB                        875 00155$:
      0001DB 30 A6 FD         [24]  876 	jnb	_LAMP,00155$
                                    877 ;	fire_alarm_panel.c:241: if(RI) receive();
      0001DE 30 98 03         [24]  878 	jnb	_RI,00161$
      0001E1 12r04r4D         [24]  879 	lcall	_receive
      0001E4                        880 00161$:
                                    881 ;	fire_alarm_panel.c:245: if(!EVQ) {
      0001E4 20 A1 45         [24]  882 	jb	_EVQ,00169$
                                    883 ;	fire_alarm_panel.c:246: BUZ = 1;
                                    884 ;	assignBit
      0001E7 D2 95            [12]  885 	setb	_BUZ
                                    886 ;	fire_alarm_panel.c:247: HOT = 0;    // Hooter ON during evacuate (inverse logic - pin LOW = Hooter ON)
                                    887 ;	assignBit
      0001E9 C2 94            [12]  888 	clr	_HOT
                                    889 ;	fire_alarm_panel.c:248: CFLR = 0;   // Fire LED ON during evacuate (inverse logic - pin LOW = LED ON)
                                    890 ;	assignBit
      0001EB C2 96            [12]  891 	clr	_CFLR
                                    892 ;	fire_alarm_panel.c:249: CFTLR = 0;  // Fault LED OFF during evacuate
                                    893 ;	assignBit
      0001ED C2 97            [12]  894 	clr	_CFTLR
                                    895 ;	fire_alarm_panel.c:250: lcd_cmd(LINE1);
      0001EF 90r00r07         [24]  896 	mov	dptr,#_LINE1
      0001F2 75 F0 80         [24]  897 	mov	b, #0x80
      0001F5 12r05r30         [24]  898 	lcall	_lcd_cmd
                                    899 ;	fire_alarm_panel.c:251: lcd_disp(TEVQ);
      0001F8 90r00rB7         [24]  900 	mov	dptr,#_TEVQ
      0001FB 75 F0 80         [24]  901 	mov	b, #0x80
      0001FE 12r05r84         [24]  902 	lcall	_lcd_disp
                                    903 ;	fire_alarm_panel.c:252: lcd_cmd(LINE2);
      000201 90r00r0B         [24]  904 	mov	dptr,#_LINE2
      000204 75 F0 80         [24]  905 	mov	b, #0x80
      000207 12r05r30         [24]  906 	lcall	_lcd_cmd
                                    907 ;	fire_alarm_panel.c:253: lcd_disp(TEXT4);
      00020A 90r00r95         [24]  908 	mov	dptr,#_TEXT4
      00020D 75 F0 80         [24]  909 	mov	b, #0x80
      000210 12r05r84         [24]  910 	lcall	_lcd_disp
                                    911 ;	fire_alarm_panel.c:256: while(!EVQ && !RI) {
      000213                        912 00163$:
      000213 20 A1 08         [24]  913 	jb	_EVQ,00165$
      000216 20 98 05         [24]  914 	jb	_RI,00165$
                                    915 ;	fire_alarm_panel.c:257: delay1();
      000219 12r05rFE         [24]  916 	lcall	_delay1
      00021C 80 F5            [24]  917 	sjmp	00163$
      00021E                        918 00165$:
                                    919 ;	fire_alarm_panel.c:260: if(RI) receive();
      00021E 30 98 03         [24]  920 	jnb	_RI,00167$
      000221 12r04r4D         [24]  921 	lcall	_receive
      000224                        922 00167$:
                                    923 ;	fire_alarm_panel.c:263: BUZ = 0;
                                    924 ;	assignBit
      000224 C2 95            [12]  925 	clr	_BUZ
                                    926 ;	fire_alarm_panel.c:264: HOT = 1;    // Hooter OFF (inverse logic - pin HIGH = Hooter OFF)
                                    927 ;	assignBit
      000226 D2 94            [12]  928 	setb	_HOT
                                    929 ;	fire_alarm_panel.c:265: CFLR = 1;   // Fire LED OFF (inverse logic - pin HIGH = LED OFF)
                                    930 ;	assignBit
      000228 D2 96            [12]  931 	setb	_CFLR
                                    932 ;	fire_alarm_panel.c:266: CFTLR = 0;
                                    933 ;	assignBit
      00022A C2 97            [12]  934 	clr	_CFTLR
      00022C                        935 00169$:
                                    936 ;	fire_alarm_panel.c:269: delay();
      00022C 12r06r11         [24]  937 	lcall	_delay
                                    938 ;	fire_alarm_panel.c:272: if(!PR1 && !PR2 && !LB) {
      00022F 20*05 2A         [24]  939 	jb	_PR1,00171$
      000232 20*06 27         [24]  940 	jb	_PR2,00171$
      000235 20 A2 24         [24]  941 	jb	_LB,00171$
                                    942 ;	fire_alarm_panel.c:273: lcd_cmd(LINE1);
      000238 90r00r07         [24]  943 	mov	dptr,#_LINE1
      00023B 75 F0 80         [24]  944 	mov	b, #0x80
      00023E 12r05r30         [24]  945 	lcall	_lcd_cmd
                                    946 ;	fire_alarm_panel.c:274: lcd_disp(TEXT1);
      000241 90r00r0D         [24]  947 	mov	dptr,#_TEXT1
      000244 75 F0 80         [24]  948 	mov	b, #0x80
      000247 12r05r84         [24]  949 	lcall	_lcd_disp
                                    950 ;	fire_alarm_panel.c:275: lcd_cmd(LINE2);
      00024A 90r00r0B         [24]  951 	mov	dptr,#_LINE2
      00024D 75 F0 80         [24]  952 	mov	b, #0x80
      000250 12r05r30         [24]  953 	lcall	_lcd_cmd
                                    954 ;	fire_alarm_panel.c:276: lcd_disp(TEXT3);
      000253 90r00r2F         [24]  955 	mov	dptr,#_TEXT3
      000256 75 F0 80         [24]  956 	mov	b, #0x80
      000259 12r05r84         [24]  957 	lcall	_lcd_disp
      00025C                        958 00171$:
                                    959 ;	fire_alarm_panel.c:280: if(!PR1 && !PR2 && !LB) {
      00025C 20*05 10         [24]  960 	jb	_PR1,00190$
      00025F 20*06 0D         [24]  961 	jb	_PR2,00190$
      000262 20 A2 0A         [24]  962 	jb	_LB,00190$
                                    963 ;	fire_alarm_panel.c:282: CFLR = 1;   // Fire LED OFF (inverse logic - pin HIGH = LED OFF)
                                    964 ;	assignBit
      000265 D2 96            [12]  965 	setb	_CFLR
                                    966 ;	fire_alarm_panel.c:283: CFTLR = 0;  // Fault LED OFF (normal logic - pin LOW = LED OFF)
                                    967 ;	assignBit
      000267 C2 97            [12]  968 	clr	_CFTLR
                                    969 ;	fire_alarm_panel.c:284: HOT = 1;    // Hooter OFF (inverse logic - pin HIGH = Hooter OFF)
                                    970 ;	assignBit
      000269 D2 94            [12]  971 	setb	_HOT
                                    972 ;	fire_alarm_panel.c:285: BUZ = 0;    // Buzzer OFF
                                    973 ;	assignBit
      00026B C2 95            [12]  974 	clr	_BUZ
      00026D 80 33            [24]  975 	sjmp	00191$
      00026F                        976 00190$:
                                    977 ;	fire_alarm_panel.c:288: if(PR1 || PR2) {
      00026F 20*05 03         [24]  978 	jb	_PR1,00184$
      000272 30*06 24         [24]  979 	jnb	_PR2,00185$
      000275                        980 00184$:
                                    981 ;	fire_alarm_panel.c:290: if((!FIRE1 && PR1) || (!FIRE2 && PR2)) {
      000275 20 80 03         [24]  982 	jb	_FIRE1,00183$
      000278 20*05 06         [24]  983 	jb	_PR1,00178$
      00027B                        984 00183$:
      00027B 20 83 15         [24]  985 	jb	_FIRE2,00179$
      00027E 30*06 12         [24]  986 	jnb	_PR2,00179$
      000281                        987 00178$:
                                    988 ;	fire_alarm_panel.c:292: CFLR = 0;   // Fire LED ON (inverse logic - pin LOW = LED ON)
                                    989 ;	assignBit
      000281 C2 96            [12]  990 	clr	_CFLR
                                    991 ;	fire_alarm_panel.c:293: CFTLR = 0;  // Fault LED OFF (not fault condition)
                                    992 ;	assignBit
      000283 C2 97            [12]  993 	clr	_CFTLR
                                    994 ;	fire_alarm_panel.c:294: if(!SLC1 && !SLC2) {
      000285 20*02 07         [24]  995 	jb	_SLC1,00175$
      000288 20*03 04         [24]  996 	jb	_SLC2,00175$
                                    997 ;	fire_alarm_panel.c:295: HOT = 0;    // Hooter ON (inverse logic - pin LOW = Hooter ON)
                                    998 ;	assignBit
      00028B C2 94            [12]  999 	clr	_HOT
      00028D 80 0A            [24] 1000 	sjmp	00185$
      00028F                       1001 00175$:
                                   1002 ;	fire_alarm_panel.c:297: HOT = 1;    // Hooter OFF if silenced
                                   1003 ;	assignBit
      00028F D2 94            [12] 1004 	setb	_HOT
      000291 80 06            [24] 1005 	sjmp	00185$
      000293                       1006 00179$:
                                   1007 ;	fire_alarm_panel.c:301: CFLR = 1;   // Fire LED OFF (inverse logic - pin HIGH = LED OFF)
                                   1008 ;	assignBit
      000293 D2 96            [12] 1009 	setb	_CFLR
                                   1010 ;	fire_alarm_panel.c:302: CFTLR = 1;  // Fault LED ON (normal logic - pin HIGH = LED ON)
                                   1011 ;	assignBit
      000295 D2 97            [12] 1012 	setb	_CFTLR
                                   1013 ;	fire_alarm_panel.c:303: HOT = 1;    // Hooter OFF (inverse logic - pin HIGH = Hooter OFF)
                                   1014 ;	assignBit
      000297 D2 94            [12] 1015 	setb	_HOT
      000299                       1016 00185$:
                                   1017 ;	fire_alarm_panel.c:307: if(LB) {
      000299 30 A2 06         [24] 1018 	jnb	_LB,00191$
                                   1019 ;	fire_alarm_panel.c:309: CFTLR = 1;  // Fault LED ON (normal logic - pin HIGH = LED ON)
                                   1020 ;	assignBit
      00029C D2 97            [12] 1021 	setb	_CFTLR
                                   1022 ;	fire_alarm_panel.c:310: CFLR = 1;   // Fire LED OFF (inverse logic - pin HIGH = LED OFF)
                                   1023 ;	assignBit
      00029E D2 96            [12] 1024 	setb	_CFLR
                                   1025 ;	fire_alarm_panel.c:311: HOT = 1;    // Hooter OFF (inverse logic - pin HIGH = Hooter OFF)
                                   1026 ;	assignBit
      0002A0 D2 94            [12] 1027 	setb	_HOT
      0002A2                       1028 00191$:
                                   1029 ;	fire_alarm_panel.c:318: if(LB) {  // Fixed: LB=1 means battery is low
      0002A2 30 A2 45         [24] 1030 	jnb	_LB,00201$
                                   1031 ;	fire_alarm_panel.c:320: CFTLR = 1;  // Fault LED ON for low battery
                                   1032 ;	assignBit
      0002A5 D2 97            [12] 1033 	setb	_CFTLR
                                   1034 ;	fire_alarm_panel.c:321: CFLR = 1;   // Fire LED OFF (not fire condition - inverse logic)
                                   1035 ;	assignBit
      0002A7 D2 96            [12] 1036 	setb	_CFLR
                                   1037 ;	fire_alarm_panel.c:322: if(!LISO) {
      0002A9 20*04 09         [24] 1038 	jb	_LISO,00197$
                                   1039 ;	fire_alarm_panel.c:323: BUZ = 1;
                                   1040 ;	assignBit
      0002AC D2 95            [12] 1041 	setb	_BUZ
                                   1042 ;	fire_alarm_panel.c:324: if(!SIL) {
      0002AE 20 A0 04         [24] 1043 	jb	_SIL,00197$
                                   1044 ;	fire_alarm_panel.c:326: LISO = 1;
                                   1045 ;	assignBit
      0002B1 D2*04            [12] 1046 	setb	_LISO
                                   1047 ;	fire_alarm_panel.c:327: BUZ = 0;
                                   1048 ;	assignBit
      0002B3 C2 95            [12] 1049 	clr	_BUZ
      0002B5                       1050 00197$:
                                   1051 ;	fire_alarm_panel.c:331: lcd_cmd(LINE1);
      0002B5 90r00r07         [24] 1052 	mov	dptr,#_LINE1
      0002B8 75 F0 80         [24] 1053 	mov	b, #0x80
      0002BB 12r05r30         [24] 1054 	lcall	_lcd_cmd
                                   1055 ;	fire_alarm_panel.c:332: lcd_disp(LOWB);
      0002BE 90r01r0C         [24] 1056 	mov	dptr,#_LOWB
      0002C1 75 F0 80         [24] 1057 	mov	b, #0x80
      0002C4 12r05r84         [24] 1058 	lcall	_lcd_disp
                                   1059 ;	fire_alarm_panel.c:333: lcd_cmd(LINE2);
      0002C7 90r00r0B         [24] 1060 	mov	dptr,#_LINE2
      0002CA 75 F0 80         [24] 1061 	mov	b, #0x80
      0002CD 12r05r30         [24] 1062 	lcall	_lcd_cmd
                                   1063 ;	fire_alarm_panel.c:334: lcd_disp(LOWM);
      0002D0 90r01r1D         [24] 1064 	mov	dptr,#_LOWM
      0002D3 75 F0 80         [24] 1065 	mov	b, #0x80
      0002D6 12r05r84         [24] 1066 	lcall	_lcd_disp
                                   1067 ;	fire_alarm_panel.c:335: delay1();
      0002D9 12r05rFE         [24] 1068 	lcall	_delay1
                                   1069 ;	fire_alarm_panel.c:336: delay1();
      0002DC 12r05rFE         [24] 1070 	lcall	_delay1
                                   1071 ;	fire_alarm_panel.c:338: if(LISO) {
      0002DF 20*04 03         [24] 1072 	jb	_LISO,00594$
      0002E2 02r00r44         [24] 1073 	ljmp	00204$
      0002E5                       1074 00594$:
                                   1075 ;	fire_alarm_panel.c:339: BUZ = 0; // Keep buzzer off if silenced
                                   1076 ;	assignBit
      0002E5 C2 95            [12] 1077 	clr	_BUZ
                                   1078 ;	fire_alarm_panel.c:343: continue;
      0002E7 02r00r44         [24] 1079 	ljmp	00204$
      0002EA                       1080 00201$:
                                   1081 ;	fire_alarm_panel.c:346: LISO = 0;
                                   1082 ;	assignBit
      0002EA C2*04            [12] 1083 	clr	_LISO
                                   1084 ;	fire_alarm_panel.c:350: }
      0002EC 02r00r44         [24] 1085 	ljmp	00204$
                                   1086 ;------------------------------------------------------------
                                   1087 ;Allocation info for local variables in function 'init_system'
                                   1088 ;------------------------------------------------------------
                                   1089 ;	fire_alarm_panel.c:352: void init_system(void)
                                   1090 ;	-----------------------------------------
                                   1091 ;	 function init_system
                                   1092 ;	-----------------------------------------
      0002EF                       1093 _init_system:
                                   1094 ;	fire_alarm_panel.c:355: P1 = 0x00; // All indicators OFF initially
      0002EF 75 90 00         [24] 1095 	mov	_P1,#0x00
                                   1096 ;	fire_alarm_panel.c:356: P0 = 0xFF;
      0002F2 75 80 FF         [24] 1097 	mov	_P0,#0xff
                                   1098 ;	fire_alarm_panel.c:357: P2 = 0xFF;
      0002F5 75 A0 FF         [24] 1099 	mov	_P2,#0xff
                                   1100 ;	fire_alarm_panel.c:358: P3 = 0xFF;
      0002F8 75 B0 FF         [24] 1101 	mov	_P3,#0xff
                                   1102 ;	fire_alarm_panel.c:361: CFLR = 1;   // Fire LED OFF (inverse logic - pin HIGH = LED OFF)
                                   1103 ;	assignBit
      0002FB D2 96            [12] 1104 	setb	_CFLR
                                   1105 ;	fire_alarm_panel.c:362: CFTLR = 0;  // Fault LED OFF (normal logic - pin LOW = LED OFF)
                                   1106 ;	assignBit
      0002FD C2 97            [12] 1107 	clr	_CFTLR
                                   1108 ;	fire_alarm_panel.c:363: HOT = 1;    // Hooter OFF (inverse logic - pin HIGH = Hooter OFF)
                                   1109 ;	assignBit
      0002FF D2 94            [12] 1110 	setb	_HOT
                                   1111 ;	fire_alarm_panel.c:364: BUZ = 0;    // Buzzer OFF
                                   1112 ;	assignBit
      000301 C2 95            [12] 1113 	clr	_BUZ
                                   1114 ;	fire_alarm_panel.c:365: BL = 1;     // Backlight ON initially (normal condition starts with BL ON)
                                   1115 ;	assignBit
      000303 D2 A7            [12] 1116 	setb	_BL
                                   1117 ;	fire_alarm_panel.c:368: LISO = 0;
                                   1118 ;	assignBit
      000305 C2*04            [12] 1119 	clr	_LISO
                                   1120 ;	fire_alarm_panel.c:369: SLC1 = 0;
                                   1121 ;	assignBit
      000307 C2*02            [12] 1122 	clr	_SLC1
                                   1123 ;	fire_alarm_panel.c:370: SLC2 = 0;
                                   1124 ;	assignBit
      000309 C2*03            [12] 1125 	clr	_SLC2
                                   1126 ;	fire_alarm_panel.c:371: Z1 = 0;
                                   1127 ;	assignBit
      00030B C2*00            [12] 1128 	clr	_Z1
                                   1129 ;	fire_alarm_panel.c:372: Z2 = 0;
                                   1130 ;	assignBit
      00030D C2*01            [12] 1131 	clr	_Z2
                                   1132 ;	fire_alarm_panel.c:373: PR1 = 0;
                                   1133 ;	assignBit
      00030F C2*05            [12] 1134 	clr	_PR1
                                   1135 ;	fire_alarm_panel.c:374: PR2 = 0;
                                   1136 ;	assignBit
      000311 C2*06            [12] 1137 	clr	_PR2
                                   1138 ;	fire_alarm_panel.c:376: BLT1 = 30;
      000313 75*00 1E         [24] 1139 	mov	_BLT1,#0x1e
                                   1140 ;	fire_alarm_panel.c:377: BL_TIMER = BL_TIMEOUT; // Start 5-minute countdown for normal condition
      000316 75*01 2C         [24] 1141 	mov	_BL_TIMER,#0x2c
      000319 75*02 01         [24] 1142 	mov	(_BL_TIMER + 1),#0x01
                                   1143 ;	fire_alarm_panel.c:378: RAP = 0;
      00031C 75*03 00         [24] 1144 	mov	_RAP,#0x00
                                   1145 ;	fire_alarm_panel.c:381: TMOD = 0x20;
      00031F 75 89 20         [24] 1146 	mov	_TMOD,#0x20
                                   1147 ;	fire_alarm_panel.c:382: TH1 = 253;  // -3 for 9600 baud
      000322 75 8D FD         [24] 1148 	mov	_TH1,#0xfd
                                   1149 ;	fire_alarm_panel.c:383: SCON = 0x50;
      000325 75 98 50         [24] 1150 	mov	_SCON,#0x50
                                   1151 ;	fire_alarm_panel.c:384: TR1 = 1;
                                   1152 ;	assignBit
      000328 D2 8E            [12] 1153 	setb	_TR1
                                   1154 ;	fire_alarm_panel.c:385: }
      00032A 22               [24] 1155 	ret
                                   1156 ;------------------------------------------------------------
                                   1157 ;Allocation info for local variables in function 'prz1'
                                   1158 ;------------------------------------------------------------
                                   1159 ;	fire_alarm_panel.c:387: void prz1(void)
                                   1160 ;	-----------------------------------------
                                   1161 ;	 function prz1
                                   1162 ;	-----------------------------------------
      00032B                       1163 _prz1:
                                   1164 ;	fire_alarm_panel.c:389: if(!Z1) {
      00032B 20*00 12         [24] 1165 	jb	_Z1,00102$
                                   1166 ;	fire_alarm_panel.c:390: lcd_cmd(LINE1);
      00032E 90r00r07         [24] 1167 	mov	dptr,#_LINE1
      000331 75 F0 80         [24] 1168 	mov	b, #0x80
      000334 12r05r30         [24] 1169 	lcall	_lcd_cmd
                                   1170 ;	fire_alarm_panel.c:391: lcd_disp(TZONE1);
      000337 90r00r40         [24] 1171 	mov	dptr,#_TZONE1
      00033A 75 F0 80         [24] 1172 	mov	b, #0x80
      00033D 12r05r84         [24] 1173 	lcall	_lcd_disp
      000340                       1174 00102$:
                                   1175 ;	fire_alarm_panel.c:395: if(!SHORT1) {
      000340 20 82 1D         [24] 1176 	jb	_SHORT1,00121$
                                   1177 ;	fire_alarm_panel.c:396: lcd_cmd(LINE2);
      000343 90r00r0B         [24] 1178 	mov	dptr,#_LINE2
      000346 75 F0 80         [24] 1179 	mov	b, #0x80
      000349 12r05r30         [24] 1180 	lcall	_lcd_cmd
                                   1181 ;	fire_alarm_panel.c:397: lcd_disp(SHORT);
      00034C 90r00r73         [24] 1182 	mov	dptr,#_SHORT
      00034F 75 F0 80         [24] 1183 	mov	b, #0x80
      000352 12r05r84         [24] 1184 	lcall	_lcd_disp
                                   1185 ;	fire_alarm_panel.c:399: if(!SLC1) {
      000355 20*02 04         [24] 1186 	jb	_SLC1,00104$
                                   1187 ;	fire_alarm_panel.c:400: BUZ = 1; // Buzzer ON if not silenced
                                   1188 ;	assignBit
      000358 D2 95            [12] 1189 	setb	_BUZ
      00035A 80 5D            [24] 1190 	sjmp	00122$
      00035C                       1191 00104$:
                                   1192 ;	fire_alarm_panel.c:402: BUZ = 0; // Buzzer OFF if silenced
                                   1193 ;	assignBit
      00035C C2 95            [12] 1194 	clr	_BUZ
      00035E 80 59            [24] 1195 	sjmp	00122$
      000360                       1196 00121$:
                                   1197 ;	fire_alarm_panel.c:404: } else if(!FIRE1) {
      000360 20 80 1D         [24] 1198 	jb	_FIRE1,00118$
                                   1199 ;	fire_alarm_panel.c:405: lcd_cmd(LINE2);
      000363 90r00r0B         [24] 1200 	mov	dptr,#_LINE2
      000366 75 F0 80         [24] 1201 	mov	b, #0x80
      000369 12r05r30         [24] 1202 	lcall	_lcd_cmd
                                   1203 ;	fire_alarm_panel.c:406: lcd_disp(FIRE);
      00036C 90r00r62         [24] 1204 	mov	dptr,#_FIRE
      00036F 75 F0 80         [24] 1205 	mov	b, #0x80
      000372 12r05r84         [24] 1206 	lcall	_lcd_disp
                                   1207 ;	fire_alarm_panel.c:408: if(!SLC1) {
      000375 20*02 04         [24] 1208 	jb	_SLC1,00107$
                                   1209 ;	fire_alarm_panel.c:409: BUZ = 1;  // Buzzer ON if not silenced
                                   1210 ;	assignBit
      000378 D2 95            [12] 1211 	setb	_BUZ
      00037A 80 3D            [24] 1212 	sjmp	00122$
      00037C                       1213 00107$:
                                   1214 ;	fire_alarm_panel.c:411: BUZ = 0;  // Buzzer OFF if silenced
                                   1215 ;	assignBit
      00037C C2 95            [12] 1216 	clr	_BUZ
      00037E 80 39            [24] 1217 	sjmp	00122$
      000380                       1218 00118$:
                                   1219 ;	fire_alarm_panel.c:413: } else if(!OPEN1) {
      000380 20 81 1D         [24] 1220 	jb	_OPEN1,00115$
                                   1221 ;	fire_alarm_panel.c:414: lcd_cmd(LINE2);
      000383 90r00r0B         [24] 1222 	mov	dptr,#_LINE2
      000386 75 F0 80         [24] 1223 	mov	b, #0x80
      000389 12r05r30         [24] 1224 	lcall	_lcd_cmd
                                   1225 ;	fire_alarm_panel.c:415: lcd_disp(OPEN);
      00038C 90r00r84         [24] 1226 	mov	dptr,#_OPEN
      00038F 75 F0 80         [24] 1227 	mov	b, #0x80
      000392 12r05r84         [24] 1228 	lcall	_lcd_disp
                                   1229 ;	fire_alarm_panel.c:417: if(!SLC1) {
      000395 20*02 04         [24] 1230 	jb	_SLC1,00110$
                                   1231 ;	fire_alarm_panel.c:418: BUZ = 1; // Buzzer ON if not silenced
                                   1232 ;	assignBit
      000398 D2 95            [12] 1233 	setb	_BUZ
      00039A 80 1D            [24] 1234 	sjmp	00122$
      00039C                       1235 00110$:
                                   1236 ;	fire_alarm_panel.c:420: BUZ = 0; // Buzzer OFF if silenced
                                   1237 ;	assignBit
      00039C C2 95            [12] 1238 	clr	_BUZ
      00039E 80 19            [24] 1239 	sjmp	00122$
      0003A0                       1240 00115$:
                                   1241 ;	fire_alarm_panel.c:425: PR1 = 0;
                                   1242 ;	assignBit
      0003A0 C2*05            [12] 1243 	clr	_PR1
                                   1244 ;	fire_alarm_panel.c:426: SLC1 = 0;
                                   1245 ;	assignBit
      0003A2 C2*02            [12] 1246 	clr	_SLC1
                                   1247 ;	fire_alarm_panel.c:428: if(ZONE1) { // If zone is not isolated
      0003A4 30 A4 12         [24] 1248 	jnb	_ZONE1,00122$
                                   1249 ;	fire_alarm_panel.c:429: lcd_cmd(LINE2);
      0003A7 90r00r0B         [24] 1250 	mov	dptr,#_LINE2
      0003AA 75 F0 80         [24] 1251 	mov	b, #0x80
      0003AD 12r05r30         [24] 1252 	lcall	_lcd_cmd
                                   1253 ;	fire_alarm_panel.c:430: lcd_disp(ISO1H);
      0003B0 90r00rEA         [24] 1254 	mov	dptr,#_ISO1H
      0003B3 75 F0 80         [24] 1255 	mov	b, #0x80
      0003B6 12r05r84         [24] 1256 	lcall	_lcd_disp
      0003B9                       1257 00122$:
                                   1258 ;	fire_alarm_panel.c:434: delay1();
                                   1259 ;	fire_alarm_panel.c:435: }
      0003B9 02r05rFE         [24] 1260 	ljmp	_delay1
                                   1261 ;------------------------------------------------------------
                                   1262 ;Allocation info for local variables in function 'prz2'
                                   1263 ;------------------------------------------------------------
                                   1264 ;	fire_alarm_panel.c:437: void prz2(void)
                                   1265 ;	-----------------------------------------
                                   1266 ;	 function prz2
                                   1267 ;	-----------------------------------------
      0003BC                       1268 _prz2:
                                   1269 ;	fire_alarm_panel.c:439: if(!Z2) { // Fixed: should check Z2 for zone 2 testing
      0003BC 20*01 12         [24] 1270 	jb	_Z2,00102$
                                   1271 ;	fire_alarm_panel.c:440: lcd_cmd(LINE1);
      0003BF 90r00r07         [24] 1272 	mov	dptr,#_LINE1
      0003C2 75 F0 80         [24] 1273 	mov	b, #0x80
      0003C5 12r05r30         [24] 1274 	lcall	_lcd_cmd
                                   1275 ;	fire_alarm_panel.c:441: lcd_disp(TZONE2);
      0003C8 90r00r51         [24] 1276 	mov	dptr,#_TZONE2
      0003CB 75 F0 80         [24] 1277 	mov	b, #0x80
      0003CE 12r05r84         [24] 1278 	lcall	_lcd_disp
      0003D1                       1279 00102$:
                                   1280 ;	fire_alarm_panel.c:445: if(!SHORT2) {
      0003D1 20 85 1D         [24] 1281 	jb	_SHORT2,00121$
                                   1282 ;	fire_alarm_panel.c:446: lcd_cmd(LINE2);
      0003D4 90r00r0B         [24] 1283 	mov	dptr,#_LINE2
      0003D7 75 F0 80         [24] 1284 	mov	b, #0x80
      0003DA 12r05r30         [24] 1285 	lcall	_lcd_cmd
                                   1286 ;	fire_alarm_panel.c:447: lcd_disp(SHORT);
      0003DD 90r00r73         [24] 1287 	mov	dptr,#_SHORT
      0003E0 75 F0 80         [24] 1288 	mov	b, #0x80
      0003E3 12r05r84         [24] 1289 	lcall	_lcd_disp
                                   1290 ;	fire_alarm_panel.c:449: if(!SLC2) {
      0003E6 20*03 04         [24] 1291 	jb	_SLC2,00104$
                                   1292 ;	fire_alarm_panel.c:450: BUZ = 1; // Buzzer ON if not silenced
                                   1293 ;	assignBit
      0003E9 D2 95            [12] 1294 	setb	_BUZ
      0003EB 80 5D            [24] 1295 	sjmp	00122$
      0003ED                       1296 00104$:
                                   1297 ;	fire_alarm_panel.c:452: BUZ = 0; // Buzzer OFF if silenced
                                   1298 ;	assignBit
      0003ED C2 95            [12] 1299 	clr	_BUZ
      0003EF 80 59            [24] 1300 	sjmp	00122$
      0003F1                       1301 00121$:
                                   1302 ;	fire_alarm_panel.c:454: } else if(!FIRE2) {
      0003F1 20 83 1D         [24] 1303 	jb	_FIRE2,00118$
                                   1304 ;	fire_alarm_panel.c:455: lcd_cmd(LINE2);
      0003F4 90r00r0B         [24] 1305 	mov	dptr,#_LINE2
      0003F7 75 F0 80         [24] 1306 	mov	b, #0x80
      0003FA 12r05r30         [24] 1307 	lcall	_lcd_cmd
                                   1308 ;	fire_alarm_panel.c:456: lcd_disp(FIRE);
      0003FD 90r00r62         [24] 1309 	mov	dptr,#_FIRE
      000400 75 F0 80         [24] 1310 	mov	b, #0x80
      000403 12r05r84         [24] 1311 	lcall	_lcd_disp
                                   1312 ;	fire_alarm_panel.c:458: if(!SLC2) {
      000406 20*03 04         [24] 1313 	jb	_SLC2,00107$
                                   1314 ;	fire_alarm_panel.c:459: BUZ = 1;  // Buzzer ON if not silenced
                                   1315 ;	assignBit
      000409 D2 95            [12] 1316 	setb	_BUZ
      00040B 80 3D            [24] 1317 	sjmp	00122$
      00040D                       1318 00107$:
                                   1319 ;	fire_alarm_panel.c:461: BUZ = 0;  // Buzzer OFF if silenced
                                   1320 ;	assignBit
      00040D C2 95            [12] 1321 	clr	_BUZ
      00040F 80 39            [24] 1322 	sjmp	00122$
      000411                       1323 00118$:
                                   1324 ;	fire_alarm_panel.c:463: } else if(!OPEN2) {
      000411 20 84 1D         [24] 1325 	jb	_OPEN2,00115$
                                   1326 ;	fire_alarm_panel.c:464: lcd_cmd(LINE2);
      000414 90r00r0B         [24] 1327 	mov	dptr,#_LINE2
      000417 75 F0 80         [24] 1328 	mov	b, #0x80
      00041A 12r05r30         [24] 1329 	lcall	_lcd_cmd
                                   1330 ;	fire_alarm_panel.c:465: lcd_disp(OPEN);
      00041D 90r00r84         [24] 1331 	mov	dptr,#_OPEN
      000420 75 F0 80         [24] 1332 	mov	b, #0x80
      000423 12r05r84         [24] 1333 	lcall	_lcd_disp
                                   1334 ;	fire_alarm_panel.c:467: if(!SLC2) {
      000426 20*03 04         [24] 1335 	jb	_SLC2,00110$
                                   1336 ;	fire_alarm_panel.c:468: BUZ = 1; // Buzzer ON if not silenced
                                   1337 ;	assignBit
      000429 D2 95            [12] 1338 	setb	_BUZ
      00042B 80 1D            [24] 1339 	sjmp	00122$
      00042D                       1340 00110$:
                                   1341 ;	fire_alarm_panel.c:470: BUZ = 0; // Buzzer OFF if silenced
                                   1342 ;	assignBit
      00042D C2 95            [12] 1343 	clr	_BUZ
      00042F 80 19            [24] 1344 	sjmp	00122$
      000431                       1345 00115$:
                                   1346 ;	fire_alarm_panel.c:475: PR2 = 0;
                                   1347 ;	assignBit
      000431 C2*06            [12] 1348 	clr	_PR2
                                   1349 ;	fire_alarm_panel.c:476: SLC2 = 0;
                                   1350 ;	assignBit
      000433 C2*03            [12] 1351 	clr	_SLC2
                                   1352 ;	fire_alarm_panel.c:478: if(ZONE2) { // If zone is not isolated
      000435 30 A5 12         [24] 1353 	jnb	_ZONE2,00122$
                                   1354 ;	fire_alarm_panel.c:479: lcd_cmd(LINE2);
      000438 90r00r0B         [24] 1355 	mov	dptr,#_LINE2
      00043B 75 F0 80         [24] 1356 	mov	b, #0x80
      00043E 12r05r30         [24] 1357 	lcall	_lcd_cmd
                                   1358 ;	fire_alarm_panel.c:480: lcd_disp(ISO2H);
      000441 90r00rFB         [24] 1359 	mov	dptr,#_ISO2H
      000444 75 F0 80         [24] 1360 	mov	b, #0x80
      000447 12r05r84         [24] 1361 	lcall	_lcd_disp
      00044A                       1362 00122$:
                                   1363 ;	fire_alarm_panel.c:484: delay1();
                                   1364 ;	fire_alarm_panel.c:485: }
      00044A 02r05rFE         [24] 1365 	ljmp	_delay1
                                   1366 ;------------------------------------------------------------
                                   1367 ;Allocation info for local variables in function 'receive'
                                   1368 ;------------------------------------------------------------
                                   1369 ;received_data Allocated to registers r7 
                                   1370 ;------------------------------------------------------------
                                   1371 ;	fire_alarm_panel.c:487: void receive(void)
                                   1372 ;	-----------------------------------------
                                   1373 ;	 function receive
                                   1374 ;	-----------------------------------------
      00044D                       1375 _receive:
                                   1376 ;	fire_alarm_panel.c:491: received_data = SBUF;
      00044D AF 99            [24] 1377 	mov	r7,_SBUF
                                   1378 ;	fire_alarm_panel.c:492: RI = 0;
                                   1379 ;	assignBit
      00044F C2 98            [12] 1380 	clr	_RI
                                   1381 ;	fire_alarm_panel.c:493: SBUF = received_data;
      000451 8F 99            [24] 1382 	mov	_SBUF,r7
                                   1383 ;	fire_alarm_panel.c:494: while(!TI);
      000453                       1384 00101$:
                                   1385 ;	fire_alarm_panel.c:495: TI = 0;
                                   1386 ;	assignBit
      000453 10 99 02         [24] 1387 	jbc	_TI,00281$
      000456 80 FB            [24] 1388 	sjmp	00101$
      000458                       1389 00281$:
                                   1390 ;	fire_alarm_panel.c:497: switch(received_data) {
      000458 BF 00 02         [24] 1391 	cjne	r7,#0x00,00282$
      00045B 80 32            [24] 1392 	sjmp	00106$
      00045D                       1393 00282$:
      00045D BF 01 02         [24] 1394 	cjne	r7,#0x01,00283$
      000460 80 3C            [24] 1395 	sjmp	00110$
      000462                       1396 00283$:
      000462 BF 02 02         [24] 1397 	cjne	r7,#0x02,00284$
      000465 80 46            [24] 1398 	sjmp	00114$
      000467                       1399 00284$:
      000467 BF 03 02         [24] 1400 	cjne	r7,#0x03,00285$
      00046A 80 55            [24] 1401 	sjmp	00122$
      00046C                       1402 00285$:
      00046C BF 40 02         [24] 1403 	cjne	r7,#0x40,00286$
      00046F 80 46            [24] 1404 	sjmp	00118$
      000471                       1405 00286$:
      000471 BF AA 02         [24] 1406 	cjne	r7,#0xaa,00287$
      000474 80 0A            [24] 1407 	sjmp	00104$
      000476                       1408 00287$:
      000476 BF BB 02         [24] 1409 	cjne	r7,#0xbb,00288$
      000479 80 0B            [24] 1410 	sjmp	00105$
      00047B                       1411 00288$:
                                   1412 ;	fire_alarm_panel.c:498: case 0xAA:
      00047B BF FF 5C         [24] 1413 	cjne	r7,#0xff,00130$
      00047E 80 50            [24] 1414 	sjmp	00126$
      000480                       1415 00104$:
                                   1416 ;	fire_alarm_panel.c:499: send_data(P2);
      000480 85 A0 82         [24] 1417 	mov	dpl, _P2
                                   1418 ;	fire_alarm_panel.c:500: break;
                                   1419 ;	fire_alarm_panel.c:502: case 0xBB:
      000483 02r04rE2         [24] 1420 	ljmp	_send_data
      000486                       1421 00105$:
                                   1422 ;	fire_alarm_panel.c:503: send_data(P0 | 0xC0);
      000486 74 C0            [12] 1423 	mov	a,#0xc0
      000488 45 80            [12] 1424 	orl	a,_P0
      00048A F5 82            [12] 1425 	mov	dpl,a
                                   1426 ;	fire_alarm_panel.c:504: break;
                                   1427 ;	fire_alarm_panel.c:506: case 0x00:
      00048C 02r04rE2         [24] 1428 	ljmp	_send_data
      00048F                       1429 00106$:
                                   1430 ;	fire_alarm_panel.c:507: silence_alarms();
      00048F C0 07            [24] 1431 	push	ar7
      000491 12r04rEB         [24] 1432 	lcall	_silence_alarms
      000494 D0 07            [24] 1433 	pop	ar7
                                   1434 ;	fire_alarm_panel.c:508: SBUF = received_data;
      000496 8F 99            [24] 1435 	mov	_SBUF,r7
                                   1436 ;	fire_alarm_panel.c:509: while(!TI);
      000498                       1437 00107$:
                                   1438 ;	fire_alarm_panel.c:510: TI = 0;
                                   1439 ;	assignBit
      000498 10 99 02         [24] 1440 	jbc	_TI,00290$
      00049B 80 FB            [24] 1441 	sjmp	00107$
      00049D                       1442 00290$:
                                   1443 ;	fire_alarm_panel.c:511: break;
                                   1444 ;	fire_alarm_panel.c:513: case 0x01:
      00049D 22               [24] 1445 	ret
      00049E                       1446 00110$:
                                   1447 ;	fire_alarm_panel.c:514: silence_alarms();
      00049E C0 07            [24] 1448 	push	ar7
      0004A0 12r04rEB         [24] 1449 	lcall	_silence_alarms
      0004A3 D0 07            [24] 1450 	pop	ar7
                                   1451 ;	fire_alarm_panel.c:515: SBUF = received_data;
      0004A5 8F 99            [24] 1452 	mov	_SBUF,r7
                                   1453 ;	fire_alarm_panel.c:516: while(!TI);
      0004A7                       1454 00111$:
                                   1455 ;	fire_alarm_panel.c:517: TI = 0;
                                   1456 ;	assignBit
      0004A7 10 99 02         [24] 1457 	jbc	_TI,00291$
      0004AA 80 FB            [24] 1458 	sjmp	00111$
      0004AC                       1459 00291$:
                                   1460 ;	fire_alarm_panel.c:518: break;
                                   1461 ;	fire_alarm_panel.c:520: case 0x02:
      0004AC 22               [24] 1462 	ret
      0004AD                       1463 00114$:
                                   1464 ;	fire_alarm_panel.c:521: EVQ = 0;
                                   1465 ;	assignBit
      0004AD C2 A1            [12] 1466 	clr	_EVQ
                                   1467 ;	fire_alarm_panel.c:522: SBUF = received_data;
      0004AF 8F 99            [24] 1468 	mov	_SBUF,r7
                                   1469 ;	fire_alarm_panel.c:523: while(!TI);
      0004B1                       1470 00115$:
                                   1471 ;	fire_alarm_panel.c:524: TI = 0;
                                   1472 ;	assignBit
      0004B1 10 99 02         [24] 1473 	jbc	_TI,00292$
      0004B4 80 FB            [24] 1474 	sjmp	00115$
      0004B6                       1475 00292$:
                                   1476 ;	fire_alarm_panel.c:525: break;
                                   1477 ;	fire_alarm_panel.c:527: case 0x40:
      0004B6 22               [24] 1478 	ret
      0004B7                       1479 00118$:
                                   1480 ;	fire_alarm_panel.c:528: Z2 = 1;
                                   1481 ;	assignBit
      0004B7 D2*01            [12] 1482 	setb	_Z2
                                   1483 ;	fire_alarm_panel.c:529: SBUF = received_data;
      0004B9 8F 99            [24] 1484 	mov	_SBUF,r7
                                   1485 ;	fire_alarm_panel.c:530: while(!TI);
      0004BB                       1486 00119$:
                                   1487 ;	fire_alarm_panel.c:531: TI = 0;
                                   1488 ;	assignBit
      0004BB 10 99 02         [24] 1489 	jbc	_TI,00293$
      0004BE 80 FB            [24] 1490 	sjmp	00119$
      0004C0                       1491 00293$:
                                   1492 ;	fire_alarm_panel.c:532: break;
                                   1493 ;	fire_alarm_panel.c:534: case 0x03:
      0004C0 22               [24] 1494 	ret
      0004C1                       1495 00122$:
                                   1496 ;	fire_alarm_panel.c:535: silence_alarms();
      0004C1 C0 07            [24] 1497 	push	ar7
      0004C3 12r04rEB         [24] 1498 	lcall	_silence_alarms
      0004C6 D0 07            [24] 1499 	pop	ar7
                                   1500 ;	fire_alarm_panel.c:536: SBUF = received_data;
      0004C8 8F 99            [24] 1501 	mov	_SBUF,r7
                                   1502 ;	fire_alarm_panel.c:537: while(!TI);
      0004CA                       1503 00123$:
                                   1504 ;	fire_alarm_panel.c:538: TI = 0;
                                   1505 ;	assignBit
      0004CA 10 99 02         [24] 1506 	jbc	_TI,00294$
      0004CD 80 FB            [24] 1507 	sjmp	00123$
      0004CF                       1508 00294$:
                                   1509 ;	fire_alarm_panel.c:539: break;
                                   1510 ;	fire_alarm_panel.c:541: case 0xFF:
      0004CF 22               [24] 1511 	ret
      0004D0                       1512 00126$:
                                   1513 ;	fire_alarm_panel.c:542: SBUF = received_data;
      0004D0 8F 99            [24] 1514 	mov	_SBUF,r7
                                   1515 ;	fire_alarm_panel.c:543: while(!TI);
      0004D2                       1516 00127$:
                                   1517 ;	fire_alarm_panel.c:544: TI = 0;
                                   1518 ;	assignBit
      0004D2 10 99 02         [24] 1519 	jbc	_TI,00295$
      0004D5 80 FB            [24] 1520 	sjmp	00127$
      0004D7                       1521 00295$:
                                   1522 ;	fire_alarm_panel.c:546: init_system();
                                   1523 ;	fire_alarm_panel.c:547: break;
                                   1524 ;	fire_alarm_panel.c:549: default:
      0004D7 02r02rEF         [24] 1525 	ljmp	_init_system
      0004DA                       1526 00130$:
                                   1527 ;	fire_alarm_panel.c:551: SBUF = received_data;
      0004DA 8F 99            [24] 1528 	mov	_SBUF,r7
                                   1529 ;	fire_alarm_panel.c:552: while(!TI);
      0004DC                       1530 00131$:
                                   1531 ;	fire_alarm_panel.c:553: TI = 0;
                                   1532 ;	assignBit
      0004DC 10 99 02         [24] 1533 	jbc	_TI,00296$
      0004DF 80 FB            [24] 1534 	sjmp	00131$
      0004E1                       1535 00296$:
                                   1536 ;	fire_alarm_panel.c:555: }
                                   1537 ;	fire_alarm_panel.c:556: }
      0004E1 22               [24] 1538 	ret
                                   1539 ;------------------------------------------------------------
                                   1540 ;Allocation info for local variables in function 'send_data'
                                   1541 ;------------------------------------------------------------
                                   1542 ;data          Allocated to registers 
                                   1543 ;------------------------------------------------------------
                                   1544 ;	fire_alarm_panel.c:558: void send_data(unsigned char data)
                                   1545 ;	-----------------------------------------
                                   1546 ;	 function send_data
                                   1547 ;	-----------------------------------------
      0004E2                       1548 _send_data:
      0004E2 85 82 99         [24] 1549 	mov	_SBUF,dpl
                                   1550 ;	fire_alarm_panel.c:561: while(!TI);
      0004E5                       1551 00101$:
                                   1552 ;	fire_alarm_panel.c:562: TI = 0;
                                   1553 ;	assignBit
      0004E5 10 99 02         [24] 1554 	jbc	_TI,00118$
      0004E8 80 FB            [24] 1555 	sjmp	00101$
      0004EA                       1556 00118$:
                                   1557 ;	fire_alarm_panel.c:563: }
      0004EA 22               [24] 1558 	ret
                                   1559 ;------------------------------------------------------------
                                   1560 ;Allocation info for local variables in function 'silence_alarms'
                                   1561 ;------------------------------------------------------------
                                   1562 ;	fire_alarm_panel.c:565: void silence_alarms(void)
                                   1563 ;	-----------------------------------------
                                   1564 ;	 function silence_alarms
                                   1565 ;	-----------------------------------------
      0004EB                       1566 _silence_alarms:
                                   1567 ;	fire_alarm_panel.c:567: SLC1 = 1;
                                   1568 ;	assignBit
      0004EB D2*02            [12] 1569 	setb	_SLC1
                                   1570 ;	fire_alarm_panel.c:568: SLC2 = 1;
                                   1571 ;	assignBit
      0004ED D2*03            [12] 1572 	setb	_SLC2
                                   1573 ;	fire_alarm_panel.c:569: LISO = 1;
                                   1574 ;	assignBit
      0004EF D2*04            [12] 1575 	setb	_LISO
                                   1576 ;	fire_alarm_panel.c:570: BUZ = 0;
                                   1577 ;	assignBit
      0004F1 C2 95            [12] 1578 	clr	_BUZ
                                   1579 ;	fire_alarm_panel.c:571: HOT = 1;    // Hooter OFF (inverse logic - pin HIGH = Hooter OFF)
                                   1580 ;	assignBit
      0004F3 D2 94            [12] 1581 	setb	_HOT
                                   1582 ;	fire_alarm_panel.c:572: }
      0004F5 22               [24] 1583 	ret
                                   1584 ;------------------------------------------------------------
                                   1585 ;Allocation info for local variables in function 'spliter'
                                   1586 ;------------------------------------------------------------
                                   1587 ;data          Allocated to registers r7 
                                   1588 ;------------------------------------------------------------
                                   1589 ;	fire_alarm_panel.c:574: void spliter(unsigned char data)
                                   1590 ;	-----------------------------------------
                                   1591 ;	 function spliter
                                   1592 ;	-----------------------------------------
      0004F6                       1593 _spliter:
      0004F6 AF 82            [24] 1594 	mov	r7, dpl
                                   1595 ;	fire_alarm_panel.c:576: L = data & 0x0F;
      0004F8 74 0F            [12] 1596 	mov	a,#0x0f
      0004FA 5F               [12] 1597 	anl	a,r7
      0004FB F5*05            [12] 1598 	mov	_L,a
                                   1599 ;	fire_alarm_panel.c:577: U = (data >> 4) & 0x0F;
      0004FD EF               [12] 1600 	mov	a,r7
      0004FE C4               [12] 1601 	swap	a
      0004FF 54 0F            [12] 1602 	anl	a,#0x0f
      000501 F5*04            [12] 1603 	mov	_U,a
                                   1604 ;	fire_alarm_panel.c:578: }
      000503 22               [24] 1605 	ret
                                   1606 ;------------------------------------------------------------
                                   1607 ;Allocation info for local variables in function 'move'
                                   1608 ;------------------------------------------------------------
                                   1609 ;data          Allocated to registers r7 
                                   1610 ;------------------------------------------------------------
                                   1611 ;	fire_alarm_panel.c:580: void move(unsigned char data)
                                   1612 ;	-----------------------------------------
                                   1613 ;	 function move
                                   1614 ;	-----------------------------------------
      000504                       1615 _move:
      000504 AF 82            [24] 1616 	mov	r7, dpl
                                   1617 ;	fire_alarm_panel.c:582: P1 = (P1 & 0xF0) | data;
      000506 E5 90            [12] 1618 	mov	a,_P1
      000508 54 F0            [12] 1619 	anl	a,#0xf0
      00050A 4F               [12] 1620 	orl	a,r7
      00050B F5 90            [12] 1621 	mov	_P1,a
                                   1622 ;	fire_alarm_panel.c:583: EN = 1;
                                   1623 ;	assignBit
      00050D D2 87            [12] 1624 	setb	_EN
                                   1625 ;	fire_alarm_panel.c:584: delay();
      00050F 12r06r11         [24] 1626 	lcall	_delay
                                   1627 ;	fire_alarm_panel.c:585: EN = 0;
                                   1628 ;	assignBit
      000512 C2 87            [12] 1629 	clr	_EN
                                   1630 ;	fire_alarm_panel.c:586: delay();
                                   1631 ;	fire_alarm_panel.c:587: }
      000514 02r06r11         [24] 1632 	ljmp	_delay
                                   1633 ;------------------------------------------------------------
                                   1634 ;Allocation info for local variables in function 'move1'
                                   1635 ;------------------------------------------------------------
                                   1636 ;data          Allocated to registers r7 
                                   1637 ;------------------------------------------------------------
                                   1638 ;	fire_alarm_panel.c:589: void move1(unsigned char data)
                                   1639 ;	-----------------------------------------
                                   1640 ;	 function move1
                                   1641 ;	-----------------------------------------
      000517                       1642 _move1:
      000517 AF 82            [24] 1643 	mov	r7, dpl
                                   1644 ;	fire_alarm_panel.c:591: P1 = (P1 & 0xF0) | data;
      000519 E5 90            [12] 1645 	mov	a,_P1
      00051B 54 F0            [12] 1646 	anl	a,#0xf0
      00051D 4F               [12] 1647 	orl	a,r7
      00051E F5 90            [12] 1648 	mov	_P1,a
                                   1649 ;	fire_alarm_panel.c:592: EN = 1;
                                   1650 ;	assignBit
      000520 D2 87            [12] 1651 	setb	_EN
                                   1652 ;	fire_alarm_panel.c:596: __endasm;
      000522 00               [12] 1653 	nop
                                   1654 ;	fire_alarm_panel.c:597: EN = 0;
                                   1655 ;	assignBit
      000523 C2 87            [12] 1656 	clr	_EN
                                   1657 ;	fire_alarm_panel.c:607: __endasm;
      000525 00               [12] 1658 	nop
      000526 00               [12] 1659 	nop
      000527 00               [12] 1660 	nop
      000528 00               [12] 1661 	nop
      000529 00               [12] 1662 	nop
      00052A 00               [12] 1663 	nop
      00052B 00               [12] 1664 	nop
      00052C 00               [12] 1665 	nop
                                   1666 ;	fire_alarm_panel.c:608: EN = 1;
                                   1667 ;	assignBit
      00052D D2 87            [12] 1668 	setb	_EN
                                   1669 ;	fire_alarm_panel.c:609: }
      00052F 22               [24] 1670 	ret
                                   1671 ;------------------------------------------------------------
                                   1672 ;Allocation info for local variables in function 'lcd_cmd'
                                   1673 ;------------------------------------------------------------
                                   1674 ;cmd_ptr       Allocated to registers r5 r6 r7 
                                   1675 ;cmd           Allocated to registers r3 
                                   1676 ;i             Allocated to registers r4 
                                   1677 ;------------------------------------------------------------
                                   1678 ;	fire_alarm_panel.c:611: void lcd_cmd(unsigned char *cmd_ptr)
                                   1679 ;	-----------------------------------------
                                   1680 ;	 function lcd_cmd
                                   1681 ;	-----------------------------------------
      000530                       1682 _lcd_cmd:
      000530 AD 82            [24] 1683 	mov	r5, dpl
      000532 AE 83            [24] 1684 	mov	r6, dph
      000534 AF F0            [24] 1685 	mov	r7, b
                                   1686 ;	fire_alarm_panel.c:616: while((cmd = cmd_ptr[i]) != 0) {
      000536 7C 00            [12] 1687 	mov	r4,#0x00
      000538                       1688 00101$:
      000538 EC               [12] 1689 	mov	a,r4
      000539 2D               [12] 1690 	add	a, r5
      00053A F9               [12] 1691 	mov	r1,a
      00053B E4               [12] 1692 	clr	a
      00053C 3E               [12] 1693 	addc	a, r6
      00053D FA               [12] 1694 	mov	r2,a
      00053E 8F 03            [24] 1695 	mov	ar3,r7
      000540 89 82            [24] 1696 	mov	dpl,r1
      000542 8A 83            [24] 1697 	mov	dph,r2
      000544 8B F0            [24] 1698 	mov	b,r3
      000546 12r00r00         [24] 1699 	lcall	__gptrget
      000549 FB               [12] 1700 	mov	r3,a
      00054A 60 26            [24] 1701 	jz	00104$
                                   1702 ;	fire_alarm_panel.c:617: i++;
      00054C 0C               [12] 1703 	inc	r4
                                   1704 ;	fire_alarm_panel.c:618: RS = 0;
                                   1705 ;	assignBit
      00054D C2 86            [12] 1706 	clr	_RS
                                   1707 ;	fire_alarm_panel.c:619: spliter(cmd);
      00054F 8B 82            [24] 1708 	mov	dpl, r3
      000551 C0 07            [24] 1709 	push	ar7
      000553 C0 06            [24] 1710 	push	ar6
      000555 C0 05            [24] 1711 	push	ar5
      000557 C0 04            [24] 1712 	push	ar4
      000559 12r04rF6         [24] 1713 	lcall	_spliter
                                   1714 ;	fire_alarm_panel.c:620: move(U);
      00055C 85*04 82         [24] 1715 	mov	dpl, _U
      00055F 12r05r04         [24] 1716 	lcall	_move
                                   1717 ;	fire_alarm_panel.c:621: move(L);
      000562 85*05 82         [24] 1718 	mov	dpl, _L
      000565 12r05r04         [24] 1719 	lcall	_move
      000568 D0 04            [24] 1720 	pop	ar4
      00056A D0 05            [24] 1721 	pop	ar5
      00056C D0 06            [24] 1722 	pop	ar6
      00056E D0 07            [24] 1723 	pop	ar7
      000570 80 C6            [24] 1724 	sjmp	00101$
      000572                       1725 00104$:
                                   1726 ;	fire_alarm_panel.c:623: }
      000572 22               [24] 1727 	ret
                                   1728 ;------------------------------------------------------------
                                   1729 ;Allocation info for local variables in function 'lcd_data'
                                   1730 ;------------------------------------------------------------
                                   1731 ;data          Allocated to registers 
                                   1732 ;------------------------------------------------------------
                                   1733 ;	fire_alarm_panel.c:625: void lcd_data(unsigned char data)
                                   1734 ;	-----------------------------------------
                                   1735 ;	 function lcd_data
                                   1736 ;	-----------------------------------------
      000573                       1737 _lcd_data:
                                   1738 ;	fire_alarm_panel.c:627: RS = 1;
                                   1739 ;	assignBit
      000573 D2 86            [12] 1740 	setb	_RS
                                   1741 ;	fire_alarm_panel.c:628: spliter(data);
      000575 12r04rF6         [24] 1742 	lcall	_spliter
                                   1743 ;	fire_alarm_panel.c:629: move1(U);
      000578 85*04 82         [24] 1744 	mov	dpl, _U
      00057B 12r05r17         [24] 1745 	lcall	_move1
                                   1746 ;	fire_alarm_panel.c:630: move1(L);
      00057E 85*05 82         [24] 1747 	mov	dpl, _L
                                   1748 ;	fire_alarm_panel.c:631: }
      000581 02r05r17         [24] 1749 	ljmp	_move1
                                   1750 ;------------------------------------------------------------
                                   1751 ;Allocation info for local variables in function 'lcd_disp'
                                   1752 ;------------------------------------------------------------
                                   1753 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1754 ;ch            Allocated to registers r3 
                                   1755 ;i             Allocated to registers r4 
                                   1756 ;------------------------------------------------------------
                                   1757 ;	fire_alarm_panel.c:633: void lcd_disp(unsigned char *text_ptr)
                                   1758 ;	-----------------------------------------
                                   1759 ;	 function lcd_disp
                                   1760 ;	-----------------------------------------
      000584                       1761 _lcd_disp:
      000584 AD 82            [24] 1762 	mov	r5, dpl
      000586 AE 83            [24] 1763 	mov	r6, dph
      000588 AF F0            [24] 1764 	mov	r7, b
                                   1765 ;	fire_alarm_panel.c:638: while((ch = text_ptr[i]) != 0) {
      00058A 7C 00            [12] 1766 	mov	r4,#0x00
      00058C                       1767 00101$:
      00058C EC               [12] 1768 	mov	a,r4
      00058D 2D               [12] 1769 	add	a, r5
      00058E F9               [12] 1770 	mov	r1,a
      00058F E4               [12] 1771 	clr	a
      000590 3E               [12] 1772 	addc	a, r6
      000591 FA               [12] 1773 	mov	r2,a
      000592 8F 03            [24] 1774 	mov	ar3,r7
      000594 89 82            [24] 1775 	mov	dpl,r1
      000596 8A 83            [24] 1776 	mov	dph,r2
      000598 8B F0            [24] 1777 	mov	b,r3
      00059A 12r00r00         [24] 1778 	lcall	__gptrget
      00059D FB               [12] 1779 	mov	r3,a
      00059E 60 18            [24] 1780 	jz	00104$
                                   1781 ;	fire_alarm_panel.c:639: i++;
      0005A0 0C               [12] 1782 	inc	r4
                                   1783 ;	fire_alarm_panel.c:640: lcd_data(ch);
      0005A1 8B 82            [24] 1784 	mov	dpl, r3
      0005A3 C0 07            [24] 1785 	push	ar7
      0005A5 C0 06            [24] 1786 	push	ar6
      0005A7 C0 05            [24] 1787 	push	ar5
      0005A9 C0 04            [24] 1788 	push	ar4
      0005AB 12r05r73         [24] 1789 	lcall	_lcd_data
      0005AE D0 04            [24] 1790 	pop	ar4
      0005B0 D0 05            [24] 1791 	pop	ar5
      0005B2 D0 06            [24] 1792 	pop	ar6
      0005B4 D0 07            [24] 1793 	pop	ar7
      0005B6 80 D4            [24] 1794 	sjmp	00101$
      0005B8                       1795 00104$:
                                   1796 ;	fire_alarm_panel.c:642: }
      0005B8 22               [24] 1797 	ret
                                   1798 ;------------------------------------------------------------
                                   1799 ;Allocation info for local variables in function 'lcd_disp1'
                                   1800 ;------------------------------------------------------------
                                   1801 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1802 ;ch            Allocated to registers r3 
                                   1803 ;i             Allocated to registers r4 
                                   1804 ;------------------------------------------------------------
                                   1805 ;	fire_alarm_panel.c:644: void lcd_disp1(unsigned char *text_ptr)
                                   1806 ;	-----------------------------------------
                                   1807 ;	 function lcd_disp1
                                   1808 ;	-----------------------------------------
      0005B9                       1809 _lcd_disp1:
      0005B9 AD 82            [24] 1810 	mov	r5, dpl
      0005BB AE 83            [24] 1811 	mov	r6, dph
      0005BD AF F0            [24] 1812 	mov	r7, b
                                   1813 ;	fire_alarm_panel.c:649: while((ch = text_ptr[i]) != 0) {
      0005BF 7C 00            [12] 1814 	mov	r4,#0x00
      0005C1                       1815 00101$:
      0005C1 EC               [12] 1816 	mov	a,r4
      0005C2 2D               [12] 1817 	add	a, r5
      0005C3 F9               [12] 1818 	mov	r1,a
      0005C4 E4               [12] 1819 	clr	a
      0005C5 3E               [12] 1820 	addc	a, r6
      0005C6 FA               [12] 1821 	mov	r2,a
      0005C7 8F 03            [24] 1822 	mov	ar3,r7
      0005C9 89 82            [24] 1823 	mov	dpl,r1
      0005CB 8A 83            [24] 1824 	mov	dph,r2
      0005CD 8B F0            [24] 1825 	mov	b,r3
      0005CF 12r00r00         [24] 1826 	lcall	__gptrget
      0005D2 FB               [12] 1827 	mov	r3,a
      0005D3 60 1B            [24] 1828 	jz	00104$
                                   1829 ;	fire_alarm_panel.c:650: i++;
      0005D5 0C               [12] 1830 	inc	r4
                                   1831 ;	fire_alarm_panel.c:651: lcd_data(ch);
      0005D6 8B 82            [24] 1832 	mov	dpl, r3
      0005D8 C0 07            [24] 1833 	push	ar7
      0005DA C0 06            [24] 1834 	push	ar6
      0005DC C0 05            [24] 1835 	push	ar5
      0005DE C0 04            [24] 1836 	push	ar4
      0005E0 12r05r73         [24] 1837 	lcall	_lcd_data
                                   1838 ;	fire_alarm_panel.c:652: delay2();
      0005E3 12r05rF1         [24] 1839 	lcall	_delay2
      0005E6 D0 04            [24] 1840 	pop	ar4
      0005E8 D0 05            [24] 1841 	pop	ar5
      0005EA D0 06            [24] 1842 	pop	ar6
      0005EC D0 07            [24] 1843 	pop	ar7
      0005EE 80 D1            [24] 1844 	sjmp	00101$
      0005F0                       1845 00104$:
                                   1846 ;	fire_alarm_panel.c:654: }
      0005F0 22               [24] 1847 	ret
                                   1848 ;------------------------------------------------------------
                                   1849 ;Allocation info for local variables in function 'delay2'
                                   1850 ;------------------------------------------------------------
                                   1851 ;R5            Allocated to registers r7 
                                   1852 ;R6            Allocated to registers r5 
                                   1853 ;R7            Allocated to registers r6 
                                   1854 ;------------------------------------------------------------
                                   1855 ;	fire_alarm_panel.c:656: void delay2(void)
                                   1856 ;	-----------------------------------------
                                   1857 ;	 function delay2
                                   1858 ;	-----------------------------------------
      0005F1                       1859 _delay2:
                                   1860 ;	fire_alarm_panel.c:660: for(R5 = 1; R5 > 0; R5--) {
      0005F1 7F 01            [12] 1861 	mov	r7,#0x01
                                   1862 ;	fire_alarm_panel.c:661: for(R7 = 255; R7 > 0; R7--) {
      0005F3                       1863 00121$:
      0005F3 7E FF            [12] 1864 	mov	r6,#0xff
                                   1865 ;	fire_alarm_panel.c:662: for(R6 = 255; R6 > 0; R6--);
      0005F5                       1866 00119$:
      0005F5 7D FF            [12] 1867 	mov	r5,#0xff
      0005F7                       1868 00105$:
      0005F7 DD FE            [24] 1869 	djnz	r5,00105$
                                   1870 ;	fire_alarm_panel.c:661: for(R7 = 255; R7 > 0; R7--) {
      0005F9 DE FA            [24] 1871 	djnz	r6,00119$
                                   1872 ;	fire_alarm_panel.c:660: for(R5 = 1; R5 > 0; R5--) {
      0005FB DF F6            [24] 1873 	djnz	r7,00121$
                                   1874 ;	fire_alarm_panel.c:665: }
      0005FD 22               [24] 1875 	ret
                                   1876 ;------------------------------------------------------------
                                   1877 ;Allocation info for local variables in function 'delay1'
                                   1878 ;------------------------------------------------------------
                                   1879 ;R5            Allocated to registers r7 
                                   1880 ;R6            Allocated to registers r5 
                                   1881 ;R7            Allocated to registers r6 
                                   1882 ;------------------------------------------------------------
                                   1883 ;	fire_alarm_panel.c:667: void delay1(void)
                                   1884 ;	-----------------------------------------
                                   1885 ;	 function delay1
                                   1886 ;	-----------------------------------------
      0005FE                       1887 _delay1:
                                   1888 ;	fire_alarm_panel.c:671: for(R5 = 8; R5 > 0; R5--) {
      0005FE 7F 08            [12] 1889 	mov	r7,#0x08
                                   1890 ;	fire_alarm_panel.c:672: for(R7 = 255; R7 > 0; R7--) {
      000600                       1891 00123$:
      000600 7E FF            [12] 1892 	mov	r6,#0xff
                                   1893 ;	fire_alarm_panel.c:673: for(R6 = 255; R6 > 0; R6--);
      000602                       1894 00121$:
      000602 7D FF            [12] 1895 	mov	r5,#0xff
      000604                       1896 00107$:
      000604 DD FE            [24] 1897 	djnz	r5,00107$
                                   1898 ;	fire_alarm_panel.c:672: for(R7 = 255; R7 > 0; R7--) {
      000606 DE FA            [24] 1899 	djnz	r6,00121$
                                   1900 ;	fire_alarm_panel.c:671: for(R5 = 8; R5 > 0; R5--) {
      000608 DF F6            [24] 1901 	djnz	r7,00123$
                                   1902 ;	fire_alarm_panel.c:677: if(RI) {
      00060A 30 98 03         [24] 1903 	jnb	_RI,00112$
                                   1904 ;	fire_alarm_panel.c:678: receive();
                                   1905 ;	fire_alarm_panel.c:680: }
      00060D 02r04r4D         [24] 1906 	ljmp	_receive
      000610                       1907 00112$:
      000610 22               [24] 1908 	ret
                                   1909 ;------------------------------------------------------------
                                   1910 ;Allocation info for local variables in function 'delay'
                                   1911 ;------------------------------------------------------------
                                   1912 ;R6            Allocated to registers r6 
                                   1913 ;R7            Allocated to registers r7 
                                   1914 ;------------------------------------------------------------
                                   1915 ;	fire_alarm_panel.c:682: void delay(void)
                                   1916 ;	-----------------------------------------
                                   1917 ;	 function delay
                                   1918 ;	-----------------------------------------
      000611                       1919 _delay:
                                   1920 ;	fire_alarm_panel.c:686: for(R7 = 7; R7 > 0; R7--) {
      000611 7F 07            [12] 1921 	mov	r7,#0x07
                                   1922 ;	fire_alarm_panel.c:687: for(R6 = 15; R6 > 0; R6--);
      000613                       1923 00114$:
      000613 7E 0F            [12] 1924 	mov	r6,#0x0f
      000615                       1925 00104$:
      000615 DE FE            [24] 1926 	djnz	r6,00104$
                                   1927 ;	fire_alarm_panel.c:686: for(R7 = 7; R7 > 0; R7--) {
      000617 DF FA            [24] 1928 	djnz	r7,00114$
                                   1929 ;	fire_alarm_panel.c:689: } 
      000619 22               [24] 1930 	ret
                                   1931 	.area CSEG    (CODE)
                                   1932 	.area CONST   (CODE)
                                   1933 	.area CONST   (CODE)
      000000                       1934 _INIT_COMMANDS:
      000000 20                    1935 	.db #0x20	; 32
      000001 28                    1936 	.db #0x28	; 40
      000002 0C                    1937 	.db #0x0c	; 12
      000003 01                    1938 	.db #0x01	; 1
      000004 06                    1939 	.db #0x06	; 6
      000005 80                    1940 	.db #0x80	; 128
      000006 00                    1941 	.db #0x00	; 0
                                   1942 	.area CSEG    (CODE)
                                   1943 	.area CONST   (CODE)
      000007                       1944 _LINE1:
      000007 01                    1945 	.db #0x01	; 1
      000008 06                    1946 	.db #0x06	; 6
      000009 80                    1947 	.db #0x80	; 128
      00000A 00                    1948 	.db #0x00	; 0
                                   1949 	.area CSEG    (CODE)
                                   1950 	.area CONST   (CODE)
      00000B                       1951 _LINE2:
      00000B C0                    1952 	.db #0xc0	; 192
      00000C 00                    1953 	.db #0x00	; 0
                                   1954 	.area CSEG    (CODE)
                                   1955 	.area CONST   (CODE)
      00000D                       1956 _TEXT1:
      00000D 20 41 47 4E 49 20 50  1957 	.ascii " AGNI PROTECTION"
             52 4F 54 45 43 54 49
             4F 4E
      00001D 00                    1958 	.db 0x00
                                   1959 	.area CSEG    (CODE)
                                   1960 	.area CONST   (CODE)
      00001E                       1961 _TEXT2:
      00001E 20 57 45 4C 43 4F 4D  1962 	.ascii " WELCOME TO ...."
             45 20 54 4F 20 2E 2E
             2E 2E
      00002E 00                    1963 	.db 0x00
                                   1964 	.area CSEG    (CODE)
                                   1965 	.area CONST   (CODE)
      00002F                       1966 _TEXT3:
      00002F 46 49 52 45 20 41 4C  1967 	.ascii "FIRE ALARM PANEL"
             41 52 4D 20 50 41 4E
             45 4C
      00003F 00                    1968 	.db 0x00
                                   1969 	.area CSEG    (CODE)
                                   1970 	.area CONST   (CODE)
      000040                       1971 _TZONE1:
      000040 20 5A 4F 4E 45 20 2D  1972 	.ascii " ZONE - 01      "
             20 30 31 20 20 20 20
             20 20
      000050 00                    1973 	.db 0x00
                                   1974 	.area CSEG    (CODE)
                                   1975 	.area CONST   (CODE)
      000051                       1976 _TZONE2:
      000051 20 5A 4F 4E 45 20 2D  1977 	.ascii " ZONE - 02      "
             20 30 32 20 20 20 20
             20 20
      000061 00                    1978 	.db 0x00
                                   1979 	.area CSEG    (CODE)
                                   1980 	.area CONST   (CODE)
      000062                       1981 _FIRE:
      000062 20 46 49 52 45 20 44  1982 	.ascii " FIRE DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000072 00                    1983 	.db 0x00
                                   1984 	.area CSEG    (CODE)
                                   1985 	.area CONST   (CODE)
      000073                       1986 _SHORT:
      000073 20 53 48 4F 52 54 20  1987 	.ascii " SHORT DETECTED "
             44 45 54 45 43 54 45
             44 20
      000083 00                    1988 	.db 0x00
                                   1989 	.area CSEG    (CODE)
                                   1990 	.area CONST   (CODE)
      000084                       1991 _OPEN:
      000084 20 4F 50 45 4E 20 44  1992 	.ascii " OPEN DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000094 00                    1993 	.db 0x00
                                   1994 	.area CSEG    (CODE)
                                   1995 	.area CONST   (CODE)
      000095                       1996 _TEXT4:
      000095 20 41 4C 4C 20 54 48  1997 	.ascii " ALL THE AREA   "
             45 20 41 52 45 41 20
             20 20
      0000A5 00                    1998 	.db 0x00
                                   1999 	.area CSEG    (CODE)
                                   2000 	.area CONST   (CODE)
      0000A6                       2001 _TLAMP:
      0000A6 50 41 4E 45 4C 20 54  2002 	.ascii "PANEL TESTING ON"
             45 53 54 49 4E 47 20
             4F 4E
      0000B6 00                    2003 	.db 0x00
                                   2004 	.area CSEG    (CODE)
                                   2005 	.area CONST   (CODE)
      0000B7                       2006 _TEVQ:
      0000B7 20 50 4C 45 41 53 45  2007 	.ascii " PLEASE EVACUATE"
             20 45 56 41 43 55 41
             54 45
      0000C7 00                    2008 	.db 0x00
                                   2009 	.area CSEG    (CODE)
                                   2010 	.area CONST   (CODE)
      0000C8                       2011 _ISO1:
      0000C8 5A 4F 4E 45 2D 20 30  2012 	.ascii "ZONE- 01 ISOLATE"
             31 20 49 53 4F 4C 41
             54 45
      0000D8 00                    2013 	.db 0x00
                                   2014 	.area CSEG    (CODE)
                                   2015 	.area CONST   (CODE)
      0000D9                       2016 _ISO2:
      0000D9 5A 4F 4E 45 2D 20 30  2017 	.ascii "ZONE- 02 ISOLATE"
             32 20 49 53 4F 4C 41
             54 45
      0000E9 00                    2018 	.db 0x00
                                   2019 	.area CSEG    (CODE)
                                   2020 	.area CONST   (CODE)
      0000EA                       2021 _ISO1H:
      0000EA 5A 4F 4E 45 2D 20 30  2022 	.ascii "ZONE- 01 HEALTHY"
             31 20 48 45 41 4C 54
             48 59
      0000FA 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      0000FB                       2026 _ISO2H:
      0000FB 5A 4F 4E 45 2D 20 30  2027 	.ascii "ZONE- 02 HEALTHY"
             32 20 48 45 41 4C 54
             48 59
      00010B 00                    2028 	.db 0x00
                                   2029 	.area CSEG    (CODE)
                                   2030 	.area CONST   (CODE)
      00010C                       2031 _LOWB:
      00010C 20 20 42 41 54 54 45  2032 	.ascii "  BATTERY LOW   "
             52 59 20 4C 4F 57 20
             20 20
      00011C 00                    2033 	.db 0x00
                                   2034 	.area CSEG    (CODE)
                                   2035 	.area CONST   (CODE)
      00011D                       2036 _LOWM:
      00011D 20 43 48 45 43 4B 20  2037 	.ascii " CHECK AC SUPPLY"
             41 43 20 53 55 50 50
             4C 59
      00012D 00                    2038 	.db 0x00
                                   2039 	.area CSEG    (CODE)
                                   2040 	.area XINIT   (CODE)
                                   2041 	.area CABS    (ABS,CODE)
