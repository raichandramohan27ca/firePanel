                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module fire_alarm_panel
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LOWM
                                     12 	.globl _LOWB
                                     13 	.globl _ISO2H
                                     14 	.globl _ISO1H
                                     15 	.globl _ISO2
                                     16 	.globl _ISO1
                                     17 	.globl _TEVQ
                                     18 	.globl _TLAMP
                                     19 	.globl _TEXT4
                                     20 	.globl _OPEN
                                     21 	.globl _SHORT
                                     22 	.globl _FIRE
                                     23 	.globl _TZONE2
                                     24 	.globl _TZONE1
                                     25 	.globl _TEXT3
                                     26 	.globl _TEXT2
                                     27 	.globl _TEXT1
                                     28 	.globl _LINE2
                                     29 	.globl _LINE1
                                     30 	.globl _INIT_COMMANDS
                                     31 	.globl _main
                                     32 	.globl _SHORT2
                                     33 	.globl _OPEN2
                                     34 	.globl _FIRE2
                                     35 	.globl _SHORT1
                                     36 	.globl _OPEN1
                                     37 	.globl _FIRE1
                                     38 	.globl _CFTLR
                                     39 	.globl _CFLR
                                     40 	.globl _BUZ
                                     41 	.globl _HOT
                                     42 	.globl _EN
                                     43 	.globl _RS
                                     44 	.globl _EVQ
                                     45 	.globl _SIL
                                     46 	.globl _LAMP
                                     47 	.globl _LB
                                     48 	.globl _BL
                                     49 	.globl _ZONE2
                                     50 	.globl _ZONE1
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _TH2
                                    145 	.globl _TL2
                                    146 	.globl _RCAP2H
                                    147 	.globl _RCAP2L
                                    148 	.globl _T2CON
                                    149 	.globl _B
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _PR2
                                    171 	.globl _PR1
                                    172 	.globl _LISO
                                    173 	.globl _SLC2
                                    174 	.globl _SLC1
                                    175 	.globl _Z2
                                    176 	.globl _Z1
                                    177 	.globl _L
                                    178 	.globl _U
                                    179 	.globl _RAP
                                    180 	.globl _BLT1
                                    181 	.globl _init_system
                                    182 	.globl _prz1
                                    183 	.globl _prz2
                                    184 	.globl _receive
                                    185 	.globl _send_data
                                    186 	.globl _silence_alarms
                                    187 	.globl _spliter
                                    188 	.globl _move
                                    189 	.globl _move1
                                    190 	.globl _lcd_cmd
                                    191 	.globl _lcd_data
                                    192 	.globl _lcd_disp
                                    193 	.globl _lcd_disp1
                                    194 	.globl _delay2
                                    195 	.globl _delay1
                                    196 	.globl _delay
                                    197 ;--------------------------------------------------------
                                    198 ; special function registers
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _P0	=	0x0080
                           000081   203 _SP	=	0x0081
                           000082   204 _DPL	=	0x0082
                           000083   205 _DPH	=	0x0083
                           000087   206 _PCON	=	0x0087
                           000088   207 _TCON	=	0x0088
                           000089   208 _TMOD	=	0x0089
                           00008A   209 _TL0	=	0x008a
                           00008B   210 _TL1	=	0x008b
                           00008C   211 _TH0	=	0x008c
                           00008D   212 _TH1	=	0x008d
                           000090   213 _P1	=	0x0090
                           000098   214 _SCON	=	0x0098
                           000099   215 _SBUF	=	0x0099
                           0000A0   216 _P2	=	0x00a0
                           0000A8   217 _IE	=	0x00a8
                           0000B0   218 _P3	=	0x00b0
                           0000B8   219 _IP	=	0x00b8
                           0000D0   220 _PSW	=	0x00d0
                           0000E0   221 _ACC	=	0x00e0
                           0000F0   222 _B	=	0x00f0
                           0000C8   223 _T2CON	=	0x00c8
                           0000CA   224 _RCAP2L	=	0x00ca
                           0000CB   225 _RCAP2H	=	0x00cb
                           0000CC   226 _TL2	=	0x00cc
                           0000CD   227 _TH2	=	0x00cd
                                    228 ;--------------------------------------------------------
                                    229 ; special function bits
                                    230 ;--------------------------------------------------------
                                    231 	.area RSEG    (ABS,DATA)
      000000                        232 	.org 0x0000
                           000080   233 _P0_0	=	0x0080
                           000081   234 _P0_1	=	0x0081
                           000082   235 _P0_2	=	0x0082
                           000083   236 _P0_3	=	0x0083
                           000084   237 _P0_4	=	0x0084
                           000085   238 _P0_5	=	0x0085
                           000086   239 _P0_6	=	0x0086
                           000087   240 _P0_7	=	0x0087
                           000088   241 _IT0	=	0x0088
                           000089   242 _IE0	=	0x0089
                           00008A   243 _IT1	=	0x008a
                           00008B   244 _IE1	=	0x008b
                           00008C   245 _TR0	=	0x008c
                           00008D   246 _TF0	=	0x008d
                           00008E   247 _TR1	=	0x008e
                           00008F   248 _TF1	=	0x008f
                           000090   249 _P1_0	=	0x0090
                           000091   250 _P1_1	=	0x0091
                           000092   251 _P1_2	=	0x0092
                           000093   252 _P1_3	=	0x0093
                           000094   253 _P1_4	=	0x0094
                           000095   254 _P1_5	=	0x0095
                           000096   255 _P1_6	=	0x0096
                           000097   256 _P1_7	=	0x0097
                           000098   257 _RI	=	0x0098
                           000099   258 _TI	=	0x0099
                           00009A   259 _RB8	=	0x009a
                           00009B   260 _TB8	=	0x009b
                           00009C   261 _REN	=	0x009c
                           00009D   262 _SM2	=	0x009d
                           00009E   263 _SM1	=	0x009e
                           00009F   264 _SM0	=	0x009f
                           0000A0   265 _P2_0	=	0x00a0
                           0000A1   266 _P2_1	=	0x00a1
                           0000A2   267 _P2_2	=	0x00a2
                           0000A3   268 _P2_3	=	0x00a3
                           0000A4   269 _P2_4	=	0x00a4
                           0000A5   270 _P2_5	=	0x00a5
                           0000A6   271 _P2_6	=	0x00a6
                           0000A7   272 _P2_7	=	0x00a7
                           0000A8   273 _EX0	=	0x00a8
                           0000A9   274 _ET0	=	0x00a9
                           0000AA   275 _EX1	=	0x00aa
                           0000AB   276 _ET1	=	0x00ab
                           0000AC   277 _ES	=	0x00ac
                           0000AF   278 _EA	=	0x00af
                           0000B0   279 _P3_0	=	0x00b0
                           0000B1   280 _P3_1	=	0x00b1
                           0000B2   281 _P3_2	=	0x00b2
                           0000B3   282 _P3_3	=	0x00b3
                           0000B4   283 _P3_4	=	0x00b4
                           0000B5   284 _P3_5	=	0x00b5
                           0000B6   285 _P3_6	=	0x00b6
                           0000B7   286 _P3_7	=	0x00b7
                           0000B0   287 _RXD	=	0x00b0
                           0000B1   288 _TXD	=	0x00b1
                           0000B2   289 _INT0	=	0x00b2
                           0000B3   290 _INT1	=	0x00b3
                           0000B4   291 _T0	=	0x00b4
                           0000B5   292 _T1	=	0x00b5
                           0000B6   293 _WR	=	0x00b6
                           0000B7   294 _RD	=	0x00b7
                           0000B8   295 _PX0	=	0x00b8
                           0000B9   296 _PT0	=	0x00b9
                           0000BA   297 _PX1	=	0x00ba
                           0000BB   298 _PT1	=	0x00bb
                           0000BC   299 _PS	=	0x00bc
                           0000D0   300 _P	=	0x00d0
                           0000D1   301 _F1	=	0x00d1
                           0000D2   302 _OV	=	0x00d2
                           0000D3   303 _RS0	=	0x00d3
                           0000D4   304 _RS1	=	0x00d4
                           0000D5   305 _F0	=	0x00d5
                           0000D6   306 _AC	=	0x00d6
                           0000D7   307 _CY	=	0x00d7
                           0000AD   308 _ET2	=	0x00ad
                           0000BD   309 _PT2	=	0x00bd
                           0000C8   310 _T2CON_0	=	0x00c8
                           0000C9   311 _T2CON_1	=	0x00c9
                           0000CA   312 _T2CON_2	=	0x00ca
                           0000CB   313 _T2CON_3	=	0x00cb
                           0000CC   314 _T2CON_4	=	0x00cc
                           0000CD   315 _T2CON_5	=	0x00cd
                           0000CE   316 _T2CON_6	=	0x00ce
                           0000CF   317 _T2CON_7	=	0x00cf
                           0000C8   318 _CP_RL2	=	0x00c8
                           0000C9   319 _C_T2	=	0x00c9
                           0000CA   320 _TR2	=	0x00ca
                           0000CB   321 _EXEN2	=	0x00cb
                           0000CC   322 _TCLK	=	0x00cc
                           0000CD   323 _RCLK	=	0x00cd
                           0000CE   324 _EXF2	=	0x00ce
                           0000CF   325 _TF2	=	0x00cf
                           0000A4   326 _ZONE1	=	0x00a4
                           0000A5   327 _ZONE2	=	0x00a5
                           0000A7   328 _BL	=	0x00a7
                           0000A2   329 _LB	=	0x00a2
                           0000A6   330 _LAMP	=	0x00a6
                           0000A0   331 _SIL	=	0x00a0
                           0000A1   332 _EVQ	=	0x00a1
                           000086   333 _RS	=	0x0086
                           000087   334 _EN	=	0x0087
                           000094   335 _HOT	=	0x0094
                           000095   336 _BUZ	=	0x0095
                           000096   337 _CFLR	=	0x0096
                           000097   338 _CFTLR	=	0x0097
                           000080   339 _FIRE1	=	0x0080
                           000081   340 _OPEN1	=	0x0081
                           000082   341 _SHORT1	=	0x0082
                           000083   342 _FIRE2	=	0x0083
                           000084   343 _OPEN2	=	0x0084
                           000085   344 _SHORT2	=	0x0085
                                    345 ;--------------------------------------------------------
                                    346 ; overlayable register banks
                                    347 ;--------------------------------------------------------
                                    348 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        349 	.ds 8
                                    350 ;--------------------------------------------------------
                                    351 ; internal ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area DSEG    (DATA)
      000000                        354 _BLT1::
      000000                        355 	.ds 1
      000001                        356 _RAP::
      000001                        357 	.ds 1
      000002                        358 _U::
      000002                        359 	.ds 1
      000003                        360 _L::
      000003                        361 	.ds 1
                                    362 ;--------------------------------------------------------
                                    363 ; overlayable items in internal ram
                                    364 ;--------------------------------------------------------
                                    365 	.area	OSEG    (OVR,DATA)
                                    366 	.area	OSEG    (OVR,DATA)
                                    367 	.area	OSEG    (OVR,DATA)
                                    368 	.area	OSEG    (OVR,DATA)
                                    369 	.area	OSEG    (OVR,DATA)
                                    370 ;--------------------------------------------------------
                                    371 ; Stack segment in internal ram
                                    372 ;--------------------------------------------------------
                                    373 	.area SSEG
      000000                        374 __start__stack:
      000000                        375 	.ds	1
                                    376 
                                    377 ;--------------------------------------------------------
                                    378 ; indirectly addressable internal ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area ISEG    (DATA)
                                    381 ;--------------------------------------------------------
                                    382 ; absolute internal ram data
                                    383 ;--------------------------------------------------------
                                    384 	.area IABS    (ABS,DATA)
                                    385 	.area IABS    (ABS,DATA)
                                    386 ;--------------------------------------------------------
                                    387 ; bit data
                                    388 ;--------------------------------------------------------
                                    389 	.area BSEG    (BIT)
      000000                        390 _Z1::
      000000                        391 	.ds 1
      000001                        392 _Z2::
      000001                        393 	.ds 1
      000002                        394 _SLC1::
      000002                        395 	.ds 1
      000003                        396 _SLC2::
      000003                        397 	.ds 1
      000004                        398 _LISO::
      000004                        399 	.ds 1
      000005                        400 _PR1::
      000005                        401 	.ds 1
      000006                        402 _PR2::
      000006                        403 	.ds 1
                                    404 ;--------------------------------------------------------
                                    405 ; paged external ram data
                                    406 ;--------------------------------------------------------
                                    407 	.area PSEG    (PAG,XDATA)
                                    408 ;--------------------------------------------------------
                                    409 ; uninitialized external ram data
                                    410 ;--------------------------------------------------------
                                    411 	.area XSEG    (XDATA)
                                    412 ;--------------------------------------------------------
                                    413 ; absolute external ram data
                                    414 ;--------------------------------------------------------
                                    415 	.area XABS    (ABS,XDATA)
                                    416 ;--------------------------------------------------------
                                    417 ; initialized external ram data
                                    418 ;--------------------------------------------------------
                                    419 	.area XISEG   (XDATA)
                                    420 	.area HOME    (CODE)
                                    421 	.area GSINIT0 (CODE)
                                    422 	.area GSINIT1 (CODE)
                                    423 	.area GSINIT2 (CODE)
                                    424 	.area GSINIT3 (CODE)
                                    425 	.area GSINIT4 (CODE)
                                    426 	.area GSINIT5 (CODE)
                                    427 	.area GSINIT  (CODE)
                                    428 	.area GSFINAL (CODE)
                                    429 	.area CSEG    (CODE)
                                    430 ;--------------------------------------------------------
                                    431 ; interrupt vector
                                    432 ;--------------------------------------------------------
                                    433 	.area HOME    (CODE)
      000000                        434 __interrupt_vect:
      000000 02r00r00         [24]  435 	ljmp	__sdcc_gsinit_startup
                                    436 ; restartable atomic support routines
      000003                        437 	.ds	5
      000008                        438 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  439 	nop
      000009 00               [12]  440 	nop
      00000A                        441 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  442 	movx	a, @r0
      00000B FB               [12]  443 	mov	r3, a
      00000C EA               [12]  444 	mov	a, r2
      00000D F2               [24]  445 	movx	@r0, a
      00000E 80 2C            [24]  446 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  447 	nop
      000011 00               [12]  448 	nop
      000012                        449 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  450 	movx	a, @dptr
      000013 FB               [12]  451 	mov	r3, a
      000014 EA               [12]  452 	mov	a, r2
      000015 F0               [24]  453 	movx	@dptr, a
      000016 80 24            [24]  454 	sjmp	sdcc_atomic_exchange_exit
      000018                        455 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  456 	mov	a, @r0
      000019 B5 02 02         [24]  457 	cjne	a, ar2, .+#5
      00001C EB               [12]  458 	mov	a, r3
      00001D F6               [12]  459 	mov	@r0, a
      00001E 22               [24]  460 	ret
      00001F 00               [12]  461 	nop
      000020                        462 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  463 	movx	a, @r0
      000021 B5 02 02         [24]  464 	cjne	a, ar2, .+#5
      000024 EB               [12]  465 	mov	a, r3
      000025 F2               [24]  466 	movx	@r0, a
      000026 22               [24]  467 	ret
      000027 00               [12]  468 	nop
      000028                        469 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  470 	movx	a, @dptr
      000029 B5 02 02         [24]  471 	cjne	a, ar2, .+#5
      00002C EB               [12]  472 	mov	a, r3
      00002D F0               [24]  473 	movx	@dptr, a
      00002E 22               [24]  474 	ret
      00002F                        475 sdcc_atomic_exchange_rollback_end::
                                    476 
      00002F                        477 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  478 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  479 	mov	r0, dpl
      000034 20 F5 D3         [24]  480 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        481 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  482 	mov	a, r2
      000038 C6               [12]  483 	xch	a, @r0
      000039 F5 82            [12]  484 	mov	dpl, a
      00003B 22               [24]  485 	ret
      00003C                        486 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  487 	mov	dpl, r3
      00003E 22               [24]  488 	ret
      00003F                        489 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  490 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  491 	mov	r0, dpl
      000044 20 F5 D9         [24]  492 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  493 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    494 ;--------------------------------------------------------
                                    495 ; global & static initialisations
                                    496 ;--------------------------------------------------------
                                    497 	.area HOME    (CODE)
                                    498 	.area GSINIT  (CODE)
                                    499 	.area GSFINAL (CODE)
                                    500 	.area GSINIT  (CODE)
                                    501 	.globl __sdcc_gsinit_startup
                                    502 	.globl __sdcc_program_startup
                                    503 	.globl __start__stack
                                    504 	.globl __mcs51_genXINIT
                                    505 	.globl __mcs51_genXRAMCLEAR
                                    506 	.globl __mcs51_genRAMCLEAR
                                    507 ;	fire_alarm_panel.c:28: __bit Z1 = 0;          // ISO Zone 1
                                    508 ;	assignBit
      000000 C2*00            [12]  509 	clr	_Z1
                                    510 ;	fire_alarm_panel.c:29: __bit Z2 = 0;          // ISO Zone 2
                                    511 ;	assignBit
      000002 C2*01            [12]  512 	clr	_Z2
                                    513 ;	fire_alarm_panel.c:30: __bit SLC1 = 0;        // Silence Zone 1
                                    514 ;	assignBit
      000004 C2*02            [12]  515 	clr	_SLC1
                                    516 ;	fire_alarm_panel.c:31: __bit SLC2 = 0;        // Silence Zone 2
                                    517 ;	assignBit
      000006 C2*03            [12]  518 	clr	_SLC2
                                    519 ;	fire_alarm_panel.c:32: __bit LISO = 0;        // Low battery silence
                                    520 ;	assignBit
      000008 C2*04            [12]  521 	clr	_LISO
                                    522 ;	fire_alarm_panel.c:33: __bit PR1 = 0;         // Zone 1 Problem
                                    523 ;	assignBit
      00000A C2*05            [12]  524 	clr	_PR1
                                    525 ;	fire_alarm_panel.c:34: __bit PR2 = 0;         // Zone 2 Problem
                                    526 ;	assignBit
      00000C C2*06            [12]  527 	clr	_PR2
                                    528 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  529 	ljmp	__sdcc_program_startup
                                    530 ;--------------------------------------------------------
                                    531 ; Home
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
                                    534 	.area HOME    (CODE)
      000049                        535 __sdcc_program_startup:
      000049 02r00r00         [24]  536 	ljmp	_main
                                    537 ;	return from main will return to caller
                                    538 ;--------------------------------------------------------
                                    539 ; code
                                    540 ;--------------------------------------------------------
                                    541 	.area CSEG    (CODE)
                                    542 ;------------------------------------------------------------
                                    543 ;Allocation info for local variables in function 'main'
                                    544 ;------------------------------------------------------------
                                    545 ;R0            Allocated to registers r7 
                                    546 ;------------------------------------------------------------
                                    547 ;	fire_alarm_panel.c:83: void main(void)
                                    548 ;	-----------------------------------------
                                    549 ;	 function main
                                    550 ;	-----------------------------------------
      000000                        551 _main:
                           000007   552 	ar7 = 0x07
                           000006   553 	ar6 = 0x06
                           000005   554 	ar5 = 0x05
                           000004   555 	ar4 = 0x04
                           000003   556 	ar3 = 0x03
                           000002   557 	ar2 = 0x02
                           000001   558 	ar1 = 0x01
                           000000   559 	ar0 = 0x00
                                    560 ;	fire_alarm_panel.c:87: init_system();
      000000 12r02rA7         [24]  561 	lcall	_init_system
                                    562 ;	fire_alarm_panel.c:91: while(R0 < 15) {
      000003 7F 00            [12]  563 	mov	r7,#0x00
      000005                        564 00101$:
      000005 BF 0F 00         [24]  565 	cjne	r7,#0x0f,00472$
      000008                        566 00472$:
      000008 50 13            [24]  567 	jnc	00103$
                                    568 ;	fire_alarm_panel.c:92: lcd_cmd(INIT_COMMANDS);
      00000A 90r00r00         [24]  569 	mov	dptr,#_INIT_COMMANDS
      00000D 75 F0 80         [24]  570 	mov	b, #0x80
      000010 C0 07            [24]  571 	push	ar7
      000012 12r05r42         [24]  572 	lcall	_lcd_cmd
                                    573 ;	fire_alarm_panel.c:93: delay();
      000015 12r06r23         [24]  574 	lcall	_delay
      000018 D0 07            [24]  575 	pop	ar7
                                    576 ;	fire_alarm_panel.c:94: R0++;
      00001A 0F               [12]  577 	inc	r7
      00001B 80 E8            [24]  578 	sjmp	00101$
      00001D                        579 00103$:
                                    580 ;	fire_alarm_panel.c:98: lcd_cmd(LINE1);
      00001D 90r00r07         [24]  581 	mov	dptr,#_LINE1
      000020 75 F0 80         [24]  582 	mov	b, #0x80
      000023 12r05r42         [24]  583 	lcall	_lcd_cmd
                                    584 ;	fire_alarm_panel.c:99: lcd_disp(TEXT2);
      000026 90r00r1E         [24]  585 	mov	dptr,#_TEXT2
      000029 75 F0 80         [24]  586 	mov	b, #0x80
      00002C 12r05r96         [24]  587 	lcall	_lcd_disp
                                    588 ;	fire_alarm_panel.c:100: delay();
      00002F 12r06r23         [24]  589 	lcall	_delay
                                    590 ;	fire_alarm_panel.c:101: lcd_cmd(LINE2);
      000032 90r00r0B         [24]  591 	mov	dptr,#_LINE2
      000035 75 F0 80         [24]  592 	mov	b, #0x80
      000038 12r05r42         [24]  593 	lcall	_lcd_cmd
                                    594 ;	fire_alarm_panel.c:102: lcd_disp1(TEXT1);
      00003B 90r00r0D         [24]  595 	mov	dptr,#_TEXT1
      00003E 75 F0 80         [24]  596 	mov	b, #0x80
      000041 12r05rCB         [24]  597 	lcall	_lcd_disp1
                                    598 ;	fire_alarm_panel.c:104: while(1) {
      000044                        599 00185$:
                                    600 ;	fire_alarm_panel.c:106: if(RI) {
      000044 30 98 03         [24]  601 	jnb	_RI,00105$
                                    602 ;	fire_alarm_panel.c:107: receive();
      000047 12r04r5F         [24]  603 	lcall	_receive
      00004A                        604 00105$:
                                    605 ;	fire_alarm_panel.c:111: if (!PR1 && !PR2 && !LB) {
      00004A 20*05 0E         [24]  606 	jb	_PR1,00107$
      00004D 20*06 0B         [24]  607 	jb	_PR2,00107$
      000050 20 A2 08         [24]  608 	jb	_LB,00107$
                                    609 ;	fire_alarm_panel.c:112: CFLR = 0;   // Fire LED OFF
                                    610 ;	assignBit
      000053 C2 96            [12]  611 	clr	_CFLR
                                    612 ;	fire_alarm_panel.c:113: CFTLR = 0;  // Fault LED OFF
                                    613 ;	assignBit
      000055 C2 97            [12]  614 	clr	_CFTLR
                                    615 ;	fire_alarm_panel.c:114: HOT = 0;    // Hooter OFF
                                    616 ;	assignBit
      000057 C2 94            [12]  617 	clr	_HOT
                                    618 ;	fire_alarm_panel.c:115: BUZ = 0;    // Buzzer OFF
                                    619 ;	assignBit
      000059 C2 95            [12]  620 	clr	_BUZ
      00005B                        621 00107$:
                                    622 ;	fire_alarm_panel.c:119: lcd_cmd(LINE1);
      00005B 90r00r07         [24]  623 	mov	dptr,#_LINE1
      00005E 75 F0 80         [24]  624 	mov	b, #0x80
      000061 12r05r42         [24]  625 	lcall	_lcd_cmd
                                    626 ;	fire_alarm_panel.c:120: lcd_disp(TEXT1);
      000064 90r00r0D         [24]  627 	mov	dptr,#_TEXT1
      000067 75 F0 80         [24]  628 	mov	b, #0x80
      00006A 12r05r96         [24]  629 	lcall	_lcd_disp
                                    630 ;	fire_alarm_panel.c:122: if(RI) {
      00006D 30 98 03         [24]  631 	jnb	_RI,00111$
                                    632 ;	fire_alarm_panel.c:123: receive();
      000070 12r04r5F         [24]  633 	lcall	_receive
      000073                        634 00111$:
                                    635 ;	fire_alarm_panel.c:127: if(!ZONE1) {
      000073 20 A4 21         [24]  636 	jb	_ZONE1,00124$
                                    637 ;	fire_alarm_panel.c:129: Z1 = 0; // Mark as healthy/not isolated
                                    638 ;	assignBit
      000076 C2*00            [12]  639 	clr	_Z1
                                    640 ;	fire_alarm_panel.c:130: PR1 = 0; // No problems
                                    641 ;	assignBit
      000078 C2*05            [12]  642 	clr	_PR1
                                    643 ;	fire_alarm_panel.c:131: lcd_cmd(LINE2);
      00007A 90r00r0B         [24]  644 	mov	dptr,#_LINE2
      00007D 75 F0 80         [24]  645 	mov	b, #0x80
      000080 12r05r42         [24]  646 	lcall	_lcd_cmd
                                    647 ;	fire_alarm_panel.c:132: lcd_disp(ISO1H); // Show "ZONE-01 HEALTHY"
      000083 90r00rEA         [24]  648 	mov	dptr,#_ISO1H
      000086 75 F0 80         [24]  649 	mov	b, #0x80
      000089 12r05r96         [24]  650 	lcall	_lcd_disp
                                    651 ;	fire_alarm_panel.c:133: delay1();
      00008C 12r06r10         [24]  652 	lcall	_delay1
                                    653 ;	fire_alarm_panel.c:134: if(RI) receive();
      00008F 30 98 3E         [24]  654 	jnb	_RI,00125$
      000092 12r04r5F         [24]  655 	lcall	_receive
      000095 80 39            [24]  656 	sjmp	00125$
      000097                        657 00124$:
                                    658 ;	fire_alarm_panel.c:137: Z1 = 1; // Mark as isolated
                                    659 ;	assignBit
      000097 D2*00            [12]  660 	setb	_Z1
                                    661 ;	fire_alarm_panel.c:138: lcd_cmd(LINE2);
      000099 90r00r0B         [24]  662 	mov	dptr,#_LINE2
      00009C 75 F0 80         [24]  663 	mov	b, #0x80
      00009F 12r05r42         [24]  664 	lcall	_lcd_cmd
                                    665 ;	fire_alarm_panel.c:139: lcd_disp(ISO1); // Show "ZONE-01 ISOLATE"
      0000A2 90r00rC8         [24]  666 	mov	dptr,#_ISO1
      0000A5 75 F0 80         [24]  667 	mov	b, #0x80
      0000A8 12r05r96         [24]  668 	lcall	_lcd_disp
                                    669 ;	fire_alarm_panel.c:140: delay1();
      0000AB 12r06r10         [24]  670 	lcall	_delay1
                                    671 ;	fire_alarm_panel.c:141: if(RI) receive();
      0000AE 30 98 03         [24]  672 	jnb	_RI,00115$
      0000B1 12r04r5F         [24]  673 	lcall	_receive
      0000B4                        674 00115$:
                                    675 ;	fire_alarm_panel.c:144: if(FIRE1 && OPEN1 && SHORT1) {
      0000B4 30 80 0C         [24]  676 	jnb	_FIRE1,00119$
      0000B7 30 81 09         [24]  677 	jnb	_OPEN1,00119$
      0000BA 30 82 06         [24]  678 	jnb	_SHORT1,00119$
                                    679 ;	fire_alarm_panel.c:146: PR1 = 0;
                                    680 ;	assignBit
      0000BD C2*05            [12]  681 	clr	_PR1
                                    682 ;	fire_alarm_panel.c:147: SLC1 = 0;
                                    683 ;	assignBit
      0000BF C2*02            [12]  684 	clr	_SLC1
      0000C1 80 0D            [24]  685 	sjmp	00125$
      0000C3                        686 00119$:
                                    687 ;	fire_alarm_panel.c:150: PR1 = 1;
                                    688 ;	assignBit
      0000C3 D2*05            [12]  689 	setb	_PR1
                                    690 ;	fire_alarm_panel.c:151: BL = 1;
                                    691 ;	assignBit
      0000C5 D2 A7            [12]  692 	setb	_BL
                                    693 ;	fire_alarm_panel.c:152: prz1();
      0000C7 12r02rDD         [24]  694 	lcall	_prz1
                                    695 ;	fire_alarm_panel.c:153: if(RI) receive();
      0000CA 30 98 03         [24]  696 	jnb	_RI,00125$
      0000CD 12r04r5F         [24]  697 	lcall	_receive
      0000D0                        698 00125$:
                                    699 ;	fire_alarm_panel.c:158: if(!ZONE2) {
      0000D0 20 A5 21         [24]  700 	jb	_ZONE2,00138$
                                    701 ;	fire_alarm_panel.c:160: Z2 = 0; // Mark as healthy/not isolated
                                    702 ;	assignBit
      0000D3 C2*01            [12]  703 	clr	_Z2
                                    704 ;	fire_alarm_panel.c:161: PR2 = 0; // No problems
                                    705 ;	assignBit
      0000D5 C2*06            [12]  706 	clr	_PR2
                                    707 ;	fire_alarm_panel.c:162: lcd_cmd(LINE2);
      0000D7 90r00r0B         [24]  708 	mov	dptr,#_LINE2
      0000DA 75 F0 80         [24]  709 	mov	b, #0x80
      0000DD 12r05r42         [24]  710 	lcall	_lcd_cmd
                                    711 ;	fire_alarm_panel.c:163: lcd_disp(ISO2H); // Show "ZONE-02 HEALTHY"
      0000E0 90r00rFB         [24]  712 	mov	dptr,#_ISO2H
      0000E3 75 F0 80         [24]  713 	mov	b, #0x80
      0000E6 12r05r96         [24]  714 	lcall	_lcd_disp
                                    715 ;	fire_alarm_panel.c:164: delay1();
      0000E9 12r06r10         [24]  716 	lcall	_delay1
                                    717 ;	fire_alarm_panel.c:165: if(RI) receive();
      0000EC 30 98 3E         [24]  718 	jnb	_RI,00139$
      0000EF 12r04r5F         [24]  719 	lcall	_receive
      0000F2 80 39            [24]  720 	sjmp	00139$
      0000F4                        721 00138$:
                                    722 ;	fire_alarm_panel.c:168: Z2 = 1; // Mark as isolated
                                    723 ;	assignBit
      0000F4 D2*01            [12]  724 	setb	_Z2
                                    725 ;	fire_alarm_panel.c:169: lcd_cmd(LINE2);
      0000F6 90r00r0B         [24]  726 	mov	dptr,#_LINE2
      0000F9 75 F0 80         [24]  727 	mov	b, #0x80
      0000FC 12r05r42         [24]  728 	lcall	_lcd_cmd
                                    729 ;	fire_alarm_panel.c:170: lcd_disp(ISO2); // Show "ZONE-02 ISOLATE"
      0000FF 90r00rD9         [24]  730 	mov	dptr,#_ISO2
      000102 75 F0 80         [24]  731 	mov	b, #0x80
      000105 12r05r96         [24]  732 	lcall	_lcd_disp
                                    733 ;	fire_alarm_panel.c:171: delay1();
      000108 12r06r10         [24]  734 	lcall	_delay1
                                    735 ;	fire_alarm_panel.c:172: if(RI) receive();
      00010B 30 98 03         [24]  736 	jnb	_RI,00129$
      00010E 12r04r5F         [24]  737 	lcall	_receive
      000111                        738 00129$:
                                    739 ;	fire_alarm_panel.c:175: if(FIRE2 && OPEN2 && SHORT2) {
      000111 30 83 0C         [24]  740 	jnb	_FIRE2,00133$
      000114 30 84 09         [24]  741 	jnb	_OPEN2,00133$
      000117 30 85 06         [24]  742 	jnb	_SHORT2,00133$
                                    743 ;	fire_alarm_panel.c:177: PR2 = 0;
                                    744 ;	assignBit
      00011A C2*06            [12]  745 	clr	_PR2
                                    746 ;	fire_alarm_panel.c:178: SLC2 = 0;
                                    747 ;	assignBit
      00011C C2*03            [12]  748 	clr	_SLC2
      00011E 80 0D            [24]  749 	sjmp	00139$
      000120                        750 00133$:
                                    751 ;	fire_alarm_panel.c:181: PR2 = 1;
                                    752 ;	assignBit
      000120 D2*06            [12]  753 	setb	_PR2
                                    754 ;	fire_alarm_panel.c:182: BL = 1;
                                    755 ;	assignBit
      000122 D2 A7            [12]  756 	setb	_BL
                                    757 ;	fire_alarm_panel.c:183: prz2();
      000124 12r03r9E         [24]  758 	lcall	_prz2
                                    759 ;	fire_alarm_panel.c:184: if(RI) receive();
      000127 30 98 03         [24]  760 	jnb	_RI,00139$
      00012A 12r04r5F         [24]  761 	lcall	_receive
      00012D                        762 00139$:
                                    763 ;	fire_alarm_panel.c:189: if(!ZONE1 && !ZONE2) {
      00012D 20 A4 1E         [24]  764 	jb	_ZONE1,00143$
      000130 20 A5 1B         [24]  765 	jb	_ZONE2,00143$
                                    766 ;	fire_alarm_panel.c:190: lcd_cmd(LINE2);
      000133 90r00r0B         [24]  767 	mov	dptr,#_LINE2
      000136 75 F0 80         [24]  768 	mov	b, #0x80
      000139 12r05r42         [24]  769 	lcall	_lcd_cmd
                                    770 ;	fire_alarm_panel.c:191: lcd_disp(TEXT3);
      00013C 90r00r2F         [24]  771 	mov	dptr,#_TEXT3
      00013F 75 F0 80         [24]  772 	mov	b, #0x80
      000142 12r05r96         [24]  773 	lcall	_lcd_disp
                                    774 ;	fire_alarm_panel.c:192: delay1();
      000145 12r06r10         [24]  775 	lcall	_delay1
                                    776 ;	fire_alarm_panel.c:193: if(RI) receive();
      000148 30 98 03         [24]  777 	jnb	_RI,00143$
      00014B 12r04r5F         [24]  778 	lcall	_receive
      00014E                        779 00143$:
                                    780 ;	fire_alarm_panel.c:197: if (!PR1 && !PR2 && !LB) {  // Fixed: !LB means battery is OK (LB=0 when battery low)
      00014E 20*05 0E         [24]  781 	jb	_PR1,00146$
      000151 20*06 0B         [24]  782 	jb	_PR2,00146$
      000154 20 A2 08         [24]  783 	jb	_LB,00146$
                                    784 ;	fire_alarm_panel.c:198: CFLR = 0;   // Fire LED OFF
                                    785 ;	assignBit
      000157 C2 96            [12]  786 	clr	_CFLR
                                    787 ;	fire_alarm_panel.c:199: CFTLR = 0;  // Fault LED OFF
                                    788 ;	assignBit
      000159 C2 97            [12]  789 	clr	_CFTLR
                                    790 ;	fire_alarm_panel.c:200: HOT = 0;    // Hooter OFF
                                    791 ;	assignBit
      00015B C2 94            [12]  792 	clr	_HOT
                                    793 ;	fire_alarm_panel.c:201: BUZ = 0;    // Buzzer OFF
                                    794 ;	assignBit
      00015D C2 95            [12]  795 	clr	_BUZ
      00015F                        796 00146$:
                                    797 ;	fire_alarm_panel.c:205: if(!SIL) {
      00015F 20 A0 03         [24]  798 	jb	_SIL,00150$
                                    799 ;	fire_alarm_panel.c:206: silence_alarms();
      000162 12r04rFD         [24]  800 	lcall	_silence_alarms
      000165                        801 00150$:
                                    802 ;	fire_alarm_panel.c:210: if(RI) receive();
      000165 30 98 03         [24]  803 	jnb	_RI,00152$
      000168 12r04r5F         [24]  804 	lcall	_receive
      00016B                        805 00152$:
                                    806 ;	fire_alarm_panel.c:212: if(!LAMP) { // Lamp test button pressed (active low)
      00016B 20 A6 70         [24]  807 	jb	_LAMP,00159$
                                    808 ;	fire_alarm_panel.c:214: BL = 1;
                                    809 ;	assignBit
      00016E D2 A7            [12]  810 	setb	_BL
                                    811 ;	fire_alarm_panel.c:215: lcd_cmd(LINE1);
      000170 90r00r07         [24]  812 	mov	dptr,#_LINE1
      000173 75 F0 80         [24]  813 	mov	b, #0x80
      000176 12r05r42         [24]  814 	lcall	_lcd_cmd
                                    815 ;	fire_alarm_panel.c:216: lcd_disp(TLAMP);
      000179 90r00rA6         [24]  816 	mov	dptr,#_TLAMP
      00017C 75 F0 80         [24]  817 	mov	b, #0x80
      00017F 12r05r96         [24]  818 	lcall	_lcd_disp
                                    819 ;	fire_alarm_panel.c:217: lcd_cmd(LINE2);
      000182 90r00r0B         [24]  820 	mov	dptr,#_LINE2
      000185 75 F0 80         [24]  821 	mov	b, #0x80
      000188 12r05r42         [24]  822 	lcall	_lcd_cmd
                                    823 ;	fire_alarm_panel.c:218: lcd_disp(TZONE1);
      00018B 90r00r40         [24]  824 	mov	dptr,#_TZONE1
      00018E 75 F0 80         [24]  825 	mov	b, #0x80
      000191 12r05r96         [24]  826 	lcall	_lcd_disp
                                    827 ;	fire_alarm_panel.c:219: delay1();
      000194 12r06r10         [24]  828 	lcall	_delay1
                                    829 ;	fire_alarm_panel.c:220: delay1();
      000197 12r06r10         [24]  830 	lcall	_delay1
                                    831 ;	fire_alarm_panel.c:223: CFLR = 1; CFTLR = 1; HOT = 1; BUZ = 1;
                                    832 ;	assignBit
      00019A D2 96            [12]  833 	setb	_CFLR
                                    834 ;	assignBit
      00019C D2 97            [12]  835 	setb	_CFTLR
                                    836 ;	assignBit
      00019E D2 94            [12]  837 	setb	_HOT
                                    838 ;	assignBit
      0001A0 D2 95            [12]  839 	setb	_BUZ
                                    840 ;	fire_alarm_panel.c:224: delay1();
      0001A2 12r06r10         [24]  841 	lcall	_delay1
                                    842 ;	fire_alarm_panel.c:225: CFLR = 0; CFTLR = 0; HOT = 0; BUZ = 0;
                                    843 ;	assignBit
      0001A5 C2 96            [12]  844 	clr	_CFLR
                                    845 ;	assignBit
      0001A7 C2 97            [12]  846 	clr	_CFTLR
                                    847 ;	assignBit
      0001A9 C2 94            [12]  848 	clr	_HOT
                                    849 ;	assignBit
      0001AB C2 95            [12]  850 	clr	_BUZ
                                    851 ;	fire_alarm_panel.c:227: lcd_cmd(LINE2);
      0001AD 90r00r0B         [24]  852 	mov	dptr,#_LINE2
      0001B0 75 F0 80         [24]  853 	mov	b, #0x80
      0001B3 12r05r42         [24]  854 	lcall	_lcd_cmd
                                    855 ;	fire_alarm_panel.c:228: lcd_disp(TZONE2);
      0001B6 90r00r51         [24]  856 	mov	dptr,#_TZONE2
      0001B9 75 F0 80         [24]  857 	mov	b, #0x80
      0001BC 12r05r96         [24]  858 	lcall	_lcd_disp
                                    859 ;	fire_alarm_panel.c:229: delay1();
      0001BF 12r06r10         [24]  860 	lcall	_delay1
                                    861 ;	fire_alarm_panel.c:232: CFLR = 1; CFTLR = 1; HOT = 1; BUZ = 1;
                                    862 ;	assignBit
      0001C2 D2 96            [12]  863 	setb	_CFLR
                                    864 ;	assignBit
      0001C4 D2 97            [12]  865 	setb	_CFTLR
                                    866 ;	assignBit
      0001C6 D2 94            [12]  867 	setb	_HOT
                                    868 ;	assignBit
      0001C8 D2 95            [12]  869 	setb	_BUZ
                                    870 ;	fire_alarm_panel.c:233: delay1();
      0001CA 12r06r10         [24]  871 	lcall	_delay1
                                    872 ;	fire_alarm_panel.c:234: CFLR = 0; CFTLR = 0; HOT = 0; BUZ = 0;
                                    873 ;	assignBit
      0001CD C2 96            [12]  874 	clr	_CFLR
                                    875 ;	assignBit
      0001CF C2 97            [12]  876 	clr	_CFTLR
                                    877 ;	assignBit
      0001D1 C2 94            [12]  878 	clr	_HOT
                                    879 ;	assignBit
      0001D3 C2 95            [12]  880 	clr	_BUZ
                                    881 ;	fire_alarm_panel.c:237: while(!LAMP);
      0001D5                        882 00153$:
      0001D5 30 A6 FD         [24]  883 	jnb	_LAMP,00153$
                                    884 ;	fire_alarm_panel.c:238: if(RI) receive();
      0001D8 30 98 03         [24]  885 	jnb	_RI,00159$
      0001DB 12r04r5F         [24]  886 	lcall	_receive
      0001DE                        887 00159$:
                                    888 ;	fire_alarm_panel.c:242: if(!EVQ) {
      0001DE 20 A1 43         [24]  889 	jb	_EVQ,00167$
                                    890 ;	fire_alarm_panel.c:243: BL = 1;
                                    891 ;	assignBit
      0001E1 D2 A7            [12]  892 	setb	_BL
                                    893 ;	fire_alarm_panel.c:244: BUZ = 1;
                                    894 ;	assignBit
      0001E3 D2 95            [12]  895 	setb	_BUZ
                                    896 ;	fire_alarm_panel.c:245: HOT = 1;
                                    897 ;	assignBit
      0001E5 D2 94            [12]  898 	setb	_HOT
                                    899 ;	fire_alarm_panel.c:246: CFLR = 1;
                                    900 ;	assignBit
      0001E7 D2 96            [12]  901 	setb	_CFLR
                                    902 ;	fire_alarm_panel.c:247: lcd_cmd(LINE1);
      0001E9 90r00r07         [24]  903 	mov	dptr,#_LINE1
      0001EC 75 F0 80         [24]  904 	mov	b, #0x80
      0001EF 12r05r42         [24]  905 	lcall	_lcd_cmd
                                    906 ;	fire_alarm_panel.c:248: lcd_disp(TEVQ);
      0001F2 90r00rB7         [24]  907 	mov	dptr,#_TEVQ
      0001F5 75 F0 80         [24]  908 	mov	b, #0x80
      0001F8 12r05r96         [24]  909 	lcall	_lcd_disp
                                    910 ;	fire_alarm_panel.c:249: lcd_cmd(LINE2);
      0001FB 90r00r0B         [24]  911 	mov	dptr,#_LINE2
      0001FE 75 F0 80         [24]  912 	mov	b, #0x80
      000201 12r05r42         [24]  913 	lcall	_lcd_cmd
                                    914 ;	fire_alarm_panel.c:250: lcd_disp(TEXT4);
      000204 90r00r95         [24]  915 	mov	dptr,#_TEXT4
      000207 75 F0 80         [24]  916 	mov	b, #0x80
      00020A 12r05r96         [24]  917 	lcall	_lcd_disp
                                    918 ;	fire_alarm_panel.c:253: while(!EVQ && !RI) {
      00020D                        919 00161$:
      00020D 20 A1 08         [24]  920 	jb	_EVQ,00163$
      000210 20 98 05         [24]  921 	jb	_RI,00163$
                                    922 ;	fire_alarm_panel.c:254: delay1();
      000213 12r06r10         [24]  923 	lcall	_delay1
      000216 80 F5            [24]  924 	sjmp	00161$
      000218                        925 00163$:
                                    926 ;	fire_alarm_panel.c:257: if(RI) receive();
      000218 30 98 03         [24]  927 	jnb	_RI,00165$
      00021B 12r04r5F         [24]  928 	lcall	_receive
      00021E                        929 00165$:
                                    930 ;	fire_alarm_panel.c:260: BUZ = 0;
                                    931 ;	assignBit
      00021E C2 95            [12]  932 	clr	_BUZ
                                    933 ;	fire_alarm_panel.c:261: HOT = 0;
                                    934 ;	assignBit
      000220 C2 94            [12]  935 	clr	_HOT
                                    936 ;	fire_alarm_panel.c:262: CFLR = 0;
                                    937 ;	assignBit
      000222 C2 96            [12]  938 	clr	_CFLR
      000224                        939 00167$:
                                    940 ;	fire_alarm_panel.c:265: delay();
      000224 12r06r23         [24]  941 	lcall	_delay
                                    942 ;	fire_alarm_panel.c:268: if(!PR1 && !PR2) {
      000227 20*05 27         [24]  943 	jb	_PR1,00169$
      00022A 20*06 24         [24]  944 	jb	_PR2,00169$
                                    945 ;	fire_alarm_panel.c:269: lcd_cmd(LINE1);
      00022D 90r00r07         [24]  946 	mov	dptr,#_LINE1
      000230 75 F0 80         [24]  947 	mov	b, #0x80
      000233 12r05r42         [24]  948 	lcall	_lcd_cmd
                                    949 ;	fire_alarm_panel.c:270: lcd_disp(TEXT1);
      000236 90r00r0D         [24]  950 	mov	dptr,#_TEXT1
      000239 75 F0 80         [24]  951 	mov	b, #0x80
      00023C 12r05r96         [24]  952 	lcall	_lcd_disp
                                    953 ;	fire_alarm_panel.c:271: lcd_cmd(LINE2);
      00023F 90r00r0B         [24]  954 	mov	dptr,#_LINE2
      000242 75 F0 80         [24]  955 	mov	b, #0x80
      000245 12r05r42         [24]  956 	lcall	_lcd_cmd
                                    957 ;	fire_alarm_panel.c:272: lcd_disp(TEXT3);
      000248 90r00r2F         [24]  958 	mov	dptr,#_TEXT3
      00024B 75 F0 80         [24]  959 	mov	b, #0x80
      00024E 12r05r96         [24]  960 	lcall	_lcd_disp
      000251                        961 00169$:
                                    962 ;	fire_alarm_panel.c:276: if(BLT1 > 0) {
      000251 E5*00            [12]  963 	mov	a,_BLT1
      000253 60 05            [24]  964 	jz	00174$
                                    965 ;	fire_alarm_panel.c:277: BLT1--;
                                    966 ;	fire_alarm_panel.c:278: if(BLT1 == 0) {
      000255 D5*00 02         [24]  967 	djnz	_BLT1,00174$
                                    968 ;	fire_alarm_panel.c:279: BL = 0;
                                    969 ;	assignBit
      000258 C2 A7            [12]  970 	clr	_BL
      00025A                        971 00174$:
                                    972 ;	fire_alarm_panel.c:284: if(LB) {  // Fixed: LB=1 means battery is low
      00025A 30 A2 45         [24]  973 	jnb	_LB,00182$
                                    974 ;	fire_alarm_panel.c:286: CFTLR = 1;  // Turn on fault LED for low battery
                                    975 ;	assignBit
      00025D D2 97            [12]  976 	setb	_CFTLR
                                    977 ;	fire_alarm_panel.c:287: if(!LISO) {
      00025F 20*04 09         [24]  978 	jb	_LISO,00178$
                                    979 ;	fire_alarm_panel.c:288: BUZ = 1;
                                    980 ;	assignBit
      000262 D2 95            [12]  981 	setb	_BUZ
                                    982 ;	fire_alarm_panel.c:289: if(!SIL) {
      000264 20 A0 04         [24]  983 	jb	_SIL,00178$
                                    984 ;	fire_alarm_panel.c:291: LISO = 1;
                                    985 ;	assignBit
      000267 D2*04            [12]  986 	setb	_LISO
                                    987 ;	fire_alarm_panel.c:292: BUZ = 0;
                                    988 ;	assignBit
      000269 C2 95            [12]  989 	clr	_BUZ
      00026B                        990 00178$:
                                    991 ;	fire_alarm_panel.c:296: BL = 1;
                                    992 ;	assignBit
      00026B D2 A7            [12]  993 	setb	_BL
                                    994 ;	fire_alarm_panel.c:297: lcd_cmd(LINE1);
      00026D 90r00r07         [24]  995 	mov	dptr,#_LINE1
      000270 75 F0 80         [24]  996 	mov	b, #0x80
      000273 12r05r42         [24]  997 	lcall	_lcd_cmd
                                    998 ;	fire_alarm_panel.c:298: lcd_disp(LOWB);
      000276 90r01r0C         [24]  999 	mov	dptr,#_LOWB
      000279 75 F0 80         [24] 1000 	mov	b, #0x80
      00027C 12r05r96         [24] 1001 	lcall	_lcd_disp
                                   1002 ;	fire_alarm_panel.c:299: lcd_cmd(LINE2);
      00027F 90r00r0B         [24] 1003 	mov	dptr,#_LINE2
      000282 75 F0 80         [24] 1004 	mov	b, #0x80
      000285 12r05r42         [24] 1005 	lcall	_lcd_cmd
                                   1006 ;	fire_alarm_panel.c:300: lcd_disp(LOWM);
      000288 90r01r1D         [24] 1007 	mov	dptr,#_LOWM
      00028B 75 F0 80         [24] 1008 	mov	b, #0x80
      00028E 12r05r96         [24] 1009 	lcall	_lcd_disp
                                   1010 ;	fire_alarm_panel.c:301: delay1();
      000291 12r06r10         [24] 1011 	lcall	_delay1
                                   1012 ;	fire_alarm_panel.c:302: delay1();
      000294 12r06r10         [24] 1013 	lcall	_delay1
                                   1014 ;	fire_alarm_panel.c:304: if(LISO) {
      000297 20*04 03         [24] 1015 	jb	_LISO,00515$
      00029A 02r00r44         [24] 1016 	ljmp	00185$
      00029D                       1017 00515$:
                                   1018 ;	fire_alarm_panel.c:305: BUZ = 0; // Keep buzzer off if silenced
                                   1019 ;	assignBit
      00029D C2 95            [12] 1020 	clr	_BUZ
                                   1021 ;	fire_alarm_panel.c:309: continue;
      00029F 02r00r44         [24] 1022 	ljmp	00185$
      0002A2                       1023 00182$:
                                   1024 ;	fire_alarm_panel.c:312: LISO = 0;
                                   1025 ;	assignBit
      0002A2 C2*04            [12] 1026 	clr	_LISO
                                   1027 ;	fire_alarm_panel.c:316: }
      0002A4 02r00r44         [24] 1028 	ljmp	00185$
                                   1029 ;------------------------------------------------------------
                                   1030 ;Allocation info for local variables in function 'init_system'
                                   1031 ;------------------------------------------------------------
                                   1032 ;	fire_alarm_panel.c:318: void init_system(void)
                                   1033 ;	-----------------------------------------
                                   1034 ;	 function init_system
                                   1035 ;	-----------------------------------------
      0002A7                       1036 _init_system:
                                   1037 ;	fire_alarm_panel.c:321: P1 = 0x00; // All indicators OFF initially
      0002A7 75 90 00         [24] 1038 	mov	_P1,#0x00
                                   1039 ;	fire_alarm_panel.c:322: P0 = 0xFF;
      0002AA 75 80 FF         [24] 1040 	mov	_P0,#0xff
                                   1041 ;	fire_alarm_panel.c:323: P2 = 0xFF;
      0002AD 75 A0 FF         [24] 1042 	mov	_P2,#0xff
                                   1043 ;	fire_alarm_panel.c:324: P3 = 0xFF;
      0002B0 75 B0 FF         [24] 1044 	mov	_P3,#0xff
                                   1045 ;	fire_alarm_panel.c:327: CFLR = 0;   // Fire LED OFF
                                   1046 ;	assignBit
      0002B3 C2 96            [12] 1047 	clr	_CFLR
                                   1048 ;	fire_alarm_panel.c:328: CFTLR = 0;  // Fault LED OFF  
                                   1049 ;	assignBit
      0002B5 C2 97            [12] 1050 	clr	_CFTLR
                                   1051 ;	fire_alarm_panel.c:329: HOT = 0;    // Hooter OFF
                                   1052 ;	assignBit
      0002B7 C2 94            [12] 1053 	clr	_HOT
                                   1054 ;	fire_alarm_panel.c:330: BUZ = 0;    // Buzzer OFF
                                   1055 ;	assignBit
      0002B9 C2 95            [12] 1056 	clr	_BUZ
                                   1057 ;	fire_alarm_panel.c:331: BL = 0;     // Backlight OFF initially
                                   1058 ;	assignBit
      0002BB C2 A7            [12] 1059 	clr	_BL
                                   1060 ;	fire_alarm_panel.c:334: LISO = 0;
                                   1061 ;	assignBit
      0002BD C2*04            [12] 1062 	clr	_LISO
                                   1063 ;	fire_alarm_panel.c:335: SLC1 = 0;
                                   1064 ;	assignBit
      0002BF C2*02            [12] 1065 	clr	_SLC1
                                   1066 ;	fire_alarm_panel.c:336: SLC2 = 0;
                                   1067 ;	assignBit
      0002C1 C2*03            [12] 1068 	clr	_SLC2
                                   1069 ;	fire_alarm_panel.c:337: Z1 = 0;
                                   1070 ;	assignBit
      0002C3 C2*00            [12] 1071 	clr	_Z1
                                   1072 ;	fire_alarm_panel.c:338: Z2 = 0;
                                   1073 ;	assignBit
      0002C5 C2*01            [12] 1074 	clr	_Z2
                                   1075 ;	fire_alarm_panel.c:339: PR1 = 0;
                                   1076 ;	assignBit
      0002C7 C2*05            [12] 1077 	clr	_PR1
                                   1078 ;	fire_alarm_panel.c:340: PR2 = 0;
                                   1079 ;	assignBit
      0002C9 C2*06            [12] 1080 	clr	_PR2
                                   1081 ;	fire_alarm_panel.c:342: BLT1 = 30;
      0002CB 75*00 1E         [24] 1082 	mov	_BLT1,#0x1e
                                   1083 ;	fire_alarm_panel.c:343: RAP = 0;
      0002CE 75*01 00         [24] 1084 	mov	_RAP,#0x00
                                   1085 ;	fire_alarm_panel.c:346: TMOD = 0x20;
      0002D1 75 89 20         [24] 1086 	mov	_TMOD,#0x20
                                   1087 ;	fire_alarm_panel.c:347: TH1 = 253;  // -3 for 9600 baud
      0002D4 75 8D FD         [24] 1088 	mov	_TH1,#0xfd
                                   1089 ;	fire_alarm_panel.c:348: SCON = 0x50;
      0002D7 75 98 50         [24] 1090 	mov	_SCON,#0x50
                                   1091 ;	fire_alarm_panel.c:349: TR1 = 1;
                                   1092 ;	assignBit
      0002DA D2 8E            [12] 1093 	setb	_TR1
                                   1094 ;	fire_alarm_panel.c:350: }
      0002DC 22               [24] 1095 	ret
                                   1096 ;------------------------------------------------------------
                                   1097 ;Allocation info for local variables in function 'prz1'
                                   1098 ;------------------------------------------------------------
                                   1099 ;	fire_alarm_panel.c:352: void prz1(void)
                                   1100 ;	-----------------------------------------
                                   1101 ;	 function prz1
                                   1102 ;	-----------------------------------------
      0002DD                       1103 _prz1:
                                   1104 ;	fire_alarm_panel.c:354: if(!Z1) {
      0002DD 20*00 12         [24] 1105 	jb	_Z1,00102$
                                   1106 ;	fire_alarm_panel.c:355: lcd_cmd(LINE1);
      0002E0 90r00r07         [24] 1107 	mov	dptr,#_LINE1
      0002E3 75 F0 80         [24] 1108 	mov	b, #0x80
      0002E6 12r05r42         [24] 1109 	lcall	_lcd_cmd
                                   1110 ;	fire_alarm_panel.c:356: lcd_disp(TZONE1);
      0002E9 90r00r40         [24] 1111 	mov	dptr,#_TZONE1
      0002EC 75 F0 80         [24] 1112 	mov	b, #0x80
      0002EF 12r05r96         [24] 1113 	lcall	_lcd_disp
      0002F2                       1114 00102$:
                                   1115 ;	fire_alarm_panel.c:360: if(!SHORT1) {
      0002F2 20 82 25         [24] 1116 	jb	_SHORT1,00129$
                                   1117 ;	fire_alarm_panel.c:361: lcd_cmd(LINE2);
      0002F5 90r00r0B         [24] 1118 	mov	dptr,#_LINE2
      0002F8 75 F0 80         [24] 1119 	mov	b, #0x80
      0002FB 12r05r42         [24] 1120 	lcall	_lcd_cmd
                                   1121 ;	fire_alarm_panel.c:362: lcd_disp(SHORT);
      0002FE 90r00r73         [24] 1122 	mov	dptr,#_SHORT
      000301 75 F0 80         [24] 1123 	mov	b, #0x80
      000304 12r05r96         [24] 1124 	lcall	_lcd_disp
                                   1125 ;	fire_alarm_panel.c:363: CFTLR = 1;  // Fault LED ON
                                   1126 ;	assignBit
      000307 D2 97            [12] 1127 	setb	_CFTLR
                                   1128 ;	fire_alarm_panel.c:364: CFLR = 0;   // Fire LED OFF
                                   1129 ;	assignBit
      000309 C2 96            [12] 1130 	clr	_CFLR
                                   1131 ;	fire_alarm_panel.c:365: HOT = 0;    // Hooter OFF
                                   1132 ;	assignBit
      00030B C2 94            [12] 1133 	clr	_HOT
                                   1134 ;	fire_alarm_panel.c:366: if(!SLC1) {
      00030D 20*02 05         [24] 1135 	jb	_SLC1,00104$
                                   1136 ;	fire_alarm_panel.c:367: BUZ = 1; // Buzzer ON if not silenced
                                   1137 ;	assignBit
      000310 D2 95            [12] 1138 	setb	_BUZ
      000312 02r03r9B         [24] 1139 	ljmp	00130$
      000315                       1140 00104$:
                                   1141 ;	fire_alarm_panel.c:369: BUZ = 0; // Buzzer OFF if silenced
                                   1142 ;	assignBit
      000315 C2 95            [12] 1143 	clr	_BUZ
      000317 02r03r9B         [24] 1144 	ljmp	00130$
      00031A                       1145 00129$:
                                   1146 ;	fire_alarm_panel.c:371: } else if(!FIRE1) {
      00031A 20 80 2E         [24] 1147 	jb	_FIRE1,00126$
                                   1148 ;	fire_alarm_panel.c:372: lcd_cmd(LINE2);
      00031D 90r00r0B         [24] 1149 	mov	dptr,#_LINE2
      000320 75 F0 80         [24] 1150 	mov	b, #0x80
      000323 12r05r42         [24] 1151 	lcall	_lcd_cmd
                                   1152 ;	fire_alarm_panel.c:373: lcd_disp(FIRE);
      000326 90r00r62         [24] 1153 	mov	dptr,#_FIRE
      000329 75 F0 80         [24] 1154 	mov	b, #0x80
      00032C 12r05r96         [24] 1155 	lcall	_lcd_disp
                                   1156 ;	fire_alarm_panel.c:374: CFLR = 1;   // Fire LED ON
                                   1157 ;	assignBit
      00032F D2 96            [12] 1158 	setb	_CFLR
                                   1159 ;	fire_alarm_panel.c:376: if(FIRE2 && OPEN2 && SHORT2) { // Zone 2 healthy
      000331 30 83 08         [24] 1160 	jnb	_FIRE2,00107$
      000334 30 84 05         [24] 1161 	jnb	_OPEN2,00107$
      000337 30 85 02         [24] 1162 	jnb	_SHORT2,00107$
                                   1163 ;	fire_alarm_panel.c:377: CFTLR = 0;
                                   1164 ;	assignBit
      00033A C2 97            [12] 1165 	clr	_CFTLR
      00033C                       1166 00107$:
                                   1167 ;	fire_alarm_panel.c:379: if(!SLC1) {
      00033C 20*02 06         [24] 1168 	jb	_SLC1,00111$
                                   1169 ;	fire_alarm_panel.c:380: BUZ = 1;  // Buzzer ON if not silenced
                                   1170 ;	assignBit
      00033F D2 95            [12] 1171 	setb	_BUZ
                                   1172 ;	fire_alarm_panel.c:381: HOT = 1;  // Hooter ON if not silenced
                                   1173 ;	assignBit
      000341 D2 94            [12] 1174 	setb	_HOT
      000343 80 56            [24] 1175 	sjmp	00130$
      000345                       1176 00111$:
                                   1177 ;	fire_alarm_panel.c:383: BUZ = 0;  // Buzzer OFF if silenced
                                   1178 ;	assignBit
      000345 C2 95            [12] 1179 	clr	_BUZ
                                   1180 ;	fire_alarm_panel.c:384: HOT = 0;  // Hooter OFF if silenced
                                   1181 ;	assignBit
      000347 C2 94            [12] 1182 	clr	_HOT
      000349 80 50            [24] 1183 	sjmp	00130$
      00034B                       1184 00126$:
                                   1185 ;	fire_alarm_panel.c:386: } else if(!OPEN1) {
      00034B 20 81 23         [24] 1186 	jb	_OPEN1,00123$
                                   1187 ;	fire_alarm_panel.c:387: lcd_cmd(LINE2);
      00034E 90r00r0B         [24] 1188 	mov	dptr,#_LINE2
      000351 75 F0 80         [24] 1189 	mov	b, #0x80
      000354 12r05r42         [24] 1190 	lcall	_lcd_cmd
                                   1191 ;	fire_alarm_panel.c:388: lcd_disp(OPEN);
      000357 90r00r84         [24] 1192 	mov	dptr,#_OPEN
      00035A 75 F0 80         [24] 1193 	mov	b, #0x80
      00035D 12r05r96         [24] 1194 	lcall	_lcd_disp
                                   1195 ;	fire_alarm_panel.c:389: CFTLR = 1;  // Fault LED ON
                                   1196 ;	assignBit
      000360 D2 97            [12] 1197 	setb	_CFTLR
                                   1198 ;	fire_alarm_panel.c:390: CFLR = 0;   // Fire LED OFF
                                   1199 ;	assignBit
      000362 C2 96            [12] 1200 	clr	_CFLR
                                   1201 ;	fire_alarm_panel.c:391: HOT = 0;    // Hooter OFF
                                   1202 ;	assignBit
      000364 C2 94            [12] 1203 	clr	_HOT
                                   1204 ;	fire_alarm_panel.c:392: if(!SLC1) {
      000366 20*02 04         [24] 1205 	jb	_SLC1,00114$
                                   1206 ;	fire_alarm_panel.c:393: BUZ = 1; // Buzzer ON if not silenced
                                   1207 ;	assignBit
      000369 D2 95            [12] 1208 	setb	_BUZ
      00036B 80 2E            [24] 1209 	sjmp	00130$
      00036D                       1210 00114$:
                                   1211 ;	fire_alarm_panel.c:395: BUZ = 0; // Buzzer OFF if silenced
                                   1212 ;	assignBit
      00036D C2 95            [12] 1213 	clr	_BUZ
      00036F 80 2A            [24] 1214 	sjmp	00130$
      000371                       1215 00123$:
                                   1216 ;	fire_alarm_panel.c:400: PR1 = 0;
                                   1217 ;	assignBit
      000371 C2*05            [12] 1218 	clr	_PR1
                                   1219 ;	fire_alarm_panel.c:401: SLC1 = 0;
                                   1220 ;	assignBit
      000373 C2*02            [12] 1221 	clr	_SLC1
                                   1222 ;	fire_alarm_panel.c:404: if(FIRE2 && OPEN2 && SHORT2) { // Zone 2 also healthy
      000375 30 83 0E         [24] 1223 	jnb	_FIRE2,00117$
      000378 30 84 0B         [24] 1224 	jnb	_OPEN2,00117$
      00037B 30 85 08         [24] 1225 	jnb	_SHORT2,00117$
                                   1226 ;	fire_alarm_panel.c:405: CFTLR = 0;
                                   1227 ;	assignBit
      00037E C2 97            [12] 1228 	clr	_CFTLR
                                   1229 ;	fire_alarm_panel.c:406: CFLR = 0;
                                   1230 ;	assignBit
      000380 C2 96            [12] 1231 	clr	_CFLR
                                   1232 ;	fire_alarm_panel.c:407: HOT = 0;
                                   1233 ;	assignBit
      000382 C2 94            [12] 1234 	clr	_HOT
                                   1235 ;	fire_alarm_panel.c:408: BUZ = 0;
                                   1236 ;	assignBit
      000384 C2 95            [12] 1237 	clr	_BUZ
      000386                       1238 00117$:
                                   1239 ;	fire_alarm_panel.c:411: if(ZONE1) { // If zone is not isolated
      000386 30 A4 12         [24] 1240 	jnb	_ZONE1,00130$
                                   1241 ;	fire_alarm_panel.c:412: lcd_cmd(LINE2);
      000389 90r00r0B         [24] 1242 	mov	dptr,#_LINE2
      00038C 75 F0 80         [24] 1243 	mov	b, #0x80
      00038F 12r05r42         [24] 1244 	lcall	_lcd_cmd
                                   1245 ;	fire_alarm_panel.c:413: lcd_disp(ISO1H);
      000392 90r00rEA         [24] 1246 	mov	dptr,#_ISO1H
      000395 75 F0 80         [24] 1247 	mov	b, #0x80
      000398 12r05r96         [24] 1248 	lcall	_lcd_disp
      00039B                       1249 00130$:
                                   1250 ;	fire_alarm_panel.c:417: delay1();
                                   1251 ;	fire_alarm_panel.c:418: }
      00039B 02r06r10         [24] 1252 	ljmp	_delay1
                                   1253 ;------------------------------------------------------------
                                   1254 ;Allocation info for local variables in function 'prz2'
                                   1255 ;------------------------------------------------------------
                                   1256 ;	fire_alarm_panel.c:420: void prz2(void)
                                   1257 ;	-----------------------------------------
                                   1258 ;	 function prz2
                                   1259 ;	-----------------------------------------
      00039E                       1260 _prz2:
                                   1261 ;	fire_alarm_panel.c:422: if(!Z2) { // Fixed: should check Z2 for zone 2 testing
      00039E 20*01 12         [24] 1262 	jb	_Z2,00102$
                                   1263 ;	fire_alarm_panel.c:423: lcd_cmd(LINE1);
      0003A1 90r00r07         [24] 1264 	mov	dptr,#_LINE1
      0003A4 75 F0 80         [24] 1265 	mov	b, #0x80
      0003A7 12r05r42         [24] 1266 	lcall	_lcd_cmd
                                   1267 ;	fire_alarm_panel.c:424: lcd_disp(TZONE2);
      0003AA 90r00r51         [24] 1268 	mov	dptr,#_TZONE2
      0003AD 75 F0 80         [24] 1269 	mov	b, #0x80
      0003B0 12r05r96         [24] 1270 	lcall	_lcd_disp
      0003B3                       1271 00102$:
                                   1272 ;	fire_alarm_panel.c:428: if(!SHORT2) {
      0003B3 20 85 25         [24] 1273 	jb	_SHORT2,00129$
                                   1274 ;	fire_alarm_panel.c:429: lcd_cmd(LINE2);
      0003B6 90r00r0B         [24] 1275 	mov	dptr,#_LINE2
      0003B9 75 F0 80         [24] 1276 	mov	b, #0x80
      0003BC 12r05r42         [24] 1277 	lcall	_lcd_cmd
                                   1278 ;	fire_alarm_panel.c:430: lcd_disp(SHORT);
      0003BF 90r00r73         [24] 1279 	mov	dptr,#_SHORT
      0003C2 75 F0 80         [24] 1280 	mov	b, #0x80
      0003C5 12r05r96         [24] 1281 	lcall	_lcd_disp
                                   1282 ;	fire_alarm_panel.c:431: CFTLR = 1;  // Fault LED ON
                                   1283 ;	assignBit
      0003C8 D2 97            [12] 1284 	setb	_CFTLR
                                   1285 ;	fire_alarm_panel.c:432: CFLR = 0;   // Fire LED OFF
                                   1286 ;	assignBit
      0003CA C2 96            [12] 1287 	clr	_CFLR
                                   1288 ;	fire_alarm_panel.c:433: HOT = 0;    // Hooter OFF
                                   1289 ;	assignBit
      0003CC C2 94            [12] 1290 	clr	_HOT
                                   1291 ;	fire_alarm_panel.c:434: if(!SLC2) {
      0003CE 20*03 05         [24] 1292 	jb	_SLC2,00104$
                                   1293 ;	fire_alarm_panel.c:435: BUZ = 1; // Buzzer ON if not silenced
                                   1294 ;	assignBit
      0003D1 D2 95            [12] 1295 	setb	_BUZ
      0003D3 02r04r5C         [24] 1296 	ljmp	00130$
      0003D6                       1297 00104$:
                                   1298 ;	fire_alarm_panel.c:437: BUZ = 0; // Buzzer OFF if silenced
                                   1299 ;	assignBit
      0003D6 C2 95            [12] 1300 	clr	_BUZ
      0003D8 02r04r5C         [24] 1301 	ljmp	00130$
      0003DB                       1302 00129$:
                                   1303 ;	fire_alarm_panel.c:439: } else if(!FIRE2) {
      0003DB 20 83 2E         [24] 1304 	jb	_FIRE2,00126$
                                   1305 ;	fire_alarm_panel.c:440: lcd_cmd(LINE2);
      0003DE 90r00r0B         [24] 1306 	mov	dptr,#_LINE2
      0003E1 75 F0 80         [24] 1307 	mov	b, #0x80
      0003E4 12r05r42         [24] 1308 	lcall	_lcd_cmd
                                   1309 ;	fire_alarm_panel.c:441: lcd_disp(FIRE);
      0003E7 90r00r62         [24] 1310 	mov	dptr,#_FIRE
      0003EA 75 F0 80         [24] 1311 	mov	b, #0x80
      0003ED 12r05r96         [24] 1312 	lcall	_lcd_disp
                                   1313 ;	fire_alarm_panel.c:442: CFLR = 1;   // Fire LED ON
                                   1314 ;	assignBit
      0003F0 D2 96            [12] 1315 	setb	_CFLR
                                   1316 ;	fire_alarm_panel.c:444: if(FIRE1 && OPEN1 && SHORT1) { // Zone 1 healthy
      0003F2 30 80 08         [24] 1317 	jnb	_FIRE1,00107$
      0003F5 30 81 05         [24] 1318 	jnb	_OPEN1,00107$
      0003F8 30 82 02         [24] 1319 	jnb	_SHORT1,00107$
                                   1320 ;	fire_alarm_panel.c:445: CFTLR = 0;
                                   1321 ;	assignBit
      0003FB C2 97            [12] 1322 	clr	_CFTLR
      0003FD                       1323 00107$:
                                   1324 ;	fire_alarm_panel.c:447: if(!SLC2) {
      0003FD 20*03 06         [24] 1325 	jb	_SLC2,00111$
                                   1326 ;	fire_alarm_panel.c:448: BUZ = 1;  // Buzzer ON if not silenced
                                   1327 ;	assignBit
      000400 D2 95            [12] 1328 	setb	_BUZ
                                   1329 ;	fire_alarm_panel.c:449: HOT = 1;  // Hooter ON if not silenced
                                   1330 ;	assignBit
      000402 D2 94            [12] 1331 	setb	_HOT
      000404 80 56            [24] 1332 	sjmp	00130$
      000406                       1333 00111$:
                                   1334 ;	fire_alarm_panel.c:451: BUZ = 0;  // Buzzer OFF if silenced
                                   1335 ;	assignBit
      000406 C2 95            [12] 1336 	clr	_BUZ
                                   1337 ;	fire_alarm_panel.c:452: HOT = 0;  // Hooter OFF if silenced
                                   1338 ;	assignBit
      000408 C2 94            [12] 1339 	clr	_HOT
      00040A 80 50            [24] 1340 	sjmp	00130$
      00040C                       1341 00126$:
                                   1342 ;	fire_alarm_panel.c:454: } else if(!OPEN2) {
      00040C 20 84 23         [24] 1343 	jb	_OPEN2,00123$
                                   1344 ;	fire_alarm_panel.c:455: lcd_cmd(LINE2);
      00040F 90r00r0B         [24] 1345 	mov	dptr,#_LINE2
      000412 75 F0 80         [24] 1346 	mov	b, #0x80
      000415 12r05r42         [24] 1347 	lcall	_lcd_cmd
                                   1348 ;	fire_alarm_panel.c:456: lcd_disp(OPEN);
      000418 90r00r84         [24] 1349 	mov	dptr,#_OPEN
      00041B 75 F0 80         [24] 1350 	mov	b, #0x80
      00041E 12r05r96         [24] 1351 	lcall	_lcd_disp
                                   1352 ;	fire_alarm_panel.c:457: CFTLR = 1;  // Fault LED ON
                                   1353 ;	assignBit
      000421 D2 97            [12] 1354 	setb	_CFTLR
                                   1355 ;	fire_alarm_panel.c:458: CFLR = 0;   // Fire LED OFF
                                   1356 ;	assignBit
      000423 C2 96            [12] 1357 	clr	_CFLR
                                   1358 ;	fire_alarm_panel.c:459: HOT = 0;    // Hooter OFF
                                   1359 ;	assignBit
      000425 C2 94            [12] 1360 	clr	_HOT
                                   1361 ;	fire_alarm_panel.c:460: if(!SLC2) {
      000427 20*03 04         [24] 1362 	jb	_SLC2,00114$
                                   1363 ;	fire_alarm_panel.c:461: BUZ = 1; // Buzzer ON if not silenced
                                   1364 ;	assignBit
      00042A D2 95            [12] 1365 	setb	_BUZ
      00042C 80 2E            [24] 1366 	sjmp	00130$
      00042E                       1367 00114$:
                                   1368 ;	fire_alarm_panel.c:463: BUZ = 0; // Buzzer OFF if silenced
                                   1369 ;	assignBit
      00042E C2 95            [12] 1370 	clr	_BUZ
      000430 80 2A            [24] 1371 	sjmp	00130$
      000432                       1372 00123$:
                                   1373 ;	fire_alarm_panel.c:468: PR2 = 0;
                                   1374 ;	assignBit
      000432 C2*06            [12] 1375 	clr	_PR2
                                   1376 ;	fire_alarm_panel.c:469: SLC2 = 0;
                                   1377 ;	assignBit
      000434 C2*03            [12] 1378 	clr	_SLC2
                                   1379 ;	fire_alarm_panel.c:472: if(FIRE1 && OPEN1 && SHORT1) { // Zone 1 also healthy
      000436 30 80 0E         [24] 1380 	jnb	_FIRE1,00117$
      000439 30 81 0B         [24] 1381 	jnb	_OPEN1,00117$
      00043C 30 82 08         [24] 1382 	jnb	_SHORT1,00117$
                                   1383 ;	fire_alarm_panel.c:473: CFTLR = 0;
                                   1384 ;	assignBit
      00043F C2 97            [12] 1385 	clr	_CFTLR
                                   1386 ;	fire_alarm_panel.c:474: CFLR = 0;
                                   1387 ;	assignBit
      000441 C2 96            [12] 1388 	clr	_CFLR
                                   1389 ;	fire_alarm_panel.c:475: HOT = 0;
                                   1390 ;	assignBit
      000443 C2 94            [12] 1391 	clr	_HOT
                                   1392 ;	fire_alarm_panel.c:476: BUZ = 0;
                                   1393 ;	assignBit
      000445 C2 95            [12] 1394 	clr	_BUZ
      000447                       1395 00117$:
                                   1396 ;	fire_alarm_panel.c:479: if(ZONE2) { // If zone is not isolated
      000447 30 A5 12         [24] 1397 	jnb	_ZONE2,00130$
                                   1398 ;	fire_alarm_panel.c:480: lcd_cmd(LINE2);
      00044A 90r00r0B         [24] 1399 	mov	dptr,#_LINE2
      00044D 75 F0 80         [24] 1400 	mov	b, #0x80
      000450 12r05r42         [24] 1401 	lcall	_lcd_cmd
                                   1402 ;	fire_alarm_panel.c:481: lcd_disp(ISO2H);
      000453 90r00rFB         [24] 1403 	mov	dptr,#_ISO2H
      000456 75 F0 80         [24] 1404 	mov	b, #0x80
      000459 12r05r96         [24] 1405 	lcall	_lcd_disp
      00045C                       1406 00130$:
                                   1407 ;	fire_alarm_panel.c:485: delay1();
                                   1408 ;	fire_alarm_panel.c:486: }
      00045C 02r06r10         [24] 1409 	ljmp	_delay1
                                   1410 ;------------------------------------------------------------
                                   1411 ;Allocation info for local variables in function 'receive'
                                   1412 ;------------------------------------------------------------
                                   1413 ;received_data Allocated to registers r7 
                                   1414 ;------------------------------------------------------------
                                   1415 ;	fire_alarm_panel.c:488: void receive(void)
                                   1416 ;	-----------------------------------------
                                   1417 ;	 function receive
                                   1418 ;	-----------------------------------------
      00045F                       1419 _receive:
                                   1420 ;	fire_alarm_panel.c:492: received_data = SBUF;
      00045F AF 99            [24] 1421 	mov	r7,_SBUF
                                   1422 ;	fire_alarm_panel.c:493: RI = 0;
                                   1423 ;	assignBit
      000461 C2 98            [12] 1424 	clr	_RI
                                   1425 ;	fire_alarm_panel.c:494: SBUF = received_data;
      000463 8F 99            [24] 1426 	mov	_SBUF,r7
                                   1427 ;	fire_alarm_panel.c:495: while(!TI);
      000465                       1428 00101$:
                                   1429 ;	fire_alarm_panel.c:496: TI = 0;
                                   1430 ;	assignBit
      000465 10 99 02         [24] 1431 	jbc	_TI,00281$
      000468 80 FB            [24] 1432 	sjmp	00101$
      00046A                       1433 00281$:
                                   1434 ;	fire_alarm_panel.c:498: switch(received_data) {
      00046A BF 00 02         [24] 1435 	cjne	r7,#0x00,00282$
      00046D 80 32            [24] 1436 	sjmp	00106$
      00046F                       1437 00282$:
      00046F BF 01 02         [24] 1438 	cjne	r7,#0x01,00283$
      000472 80 3C            [24] 1439 	sjmp	00110$
      000474                       1440 00283$:
      000474 BF 02 02         [24] 1441 	cjne	r7,#0x02,00284$
      000477 80 46            [24] 1442 	sjmp	00114$
      000479                       1443 00284$:
      000479 BF 03 02         [24] 1444 	cjne	r7,#0x03,00285$
      00047C 80 55            [24] 1445 	sjmp	00122$
      00047E                       1446 00285$:
      00047E BF 40 02         [24] 1447 	cjne	r7,#0x40,00286$
      000481 80 46            [24] 1448 	sjmp	00118$
      000483                       1449 00286$:
      000483 BF AA 02         [24] 1450 	cjne	r7,#0xaa,00287$
      000486 80 0A            [24] 1451 	sjmp	00104$
      000488                       1452 00287$:
      000488 BF BB 02         [24] 1453 	cjne	r7,#0xbb,00288$
      00048B 80 0B            [24] 1454 	sjmp	00105$
      00048D                       1455 00288$:
                                   1456 ;	fire_alarm_panel.c:499: case 0xAA:
      00048D BF FF 5C         [24] 1457 	cjne	r7,#0xff,00130$
      000490 80 50            [24] 1458 	sjmp	00126$
      000492                       1459 00104$:
                                   1460 ;	fire_alarm_panel.c:500: send_data(P2);
      000492 85 A0 82         [24] 1461 	mov	dpl, _P2
                                   1462 ;	fire_alarm_panel.c:501: break;
                                   1463 ;	fire_alarm_panel.c:503: case 0xBB:
      000495 02r04rF4         [24] 1464 	ljmp	_send_data
      000498                       1465 00105$:
                                   1466 ;	fire_alarm_panel.c:504: send_data(P0 | 0xC0);
      000498 74 C0            [12] 1467 	mov	a,#0xc0
      00049A 45 80            [12] 1468 	orl	a,_P0
      00049C F5 82            [12] 1469 	mov	dpl,a
                                   1470 ;	fire_alarm_panel.c:505: break;
                                   1471 ;	fire_alarm_panel.c:507: case 0x00:
      00049E 02r04rF4         [24] 1472 	ljmp	_send_data
      0004A1                       1473 00106$:
                                   1474 ;	fire_alarm_panel.c:508: silence_alarms();
      0004A1 C0 07            [24] 1475 	push	ar7
      0004A3 12r04rFD         [24] 1476 	lcall	_silence_alarms
      0004A6 D0 07            [24] 1477 	pop	ar7
                                   1478 ;	fire_alarm_panel.c:509: SBUF = received_data;
      0004A8 8F 99            [24] 1479 	mov	_SBUF,r7
                                   1480 ;	fire_alarm_panel.c:510: while(!TI);
      0004AA                       1481 00107$:
                                   1482 ;	fire_alarm_panel.c:511: TI = 0;
                                   1483 ;	assignBit
      0004AA 10 99 02         [24] 1484 	jbc	_TI,00290$
      0004AD 80 FB            [24] 1485 	sjmp	00107$
      0004AF                       1486 00290$:
                                   1487 ;	fire_alarm_panel.c:512: break;
                                   1488 ;	fire_alarm_panel.c:514: case 0x01:
      0004AF 22               [24] 1489 	ret
      0004B0                       1490 00110$:
                                   1491 ;	fire_alarm_panel.c:515: silence_alarms();
      0004B0 C0 07            [24] 1492 	push	ar7
      0004B2 12r04rFD         [24] 1493 	lcall	_silence_alarms
      0004B5 D0 07            [24] 1494 	pop	ar7
                                   1495 ;	fire_alarm_panel.c:516: SBUF = received_data;
      0004B7 8F 99            [24] 1496 	mov	_SBUF,r7
                                   1497 ;	fire_alarm_panel.c:517: while(!TI);
      0004B9                       1498 00111$:
                                   1499 ;	fire_alarm_panel.c:518: TI = 0;
                                   1500 ;	assignBit
      0004B9 10 99 02         [24] 1501 	jbc	_TI,00291$
      0004BC 80 FB            [24] 1502 	sjmp	00111$
      0004BE                       1503 00291$:
                                   1504 ;	fire_alarm_panel.c:519: break;
                                   1505 ;	fire_alarm_panel.c:521: case 0x02:
      0004BE 22               [24] 1506 	ret
      0004BF                       1507 00114$:
                                   1508 ;	fire_alarm_panel.c:522: EVQ = 0;
                                   1509 ;	assignBit
      0004BF C2 A1            [12] 1510 	clr	_EVQ
                                   1511 ;	fire_alarm_panel.c:523: SBUF = received_data;
      0004C1 8F 99            [24] 1512 	mov	_SBUF,r7
                                   1513 ;	fire_alarm_panel.c:524: while(!TI);
      0004C3                       1514 00115$:
                                   1515 ;	fire_alarm_panel.c:525: TI = 0;
                                   1516 ;	assignBit
      0004C3 10 99 02         [24] 1517 	jbc	_TI,00292$
      0004C6 80 FB            [24] 1518 	sjmp	00115$
      0004C8                       1519 00292$:
                                   1520 ;	fire_alarm_panel.c:526: break;
                                   1521 ;	fire_alarm_panel.c:528: case 0x40:
      0004C8 22               [24] 1522 	ret
      0004C9                       1523 00118$:
                                   1524 ;	fire_alarm_panel.c:529: Z2 = 1;
                                   1525 ;	assignBit
      0004C9 D2*01            [12] 1526 	setb	_Z2
                                   1527 ;	fire_alarm_panel.c:530: SBUF = received_data;
      0004CB 8F 99            [24] 1528 	mov	_SBUF,r7
                                   1529 ;	fire_alarm_panel.c:531: while(!TI);
      0004CD                       1530 00119$:
                                   1531 ;	fire_alarm_panel.c:532: TI = 0;
                                   1532 ;	assignBit
      0004CD 10 99 02         [24] 1533 	jbc	_TI,00293$
      0004D0 80 FB            [24] 1534 	sjmp	00119$
      0004D2                       1535 00293$:
                                   1536 ;	fire_alarm_panel.c:533: break;
                                   1537 ;	fire_alarm_panel.c:535: case 0x03:
      0004D2 22               [24] 1538 	ret
      0004D3                       1539 00122$:
                                   1540 ;	fire_alarm_panel.c:536: silence_alarms();
      0004D3 C0 07            [24] 1541 	push	ar7
      0004D5 12r04rFD         [24] 1542 	lcall	_silence_alarms
      0004D8 D0 07            [24] 1543 	pop	ar7
                                   1544 ;	fire_alarm_panel.c:537: SBUF = received_data;
      0004DA 8F 99            [24] 1545 	mov	_SBUF,r7
                                   1546 ;	fire_alarm_panel.c:538: while(!TI);
      0004DC                       1547 00123$:
                                   1548 ;	fire_alarm_panel.c:539: TI = 0;
                                   1549 ;	assignBit
      0004DC 10 99 02         [24] 1550 	jbc	_TI,00294$
      0004DF 80 FB            [24] 1551 	sjmp	00123$
      0004E1                       1552 00294$:
                                   1553 ;	fire_alarm_panel.c:540: break;
                                   1554 ;	fire_alarm_panel.c:542: case 0xFF:
      0004E1 22               [24] 1555 	ret
      0004E2                       1556 00126$:
                                   1557 ;	fire_alarm_panel.c:543: SBUF = received_data;
      0004E2 8F 99            [24] 1558 	mov	_SBUF,r7
                                   1559 ;	fire_alarm_panel.c:544: while(!TI);
      0004E4                       1560 00127$:
                                   1561 ;	fire_alarm_panel.c:545: TI = 0;
                                   1562 ;	assignBit
      0004E4 10 99 02         [24] 1563 	jbc	_TI,00295$
      0004E7 80 FB            [24] 1564 	sjmp	00127$
      0004E9                       1565 00295$:
                                   1566 ;	fire_alarm_panel.c:547: init_system();
                                   1567 ;	fire_alarm_panel.c:548: break;
                                   1568 ;	fire_alarm_panel.c:550: default:
      0004E9 02r02rA7         [24] 1569 	ljmp	_init_system
      0004EC                       1570 00130$:
                                   1571 ;	fire_alarm_panel.c:552: SBUF = received_data;
      0004EC 8F 99            [24] 1572 	mov	_SBUF,r7
                                   1573 ;	fire_alarm_panel.c:553: while(!TI);
      0004EE                       1574 00131$:
                                   1575 ;	fire_alarm_panel.c:554: TI = 0;
                                   1576 ;	assignBit
      0004EE 10 99 02         [24] 1577 	jbc	_TI,00296$
      0004F1 80 FB            [24] 1578 	sjmp	00131$
      0004F3                       1579 00296$:
                                   1580 ;	fire_alarm_panel.c:556: }
                                   1581 ;	fire_alarm_panel.c:557: }
      0004F3 22               [24] 1582 	ret
                                   1583 ;------------------------------------------------------------
                                   1584 ;Allocation info for local variables in function 'send_data'
                                   1585 ;------------------------------------------------------------
                                   1586 ;data          Allocated to registers 
                                   1587 ;------------------------------------------------------------
                                   1588 ;	fire_alarm_panel.c:559: void send_data(unsigned char data)
                                   1589 ;	-----------------------------------------
                                   1590 ;	 function send_data
                                   1591 ;	-----------------------------------------
      0004F4                       1592 _send_data:
      0004F4 85 82 99         [24] 1593 	mov	_SBUF,dpl
                                   1594 ;	fire_alarm_panel.c:562: while(!TI);
      0004F7                       1595 00101$:
                                   1596 ;	fire_alarm_panel.c:563: TI = 0;
                                   1597 ;	assignBit
      0004F7 10 99 02         [24] 1598 	jbc	_TI,00118$
      0004FA 80 FB            [24] 1599 	sjmp	00101$
      0004FC                       1600 00118$:
                                   1601 ;	fire_alarm_panel.c:564: }
      0004FC 22               [24] 1602 	ret
                                   1603 ;------------------------------------------------------------
                                   1604 ;Allocation info for local variables in function 'silence_alarms'
                                   1605 ;------------------------------------------------------------
                                   1606 ;	fire_alarm_panel.c:566: void silence_alarms(void)
                                   1607 ;	-----------------------------------------
                                   1608 ;	 function silence_alarms
                                   1609 ;	-----------------------------------------
      0004FD                       1610 _silence_alarms:
                                   1611 ;	fire_alarm_panel.c:568: SLC1 = 1;
                                   1612 ;	assignBit
      0004FD D2*02            [12] 1613 	setb	_SLC1
                                   1614 ;	fire_alarm_panel.c:569: SLC2 = 1;
                                   1615 ;	assignBit
      0004FF D2*03            [12] 1616 	setb	_SLC2
                                   1617 ;	fire_alarm_panel.c:570: LISO = 1;
                                   1618 ;	assignBit
      000501 D2*04            [12] 1619 	setb	_LISO
                                   1620 ;	fire_alarm_panel.c:571: BUZ = 0;
                                   1621 ;	assignBit
      000503 C2 95            [12] 1622 	clr	_BUZ
                                   1623 ;	fire_alarm_panel.c:572: HOT = 0;
                                   1624 ;	assignBit
      000505 C2 94            [12] 1625 	clr	_HOT
                                   1626 ;	fire_alarm_panel.c:573: }
      000507 22               [24] 1627 	ret
                                   1628 ;------------------------------------------------------------
                                   1629 ;Allocation info for local variables in function 'spliter'
                                   1630 ;------------------------------------------------------------
                                   1631 ;data          Allocated to registers r7 
                                   1632 ;------------------------------------------------------------
                                   1633 ;	fire_alarm_panel.c:575: void spliter(unsigned char data)
                                   1634 ;	-----------------------------------------
                                   1635 ;	 function spliter
                                   1636 ;	-----------------------------------------
      000508                       1637 _spliter:
      000508 AF 82            [24] 1638 	mov	r7, dpl
                                   1639 ;	fire_alarm_panel.c:577: L = data & 0x0F;
      00050A 74 0F            [12] 1640 	mov	a,#0x0f
      00050C 5F               [12] 1641 	anl	a,r7
      00050D F5*03            [12] 1642 	mov	_L,a
                                   1643 ;	fire_alarm_panel.c:578: U = (data >> 4) & 0x0F;
      00050F EF               [12] 1644 	mov	a,r7
      000510 C4               [12] 1645 	swap	a
      000511 54 0F            [12] 1646 	anl	a,#0x0f
      000513 F5*02            [12] 1647 	mov	_U,a
                                   1648 ;	fire_alarm_panel.c:579: }
      000515 22               [24] 1649 	ret
                                   1650 ;------------------------------------------------------------
                                   1651 ;Allocation info for local variables in function 'move'
                                   1652 ;------------------------------------------------------------
                                   1653 ;data          Allocated to registers r7 
                                   1654 ;------------------------------------------------------------
                                   1655 ;	fire_alarm_panel.c:581: void move(unsigned char data)
                                   1656 ;	-----------------------------------------
                                   1657 ;	 function move
                                   1658 ;	-----------------------------------------
      000516                       1659 _move:
      000516 AF 82            [24] 1660 	mov	r7, dpl
                                   1661 ;	fire_alarm_panel.c:583: P1 = (P1 & 0xF0) | data;
      000518 E5 90            [12] 1662 	mov	a,_P1
      00051A 54 F0            [12] 1663 	anl	a,#0xf0
      00051C 4F               [12] 1664 	orl	a,r7
      00051D F5 90            [12] 1665 	mov	_P1,a
                                   1666 ;	fire_alarm_panel.c:584: EN = 1;
                                   1667 ;	assignBit
      00051F D2 87            [12] 1668 	setb	_EN
                                   1669 ;	fire_alarm_panel.c:585: delay();
      000521 12r06r23         [24] 1670 	lcall	_delay
                                   1671 ;	fire_alarm_panel.c:586: EN = 0;
                                   1672 ;	assignBit
      000524 C2 87            [12] 1673 	clr	_EN
                                   1674 ;	fire_alarm_panel.c:587: delay();
                                   1675 ;	fire_alarm_panel.c:588: }
      000526 02r06r23         [24] 1676 	ljmp	_delay
                                   1677 ;------------------------------------------------------------
                                   1678 ;Allocation info for local variables in function 'move1'
                                   1679 ;------------------------------------------------------------
                                   1680 ;data          Allocated to registers r7 
                                   1681 ;------------------------------------------------------------
                                   1682 ;	fire_alarm_panel.c:590: void move1(unsigned char data)
                                   1683 ;	-----------------------------------------
                                   1684 ;	 function move1
                                   1685 ;	-----------------------------------------
      000529                       1686 _move1:
      000529 AF 82            [24] 1687 	mov	r7, dpl
                                   1688 ;	fire_alarm_panel.c:592: P1 = (P1 & 0xF0) | data;
      00052B E5 90            [12] 1689 	mov	a,_P1
      00052D 54 F0            [12] 1690 	anl	a,#0xf0
      00052F 4F               [12] 1691 	orl	a,r7
      000530 F5 90            [12] 1692 	mov	_P1,a
                                   1693 ;	fire_alarm_panel.c:593: EN = 1;
                                   1694 ;	assignBit
      000532 D2 87            [12] 1695 	setb	_EN
                                   1696 ;	fire_alarm_panel.c:597: __endasm;
      000534 00               [12] 1697 	nop
                                   1698 ;	fire_alarm_panel.c:598: EN = 0;
                                   1699 ;	assignBit
      000535 C2 87            [12] 1700 	clr	_EN
                                   1701 ;	fire_alarm_panel.c:608: __endasm;
      000537 00               [12] 1702 	nop
      000538 00               [12] 1703 	nop
      000539 00               [12] 1704 	nop
      00053A 00               [12] 1705 	nop
      00053B 00               [12] 1706 	nop
      00053C 00               [12] 1707 	nop
      00053D 00               [12] 1708 	nop
      00053E 00               [12] 1709 	nop
                                   1710 ;	fire_alarm_panel.c:609: EN = 1;
                                   1711 ;	assignBit
      00053F D2 87            [12] 1712 	setb	_EN
                                   1713 ;	fire_alarm_panel.c:610: }
      000541 22               [24] 1714 	ret
                                   1715 ;------------------------------------------------------------
                                   1716 ;Allocation info for local variables in function 'lcd_cmd'
                                   1717 ;------------------------------------------------------------
                                   1718 ;cmd_ptr       Allocated to registers r5 r6 r7 
                                   1719 ;cmd           Allocated to registers r3 
                                   1720 ;i             Allocated to registers r4 
                                   1721 ;------------------------------------------------------------
                                   1722 ;	fire_alarm_panel.c:612: void lcd_cmd(unsigned char *cmd_ptr)
                                   1723 ;	-----------------------------------------
                                   1724 ;	 function lcd_cmd
                                   1725 ;	-----------------------------------------
      000542                       1726 _lcd_cmd:
      000542 AD 82            [24] 1727 	mov	r5, dpl
      000544 AE 83            [24] 1728 	mov	r6, dph
      000546 AF F0            [24] 1729 	mov	r7, b
                                   1730 ;	fire_alarm_panel.c:617: while((cmd = cmd_ptr[i]) != 0) {
      000548 7C 00            [12] 1731 	mov	r4,#0x00
      00054A                       1732 00101$:
      00054A EC               [12] 1733 	mov	a,r4
      00054B 2D               [12] 1734 	add	a, r5
      00054C F9               [12] 1735 	mov	r1,a
      00054D E4               [12] 1736 	clr	a
      00054E 3E               [12] 1737 	addc	a, r6
      00054F FA               [12] 1738 	mov	r2,a
      000550 8F 03            [24] 1739 	mov	ar3,r7
      000552 89 82            [24] 1740 	mov	dpl,r1
      000554 8A 83            [24] 1741 	mov	dph,r2
      000556 8B F0            [24] 1742 	mov	b,r3
      000558 12r00r00         [24] 1743 	lcall	__gptrget
      00055B FB               [12] 1744 	mov	r3,a
      00055C 60 26            [24] 1745 	jz	00104$
                                   1746 ;	fire_alarm_panel.c:618: i++;
      00055E 0C               [12] 1747 	inc	r4
                                   1748 ;	fire_alarm_panel.c:619: RS = 0;
                                   1749 ;	assignBit
      00055F C2 86            [12] 1750 	clr	_RS
                                   1751 ;	fire_alarm_panel.c:620: spliter(cmd);
      000561 8B 82            [24] 1752 	mov	dpl, r3
      000563 C0 07            [24] 1753 	push	ar7
      000565 C0 06            [24] 1754 	push	ar6
      000567 C0 05            [24] 1755 	push	ar5
      000569 C0 04            [24] 1756 	push	ar4
      00056B 12r05r08         [24] 1757 	lcall	_spliter
                                   1758 ;	fire_alarm_panel.c:621: move(U);
      00056E 85*02 82         [24] 1759 	mov	dpl, _U
      000571 12r05r16         [24] 1760 	lcall	_move
                                   1761 ;	fire_alarm_panel.c:622: move(L);
      000574 85*03 82         [24] 1762 	mov	dpl, _L
      000577 12r05r16         [24] 1763 	lcall	_move
      00057A D0 04            [24] 1764 	pop	ar4
      00057C D0 05            [24] 1765 	pop	ar5
      00057E D0 06            [24] 1766 	pop	ar6
      000580 D0 07            [24] 1767 	pop	ar7
      000582 80 C6            [24] 1768 	sjmp	00101$
      000584                       1769 00104$:
                                   1770 ;	fire_alarm_panel.c:624: }
      000584 22               [24] 1771 	ret
                                   1772 ;------------------------------------------------------------
                                   1773 ;Allocation info for local variables in function 'lcd_data'
                                   1774 ;------------------------------------------------------------
                                   1775 ;data          Allocated to registers 
                                   1776 ;------------------------------------------------------------
                                   1777 ;	fire_alarm_panel.c:626: void lcd_data(unsigned char data)
                                   1778 ;	-----------------------------------------
                                   1779 ;	 function lcd_data
                                   1780 ;	-----------------------------------------
      000585                       1781 _lcd_data:
                                   1782 ;	fire_alarm_panel.c:628: RS = 1;
                                   1783 ;	assignBit
      000585 D2 86            [12] 1784 	setb	_RS
                                   1785 ;	fire_alarm_panel.c:629: spliter(data);
      000587 12r05r08         [24] 1786 	lcall	_spliter
                                   1787 ;	fire_alarm_panel.c:630: move1(U);
      00058A 85*02 82         [24] 1788 	mov	dpl, _U
      00058D 12r05r29         [24] 1789 	lcall	_move1
                                   1790 ;	fire_alarm_panel.c:631: move1(L);
      000590 85*03 82         [24] 1791 	mov	dpl, _L
                                   1792 ;	fire_alarm_panel.c:632: }
      000593 02r05r29         [24] 1793 	ljmp	_move1
                                   1794 ;------------------------------------------------------------
                                   1795 ;Allocation info for local variables in function 'lcd_disp'
                                   1796 ;------------------------------------------------------------
                                   1797 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1798 ;ch            Allocated to registers r3 
                                   1799 ;i             Allocated to registers r4 
                                   1800 ;------------------------------------------------------------
                                   1801 ;	fire_alarm_panel.c:634: void lcd_disp(unsigned char *text_ptr)
                                   1802 ;	-----------------------------------------
                                   1803 ;	 function lcd_disp
                                   1804 ;	-----------------------------------------
      000596                       1805 _lcd_disp:
      000596 AD 82            [24] 1806 	mov	r5, dpl
      000598 AE 83            [24] 1807 	mov	r6, dph
      00059A AF F0            [24] 1808 	mov	r7, b
                                   1809 ;	fire_alarm_panel.c:639: while((ch = text_ptr[i]) != 0) {
      00059C 7C 00            [12] 1810 	mov	r4,#0x00
      00059E                       1811 00101$:
      00059E EC               [12] 1812 	mov	a,r4
      00059F 2D               [12] 1813 	add	a, r5
      0005A0 F9               [12] 1814 	mov	r1,a
      0005A1 E4               [12] 1815 	clr	a
      0005A2 3E               [12] 1816 	addc	a, r6
      0005A3 FA               [12] 1817 	mov	r2,a
      0005A4 8F 03            [24] 1818 	mov	ar3,r7
      0005A6 89 82            [24] 1819 	mov	dpl,r1
      0005A8 8A 83            [24] 1820 	mov	dph,r2
      0005AA 8B F0            [24] 1821 	mov	b,r3
      0005AC 12r00r00         [24] 1822 	lcall	__gptrget
      0005AF FB               [12] 1823 	mov	r3,a
      0005B0 60 18            [24] 1824 	jz	00104$
                                   1825 ;	fire_alarm_panel.c:640: i++;
      0005B2 0C               [12] 1826 	inc	r4
                                   1827 ;	fire_alarm_panel.c:641: lcd_data(ch);
      0005B3 8B 82            [24] 1828 	mov	dpl, r3
      0005B5 C0 07            [24] 1829 	push	ar7
      0005B7 C0 06            [24] 1830 	push	ar6
      0005B9 C0 05            [24] 1831 	push	ar5
      0005BB C0 04            [24] 1832 	push	ar4
      0005BD 12r05r85         [24] 1833 	lcall	_lcd_data
      0005C0 D0 04            [24] 1834 	pop	ar4
      0005C2 D0 05            [24] 1835 	pop	ar5
      0005C4 D0 06            [24] 1836 	pop	ar6
      0005C6 D0 07            [24] 1837 	pop	ar7
      0005C8 80 D4            [24] 1838 	sjmp	00101$
      0005CA                       1839 00104$:
                                   1840 ;	fire_alarm_panel.c:643: }
      0005CA 22               [24] 1841 	ret
                                   1842 ;------------------------------------------------------------
                                   1843 ;Allocation info for local variables in function 'lcd_disp1'
                                   1844 ;------------------------------------------------------------
                                   1845 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1846 ;ch            Allocated to registers r3 
                                   1847 ;i             Allocated to registers r4 
                                   1848 ;------------------------------------------------------------
                                   1849 ;	fire_alarm_panel.c:645: void lcd_disp1(unsigned char *text_ptr)
                                   1850 ;	-----------------------------------------
                                   1851 ;	 function lcd_disp1
                                   1852 ;	-----------------------------------------
      0005CB                       1853 _lcd_disp1:
      0005CB AD 82            [24] 1854 	mov	r5, dpl
      0005CD AE 83            [24] 1855 	mov	r6, dph
      0005CF AF F0            [24] 1856 	mov	r7, b
                                   1857 ;	fire_alarm_panel.c:650: while((ch = text_ptr[i]) != 0) {
      0005D1 7C 00            [12] 1858 	mov	r4,#0x00
      0005D3                       1859 00101$:
      0005D3 EC               [12] 1860 	mov	a,r4
      0005D4 2D               [12] 1861 	add	a, r5
      0005D5 F9               [12] 1862 	mov	r1,a
      0005D6 E4               [12] 1863 	clr	a
      0005D7 3E               [12] 1864 	addc	a, r6
      0005D8 FA               [12] 1865 	mov	r2,a
      0005D9 8F 03            [24] 1866 	mov	ar3,r7
      0005DB 89 82            [24] 1867 	mov	dpl,r1
      0005DD 8A 83            [24] 1868 	mov	dph,r2
      0005DF 8B F0            [24] 1869 	mov	b,r3
      0005E1 12r00r00         [24] 1870 	lcall	__gptrget
      0005E4 FB               [12] 1871 	mov	r3,a
      0005E5 60 1B            [24] 1872 	jz	00104$
                                   1873 ;	fire_alarm_panel.c:651: i++;
      0005E7 0C               [12] 1874 	inc	r4
                                   1875 ;	fire_alarm_panel.c:652: lcd_data(ch);
      0005E8 8B 82            [24] 1876 	mov	dpl, r3
      0005EA C0 07            [24] 1877 	push	ar7
      0005EC C0 06            [24] 1878 	push	ar6
      0005EE C0 05            [24] 1879 	push	ar5
      0005F0 C0 04            [24] 1880 	push	ar4
      0005F2 12r05r85         [24] 1881 	lcall	_lcd_data
                                   1882 ;	fire_alarm_panel.c:653: delay2();
      0005F5 12r06r03         [24] 1883 	lcall	_delay2
      0005F8 D0 04            [24] 1884 	pop	ar4
      0005FA D0 05            [24] 1885 	pop	ar5
      0005FC D0 06            [24] 1886 	pop	ar6
      0005FE D0 07            [24] 1887 	pop	ar7
      000600 80 D1            [24] 1888 	sjmp	00101$
      000602                       1889 00104$:
                                   1890 ;	fire_alarm_panel.c:655: }
      000602 22               [24] 1891 	ret
                                   1892 ;------------------------------------------------------------
                                   1893 ;Allocation info for local variables in function 'delay2'
                                   1894 ;------------------------------------------------------------
                                   1895 ;R5            Allocated to registers r7 
                                   1896 ;R6            Allocated to registers r5 
                                   1897 ;R7            Allocated to registers r6 
                                   1898 ;------------------------------------------------------------
                                   1899 ;	fire_alarm_panel.c:657: void delay2(void)
                                   1900 ;	-----------------------------------------
                                   1901 ;	 function delay2
                                   1902 ;	-----------------------------------------
      000603                       1903 _delay2:
                                   1904 ;	fire_alarm_panel.c:661: for(R5 = 1; R5 > 0; R5--) {
      000603 7F 01            [12] 1905 	mov	r7,#0x01
                                   1906 ;	fire_alarm_panel.c:662: for(R7 = 255; R7 > 0; R7--) {
      000605                       1907 00121$:
      000605 7E FF            [12] 1908 	mov	r6,#0xff
                                   1909 ;	fire_alarm_panel.c:663: for(R6 = 255; R6 > 0; R6--);
      000607                       1910 00119$:
      000607 7D FF            [12] 1911 	mov	r5,#0xff
      000609                       1912 00105$:
      000609 DD FE            [24] 1913 	djnz	r5,00105$
                                   1914 ;	fire_alarm_panel.c:662: for(R7 = 255; R7 > 0; R7--) {
      00060B DE FA            [24] 1915 	djnz	r6,00119$
                                   1916 ;	fire_alarm_panel.c:661: for(R5 = 1; R5 > 0; R5--) {
      00060D DF F6            [24] 1917 	djnz	r7,00121$
                                   1918 ;	fire_alarm_panel.c:666: }
      00060F 22               [24] 1919 	ret
                                   1920 ;------------------------------------------------------------
                                   1921 ;Allocation info for local variables in function 'delay1'
                                   1922 ;------------------------------------------------------------
                                   1923 ;R5            Allocated to registers r7 
                                   1924 ;R6            Allocated to registers r5 
                                   1925 ;R7            Allocated to registers r6 
                                   1926 ;------------------------------------------------------------
                                   1927 ;	fire_alarm_panel.c:668: void delay1(void)
                                   1928 ;	-----------------------------------------
                                   1929 ;	 function delay1
                                   1930 ;	-----------------------------------------
      000610                       1931 _delay1:
                                   1932 ;	fire_alarm_panel.c:672: for(R5 = 8; R5 > 0; R5--) {
      000610 7F 08            [12] 1933 	mov	r7,#0x08
                                   1934 ;	fire_alarm_panel.c:673: for(R7 = 255; R7 > 0; R7--) {
      000612                       1935 00123$:
      000612 7E FF            [12] 1936 	mov	r6,#0xff
                                   1937 ;	fire_alarm_panel.c:674: for(R6 = 255; R6 > 0; R6--);
      000614                       1938 00121$:
      000614 7D FF            [12] 1939 	mov	r5,#0xff
      000616                       1940 00107$:
      000616 DD FE            [24] 1941 	djnz	r5,00107$
                                   1942 ;	fire_alarm_panel.c:673: for(R7 = 255; R7 > 0; R7--) {
      000618 DE FA            [24] 1943 	djnz	r6,00121$
                                   1944 ;	fire_alarm_panel.c:672: for(R5 = 8; R5 > 0; R5--) {
      00061A DF F6            [24] 1945 	djnz	r7,00123$
                                   1946 ;	fire_alarm_panel.c:678: if(RI) {
      00061C 30 98 03         [24] 1947 	jnb	_RI,00112$
                                   1948 ;	fire_alarm_panel.c:679: receive();
                                   1949 ;	fire_alarm_panel.c:681: }
      00061F 02r04r5F         [24] 1950 	ljmp	_receive
      000622                       1951 00112$:
      000622 22               [24] 1952 	ret
                                   1953 ;------------------------------------------------------------
                                   1954 ;Allocation info for local variables in function 'delay'
                                   1955 ;------------------------------------------------------------
                                   1956 ;R6            Allocated to registers r6 
                                   1957 ;R7            Allocated to registers r7 
                                   1958 ;------------------------------------------------------------
                                   1959 ;	fire_alarm_panel.c:683: void delay(void)
                                   1960 ;	-----------------------------------------
                                   1961 ;	 function delay
                                   1962 ;	-----------------------------------------
      000623                       1963 _delay:
                                   1964 ;	fire_alarm_panel.c:687: for(R7 = 7; R7 > 0; R7--) {
      000623 7F 07            [12] 1965 	mov	r7,#0x07
                                   1966 ;	fire_alarm_panel.c:688: for(R6 = 15; R6 > 0; R6--);
      000625                       1967 00114$:
      000625 7E 0F            [12] 1968 	mov	r6,#0x0f
      000627                       1969 00104$:
      000627 DE FE            [24] 1970 	djnz	r6,00104$
                                   1971 ;	fire_alarm_panel.c:687: for(R7 = 7; R7 > 0; R7--) {
      000629 DF FA            [24] 1972 	djnz	r7,00114$
                                   1973 ;	fire_alarm_panel.c:690: } 
      00062B 22               [24] 1974 	ret
                                   1975 	.area CSEG    (CODE)
                                   1976 	.area CONST   (CODE)
                                   1977 	.area CONST   (CODE)
      000000                       1978 _INIT_COMMANDS:
      000000 20                    1979 	.db #0x20	; 32
      000001 28                    1980 	.db #0x28	; 40
      000002 0C                    1981 	.db #0x0c	; 12
      000003 01                    1982 	.db #0x01	; 1
      000004 06                    1983 	.db #0x06	; 6
      000005 80                    1984 	.db #0x80	; 128
      000006 00                    1985 	.db #0x00	; 0
                                   1986 	.area CSEG    (CODE)
                                   1987 	.area CONST   (CODE)
      000007                       1988 _LINE1:
      000007 01                    1989 	.db #0x01	; 1
      000008 06                    1990 	.db #0x06	; 6
      000009 80                    1991 	.db #0x80	; 128
      00000A 00                    1992 	.db #0x00	; 0
                                   1993 	.area CSEG    (CODE)
                                   1994 	.area CONST   (CODE)
      00000B                       1995 _LINE2:
      00000B C0                    1996 	.db #0xc0	; 192
      00000C 00                    1997 	.db #0x00	; 0
                                   1998 	.area CSEG    (CODE)
                                   1999 	.area CONST   (CODE)
      00000D                       2000 _TEXT1:
      00000D 20 41 47 4E 49 20 50  2001 	.ascii " AGNI PROTECTION"
             52 4F 54 45 43 54 49
             4F 4E
      00001D 00                    2002 	.db 0x00
                                   2003 	.area CSEG    (CODE)
                                   2004 	.area CONST   (CODE)
      00001E                       2005 _TEXT2:
      00001E 20 57 45 4C 43 4F 4D  2006 	.ascii " WELCOME TO ...."
             45 20 54 4F 20 2E 2E
             2E 2E
      00002E 00                    2007 	.db 0x00
                                   2008 	.area CSEG    (CODE)
                                   2009 	.area CONST   (CODE)
      00002F                       2010 _TEXT3:
      00002F 46 49 52 45 20 41 4C  2011 	.ascii "FIRE ALARM PANEL"
             41 52 4D 20 50 41 4E
             45 4C
      00003F 00                    2012 	.db 0x00
                                   2013 	.area CSEG    (CODE)
                                   2014 	.area CONST   (CODE)
      000040                       2015 _TZONE1:
      000040 20 5A 4F 4E 45 20 2D  2016 	.ascii " ZONE - 01      "
             20 30 31 20 20 20 20
             20 20
      000050 00                    2017 	.db 0x00
                                   2018 	.area CSEG    (CODE)
                                   2019 	.area CONST   (CODE)
      000051                       2020 _TZONE2:
      000051 20 5A 4F 4E 45 20 2D  2021 	.ascii " ZONE - 02      "
             20 30 32 20 20 20 20
             20 20
      000061 00                    2022 	.db 0x00
                                   2023 	.area CSEG    (CODE)
                                   2024 	.area CONST   (CODE)
      000062                       2025 _FIRE:
      000062 20 46 49 52 45 20 44  2026 	.ascii " FIRE DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000072 00                    2027 	.db 0x00
                                   2028 	.area CSEG    (CODE)
                                   2029 	.area CONST   (CODE)
      000073                       2030 _SHORT:
      000073 20 53 48 4F 52 54 20  2031 	.ascii " SHORT DETECTED "
             44 45 54 45 43 54 45
             44 20
      000083 00                    2032 	.db 0x00
                                   2033 	.area CSEG    (CODE)
                                   2034 	.area CONST   (CODE)
      000084                       2035 _OPEN:
      000084 20 4F 50 45 4E 20 44  2036 	.ascii " OPEN DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000094 00                    2037 	.db 0x00
                                   2038 	.area CSEG    (CODE)
                                   2039 	.area CONST   (CODE)
      000095                       2040 _TEXT4:
      000095 20 41 4C 4C 20 54 48  2041 	.ascii " ALL THE AREA   "
             45 20 41 52 45 41 20
             20 20
      0000A5 00                    2042 	.db 0x00
                                   2043 	.area CSEG    (CODE)
                                   2044 	.area CONST   (CODE)
      0000A6                       2045 _TLAMP:
      0000A6 50 41 4E 45 4C 20 54  2046 	.ascii "PANEL TESTING ON"
             45 53 54 49 4E 47 20
             4F 4E
      0000B6 00                    2047 	.db 0x00
                                   2048 	.area CSEG    (CODE)
                                   2049 	.area CONST   (CODE)
      0000B7                       2050 _TEVQ:
      0000B7 20 50 4C 45 41 53 45  2051 	.ascii " PLEASE EVACUATE"
             20 45 56 41 43 55 41
             54 45
      0000C7 00                    2052 	.db 0x00
                                   2053 	.area CSEG    (CODE)
                                   2054 	.area CONST   (CODE)
      0000C8                       2055 _ISO1:
      0000C8 5A 4F 4E 45 2D 20 30  2056 	.ascii "ZONE- 01 ISOLATE"
             31 20 49 53 4F 4C 41
             54 45
      0000D8 00                    2057 	.db 0x00
                                   2058 	.area CSEG    (CODE)
                                   2059 	.area CONST   (CODE)
      0000D9                       2060 _ISO2:
      0000D9 5A 4F 4E 45 2D 20 30  2061 	.ascii "ZONE- 02 ISOLATE"
             32 20 49 53 4F 4C 41
             54 45
      0000E9 00                    2062 	.db 0x00
                                   2063 	.area CSEG    (CODE)
                                   2064 	.area CONST   (CODE)
      0000EA                       2065 _ISO1H:
      0000EA 5A 4F 4E 45 2D 20 30  2066 	.ascii "ZONE- 01 HEALTHY"
             31 20 48 45 41 4C 54
             48 59
      0000FA 00                    2067 	.db 0x00
                                   2068 	.area CSEG    (CODE)
                                   2069 	.area CONST   (CODE)
      0000FB                       2070 _ISO2H:
      0000FB 5A 4F 4E 45 2D 20 30  2071 	.ascii "ZONE- 02 HEALTHY"
             32 20 48 45 41 4C 54
             48 59
      00010B 00                    2072 	.db 0x00
                                   2073 	.area CSEG    (CODE)
                                   2074 	.area CONST   (CODE)
      00010C                       2075 _LOWB:
      00010C 20 20 42 41 54 54 45  2076 	.ascii "  BATTERY LOW   "
             52 59 20 4C 4F 57 20
             20 20
      00011C 00                    2077 	.db 0x00
                                   2078 	.area CSEG    (CODE)
                                   2079 	.area CONST   (CODE)
      00011D                       2080 _LOWM:
      00011D 20 43 48 45 43 4B 20  2081 	.ascii " CHECK AC SUPPLY"
             41 43 20 53 55 50 50
             4C 59
      00012D 00                    2082 	.db 0x00
                                   2083 	.area CSEG    (CODE)
                                   2084 	.area XINIT   (CODE)
                                   2085 	.area CABS    (ABS,CODE)
