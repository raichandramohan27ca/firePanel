                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.0 #15242 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module fire_alarm_panel
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _LOWM
                                     12 	.globl _LOWB
                                     13 	.globl _ISO2H
                                     14 	.globl _ISO1H
                                     15 	.globl _ISO2
                                     16 	.globl _ISO1
                                     17 	.globl _TEVQ
                                     18 	.globl _TLAMP
                                     19 	.globl _TEXT4
                                     20 	.globl _OPEN
                                     21 	.globl _SHORT
                                     22 	.globl _FIRE
                                     23 	.globl _TZONE2
                                     24 	.globl _TZONE1
                                     25 	.globl _TEXT3
                                     26 	.globl _TEXT2
                                     27 	.globl _TEXT1
                                     28 	.globl _LINE2
                                     29 	.globl _LINE1
                                     30 	.globl _INIT_COMMANDS
                                     31 	.globl _main
                                     32 	.globl _SHORT2
                                     33 	.globl _OPEN2
                                     34 	.globl _FIRE2
                                     35 	.globl _SHORT1
                                     36 	.globl _OPEN1
                                     37 	.globl _FIRE1
                                     38 	.globl _CFTLR
                                     39 	.globl _CFLR
                                     40 	.globl _BUZ
                                     41 	.globl _HOT
                                     42 	.globl _EN
                                     43 	.globl _RS
                                     44 	.globl _EVQ
                                     45 	.globl _SIL
                                     46 	.globl _LAMP
                                     47 	.globl _LB
                                     48 	.globl _BL
                                     49 	.globl _ZONE2
                                     50 	.globl _ZONE1
                                     51 	.globl _TF2
                                     52 	.globl _EXF2
                                     53 	.globl _RCLK
                                     54 	.globl _TCLK
                                     55 	.globl _EXEN2
                                     56 	.globl _TR2
                                     57 	.globl _C_T2
                                     58 	.globl _CP_RL2
                                     59 	.globl _T2CON_7
                                     60 	.globl _T2CON_6
                                     61 	.globl _T2CON_5
                                     62 	.globl _T2CON_4
                                     63 	.globl _T2CON_3
                                     64 	.globl _T2CON_2
                                     65 	.globl _T2CON_1
                                     66 	.globl _T2CON_0
                                     67 	.globl _PT2
                                     68 	.globl _ET2
                                     69 	.globl _CY
                                     70 	.globl _AC
                                     71 	.globl _F0
                                     72 	.globl _RS1
                                     73 	.globl _RS0
                                     74 	.globl _OV
                                     75 	.globl _F1
                                     76 	.globl _P
                                     77 	.globl _PS
                                     78 	.globl _PT1
                                     79 	.globl _PX1
                                     80 	.globl _PT0
                                     81 	.globl _PX0
                                     82 	.globl _RD
                                     83 	.globl _WR
                                     84 	.globl _T1
                                     85 	.globl _T0
                                     86 	.globl _INT1
                                     87 	.globl _INT0
                                     88 	.globl _TXD
                                     89 	.globl _RXD
                                     90 	.globl _P3_7
                                     91 	.globl _P3_6
                                     92 	.globl _P3_5
                                     93 	.globl _P3_4
                                     94 	.globl _P3_3
                                     95 	.globl _P3_2
                                     96 	.globl _P3_1
                                     97 	.globl _P3_0
                                     98 	.globl _EA
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _P1_7
                                    121 	.globl _P1_6
                                    122 	.globl _P1_5
                                    123 	.globl _P1_4
                                    124 	.globl _P1_3
                                    125 	.globl _P1_2
                                    126 	.globl _P1_1
                                    127 	.globl _P1_0
                                    128 	.globl _TF1
                                    129 	.globl _TR1
                                    130 	.globl _TF0
                                    131 	.globl _TR0
                                    132 	.globl _IE1
                                    133 	.globl _IT1
                                    134 	.globl _IE0
                                    135 	.globl _IT0
                                    136 	.globl _P0_7
                                    137 	.globl _P0_6
                                    138 	.globl _P0_5
                                    139 	.globl _P0_4
                                    140 	.globl _P0_3
                                    141 	.globl _P0_2
                                    142 	.globl _P0_1
                                    143 	.globl _P0_0
                                    144 	.globl _TH2
                                    145 	.globl _TL2
                                    146 	.globl _RCAP2H
                                    147 	.globl _RCAP2L
                                    148 	.globl _T2CON
                                    149 	.globl _B
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _IE
                                    155 	.globl _P2
                                    156 	.globl _SBUF
                                    157 	.globl _SCON
                                    158 	.globl _P1
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TL1
                                    162 	.globl _TL0
                                    163 	.globl _TMOD
                                    164 	.globl _TCON
                                    165 	.globl _PCON
                                    166 	.globl _DPH
                                    167 	.globl _DPL
                                    168 	.globl _SP
                                    169 	.globl _P0
                                    170 	.globl _PR2
                                    171 	.globl _PR1
                                    172 	.globl _LISO
                                    173 	.globl _SLC2
                                    174 	.globl _SLC1
                                    175 	.globl _Z2
                                    176 	.globl _Z1
                                    177 	.globl _L
                                    178 	.globl _U
                                    179 	.globl _RAP
                                    180 	.globl _BLT1
                                    181 	.globl _init_system
                                    182 	.globl _prz1
                                    183 	.globl _prz2
                                    184 	.globl _receive
                                    185 	.globl _send_data
                                    186 	.globl _silence_alarms
                                    187 	.globl _spliter
                                    188 	.globl _move
                                    189 	.globl _move1
                                    190 	.globl _lcd_cmd
                                    191 	.globl _lcd_data
                                    192 	.globl _lcd_disp
                                    193 	.globl _lcd_disp1
                                    194 	.globl _delay2
                                    195 	.globl _delay1
                                    196 	.globl _delay
                                    197 ;--------------------------------------------------------
                                    198 ; special function registers
                                    199 ;--------------------------------------------------------
                                    200 	.area RSEG    (ABS,DATA)
      000000                        201 	.org 0x0000
                           000080   202 _P0	=	0x0080
                           000081   203 _SP	=	0x0081
                           000082   204 _DPL	=	0x0082
                           000083   205 _DPH	=	0x0083
                           000087   206 _PCON	=	0x0087
                           000088   207 _TCON	=	0x0088
                           000089   208 _TMOD	=	0x0089
                           00008A   209 _TL0	=	0x008a
                           00008B   210 _TL1	=	0x008b
                           00008C   211 _TH0	=	0x008c
                           00008D   212 _TH1	=	0x008d
                           000090   213 _P1	=	0x0090
                           000098   214 _SCON	=	0x0098
                           000099   215 _SBUF	=	0x0099
                           0000A0   216 _P2	=	0x00a0
                           0000A8   217 _IE	=	0x00a8
                           0000B0   218 _P3	=	0x00b0
                           0000B8   219 _IP	=	0x00b8
                           0000D0   220 _PSW	=	0x00d0
                           0000E0   221 _ACC	=	0x00e0
                           0000F0   222 _B	=	0x00f0
                           0000C8   223 _T2CON	=	0x00c8
                           0000CA   224 _RCAP2L	=	0x00ca
                           0000CB   225 _RCAP2H	=	0x00cb
                           0000CC   226 _TL2	=	0x00cc
                           0000CD   227 _TH2	=	0x00cd
                                    228 ;--------------------------------------------------------
                                    229 ; special function bits
                                    230 ;--------------------------------------------------------
                                    231 	.area RSEG    (ABS,DATA)
      000000                        232 	.org 0x0000
                           000080   233 _P0_0	=	0x0080
                           000081   234 _P0_1	=	0x0081
                           000082   235 _P0_2	=	0x0082
                           000083   236 _P0_3	=	0x0083
                           000084   237 _P0_4	=	0x0084
                           000085   238 _P0_5	=	0x0085
                           000086   239 _P0_6	=	0x0086
                           000087   240 _P0_7	=	0x0087
                           000088   241 _IT0	=	0x0088
                           000089   242 _IE0	=	0x0089
                           00008A   243 _IT1	=	0x008a
                           00008B   244 _IE1	=	0x008b
                           00008C   245 _TR0	=	0x008c
                           00008D   246 _TF0	=	0x008d
                           00008E   247 _TR1	=	0x008e
                           00008F   248 _TF1	=	0x008f
                           000090   249 _P1_0	=	0x0090
                           000091   250 _P1_1	=	0x0091
                           000092   251 _P1_2	=	0x0092
                           000093   252 _P1_3	=	0x0093
                           000094   253 _P1_4	=	0x0094
                           000095   254 _P1_5	=	0x0095
                           000096   255 _P1_6	=	0x0096
                           000097   256 _P1_7	=	0x0097
                           000098   257 _RI	=	0x0098
                           000099   258 _TI	=	0x0099
                           00009A   259 _RB8	=	0x009a
                           00009B   260 _TB8	=	0x009b
                           00009C   261 _REN	=	0x009c
                           00009D   262 _SM2	=	0x009d
                           00009E   263 _SM1	=	0x009e
                           00009F   264 _SM0	=	0x009f
                           0000A0   265 _P2_0	=	0x00a0
                           0000A1   266 _P2_1	=	0x00a1
                           0000A2   267 _P2_2	=	0x00a2
                           0000A3   268 _P2_3	=	0x00a3
                           0000A4   269 _P2_4	=	0x00a4
                           0000A5   270 _P2_5	=	0x00a5
                           0000A6   271 _P2_6	=	0x00a6
                           0000A7   272 _P2_7	=	0x00a7
                           0000A8   273 _EX0	=	0x00a8
                           0000A9   274 _ET0	=	0x00a9
                           0000AA   275 _EX1	=	0x00aa
                           0000AB   276 _ET1	=	0x00ab
                           0000AC   277 _ES	=	0x00ac
                           0000AF   278 _EA	=	0x00af
                           0000B0   279 _P3_0	=	0x00b0
                           0000B1   280 _P3_1	=	0x00b1
                           0000B2   281 _P3_2	=	0x00b2
                           0000B3   282 _P3_3	=	0x00b3
                           0000B4   283 _P3_4	=	0x00b4
                           0000B5   284 _P3_5	=	0x00b5
                           0000B6   285 _P3_6	=	0x00b6
                           0000B7   286 _P3_7	=	0x00b7
                           0000B0   287 _RXD	=	0x00b0
                           0000B1   288 _TXD	=	0x00b1
                           0000B2   289 _INT0	=	0x00b2
                           0000B3   290 _INT1	=	0x00b3
                           0000B4   291 _T0	=	0x00b4
                           0000B5   292 _T1	=	0x00b5
                           0000B6   293 _WR	=	0x00b6
                           0000B7   294 _RD	=	0x00b7
                           0000B8   295 _PX0	=	0x00b8
                           0000B9   296 _PT0	=	0x00b9
                           0000BA   297 _PX1	=	0x00ba
                           0000BB   298 _PT1	=	0x00bb
                           0000BC   299 _PS	=	0x00bc
                           0000D0   300 _P	=	0x00d0
                           0000D1   301 _F1	=	0x00d1
                           0000D2   302 _OV	=	0x00d2
                           0000D3   303 _RS0	=	0x00d3
                           0000D4   304 _RS1	=	0x00d4
                           0000D5   305 _F0	=	0x00d5
                           0000D6   306 _AC	=	0x00d6
                           0000D7   307 _CY	=	0x00d7
                           0000AD   308 _ET2	=	0x00ad
                           0000BD   309 _PT2	=	0x00bd
                           0000C8   310 _T2CON_0	=	0x00c8
                           0000C9   311 _T2CON_1	=	0x00c9
                           0000CA   312 _T2CON_2	=	0x00ca
                           0000CB   313 _T2CON_3	=	0x00cb
                           0000CC   314 _T2CON_4	=	0x00cc
                           0000CD   315 _T2CON_5	=	0x00cd
                           0000CE   316 _T2CON_6	=	0x00ce
                           0000CF   317 _T2CON_7	=	0x00cf
                           0000C8   318 _CP_RL2	=	0x00c8
                           0000C9   319 _C_T2	=	0x00c9
                           0000CA   320 _TR2	=	0x00ca
                           0000CB   321 _EXEN2	=	0x00cb
                           0000CC   322 _TCLK	=	0x00cc
                           0000CD   323 _RCLK	=	0x00cd
                           0000CE   324 _EXF2	=	0x00ce
                           0000CF   325 _TF2	=	0x00cf
                           0000A4   326 _ZONE1	=	0x00a4
                           0000A5   327 _ZONE2	=	0x00a5
                           0000A7   328 _BL	=	0x00a7
                           0000A2   329 _LB	=	0x00a2
                           0000A6   330 _LAMP	=	0x00a6
                           0000A0   331 _SIL	=	0x00a0
                           0000A1   332 _EVQ	=	0x00a1
                           000086   333 _RS	=	0x0086
                           000087   334 _EN	=	0x0087
                           000094   335 _HOT	=	0x0094
                           000095   336 _BUZ	=	0x0095
                           000096   337 _CFLR	=	0x0096
                           000097   338 _CFTLR	=	0x0097
                           000080   339 _FIRE1	=	0x0080
                           000081   340 _OPEN1	=	0x0081
                           000082   341 _SHORT1	=	0x0082
                           000083   342 _FIRE2	=	0x0083
                           000084   343 _OPEN2	=	0x0084
                           000085   344 _SHORT2	=	0x0085
                                    345 ;--------------------------------------------------------
                                    346 ; overlayable register banks
                                    347 ;--------------------------------------------------------
                                    348 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        349 	.ds 8
                                    350 ;--------------------------------------------------------
                                    351 ; internal ram data
                                    352 ;--------------------------------------------------------
                                    353 	.area DSEG    (DATA)
      000000                        354 _BLT1::
      000000                        355 	.ds 1
      000001                        356 _RAP::
      000001                        357 	.ds 1
      000002                        358 _U::
      000002                        359 	.ds 1
      000003                        360 _L::
      000003                        361 	.ds 1
                                    362 ;--------------------------------------------------------
                                    363 ; overlayable items in internal ram
                                    364 ;--------------------------------------------------------
                                    365 	.area	OSEG    (OVR,DATA)
                                    366 	.area	OSEG    (OVR,DATA)
                                    367 	.area	OSEG    (OVR,DATA)
                                    368 	.area	OSEG    (OVR,DATA)
                                    369 	.area	OSEG    (OVR,DATA)
                                    370 ;--------------------------------------------------------
                                    371 ; Stack segment in internal ram
                                    372 ;--------------------------------------------------------
                                    373 	.area SSEG
      000000                        374 __start__stack:
      000000                        375 	.ds	1
                                    376 
                                    377 ;--------------------------------------------------------
                                    378 ; indirectly addressable internal ram data
                                    379 ;--------------------------------------------------------
                                    380 	.area ISEG    (DATA)
                                    381 ;--------------------------------------------------------
                                    382 ; absolute internal ram data
                                    383 ;--------------------------------------------------------
                                    384 	.area IABS    (ABS,DATA)
                                    385 	.area IABS    (ABS,DATA)
                                    386 ;--------------------------------------------------------
                                    387 ; bit data
                                    388 ;--------------------------------------------------------
                                    389 	.area BSEG    (BIT)
      000000                        390 _Z1::
      000000                        391 	.ds 1
      000001                        392 _Z2::
      000001                        393 	.ds 1
      000002                        394 _SLC1::
      000002                        395 	.ds 1
      000003                        396 _SLC2::
      000003                        397 	.ds 1
      000004                        398 _LISO::
      000004                        399 	.ds 1
      000005                        400 _PR1::
      000005                        401 	.ds 1
      000006                        402 _PR2::
      000006                        403 	.ds 1
                                    404 ;--------------------------------------------------------
                                    405 ; paged external ram data
                                    406 ;--------------------------------------------------------
                                    407 	.area PSEG    (PAG,XDATA)
                                    408 ;--------------------------------------------------------
                                    409 ; uninitialized external ram data
                                    410 ;--------------------------------------------------------
                                    411 	.area XSEG    (XDATA)
                                    412 ;--------------------------------------------------------
                                    413 ; absolute external ram data
                                    414 ;--------------------------------------------------------
                                    415 	.area XABS    (ABS,XDATA)
                                    416 ;--------------------------------------------------------
                                    417 ; initialized external ram data
                                    418 ;--------------------------------------------------------
                                    419 	.area XISEG   (XDATA)
                                    420 	.area HOME    (CODE)
                                    421 	.area GSINIT0 (CODE)
                                    422 	.area GSINIT1 (CODE)
                                    423 	.area GSINIT2 (CODE)
                                    424 	.area GSINIT3 (CODE)
                                    425 	.area GSINIT4 (CODE)
                                    426 	.area GSINIT5 (CODE)
                                    427 	.area GSINIT  (CODE)
                                    428 	.area GSFINAL (CODE)
                                    429 	.area CSEG    (CODE)
                                    430 ;--------------------------------------------------------
                                    431 ; interrupt vector
                                    432 ;--------------------------------------------------------
                                    433 	.area HOME    (CODE)
      000000                        434 __interrupt_vect:
      000000 02r00r00         [24]  435 	ljmp	__sdcc_gsinit_startup
                                    436 ; restartable atomic support routines
      000003                        437 	.ds	5
      000008                        438 sdcc_atomic_exchange_rollback_start::
      000008 00               [12]  439 	nop
      000009 00               [12]  440 	nop
      00000A                        441 sdcc_atomic_exchange_pdata_impl:
      00000A E2               [24]  442 	movx	a, @r0
      00000B FB               [12]  443 	mov	r3, a
      00000C EA               [12]  444 	mov	a, r2
      00000D F2               [24]  445 	movx	@r0, a
      00000E 80 2C            [24]  446 	sjmp	sdcc_atomic_exchange_exit
      000010 00               [12]  447 	nop
      000011 00               [12]  448 	nop
      000012                        449 sdcc_atomic_exchange_xdata_impl:
      000012 E0               [24]  450 	movx	a, @dptr
      000013 FB               [12]  451 	mov	r3, a
      000014 EA               [12]  452 	mov	a, r2
      000015 F0               [24]  453 	movx	@dptr, a
      000016 80 24            [24]  454 	sjmp	sdcc_atomic_exchange_exit
      000018                        455 sdcc_atomic_compare_exchange_idata_impl:
      000018 E6               [12]  456 	mov	a, @r0
      000019 B5 02 02         [24]  457 	cjne	a, ar2, .+#5
      00001C EB               [12]  458 	mov	a, r3
      00001D F6               [12]  459 	mov	@r0, a
      00001E 22               [24]  460 	ret
      00001F 00               [12]  461 	nop
      000020                        462 sdcc_atomic_compare_exchange_pdata_impl:
      000020 E2               [24]  463 	movx	a, @r0
      000021 B5 02 02         [24]  464 	cjne	a, ar2, .+#5
      000024 EB               [12]  465 	mov	a, r3
      000025 F2               [24]  466 	movx	@r0, a
      000026 22               [24]  467 	ret
      000027 00               [12]  468 	nop
      000028                        469 sdcc_atomic_compare_exchange_xdata_impl:
      000028 E0               [24]  470 	movx	a, @dptr
      000029 B5 02 02         [24]  471 	cjne	a, ar2, .+#5
      00002C EB               [12]  472 	mov	a, r3
      00002D F0               [24]  473 	movx	@dptr, a
      00002E 22               [24]  474 	ret
      00002F                        475 sdcc_atomic_exchange_rollback_end::
                                    476 
      00002F                        477 sdcc_atomic_exchange_gptr_impl::
      00002F 30 F6 E0         [24]  478 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000032 A8 82            [24]  479 	mov	r0, dpl
      000034 20 F5 D3         [24]  480 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000037                        481 sdcc_atomic_exchange_idata_impl:
      000037 EA               [12]  482 	mov	a, r2
      000038 C6               [12]  483 	xch	a, @r0
      000039 F5 82            [12]  484 	mov	dpl, a
      00003B 22               [24]  485 	ret
      00003C                        486 sdcc_atomic_exchange_exit:
      00003C 8B 82            [24]  487 	mov	dpl, r3
      00003E 22               [24]  488 	ret
      00003F                        489 sdcc_atomic_compare_exchange_gptr_impl::
      00003F 30 F6 E6         [24]  490 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000042 A8 82            [24]  491 	mov	r0, dpl
      000044 20 F5 D9         [24]  492 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000047 80 CF            [24]  493 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    494 ;--------------------------------------------------------
                                    495 ; global & static initialisations
                                    496 ;--------------------------------------------------------
                                    497 	.area HOME    (CODE)
                                    498 	.area GSINIT  (CODE)
                                    499 	.area GSFINAL (CODE)
                                    500 	.area GSINIT  (CODE)
                                    501 	.globl __sdcc_gsinit_startup
                                    502 	.globl __sdcc_program_startup
                                    503 	.globl __start__stack
                                    504 	.globl __mcs51_genXINIT
                                    505 	.globl __mcs51_genXRAMCLEAR
                                    506 	.globl __mcs51_genRAMCLEAR
                                    507 ;	fire_alarm_panel.c:28: __bit Z1 = 0;          // ISO Zone 1
                                    508 ;	assignBit
      000000 C2*00            [12]  509 	clr	_Z1
                                    510 ;	fire_alarm_panel.c:29: __bit Z2 = 0;          // ISO Zone 2
                                    511 ;	assignBit
      000002 C2*01            [12]  512 	clr	_Z2
                                    513 ;	fire_alarm_panel.c:30: __bit SLC1 = 0;        // Silence Zone 1
                                    514 ;	assignBit
      000004 C2*02            [12]  515 	clr	_SLC1
                                    516 ;	fire_alarm_panel.c:31: __bit SLC2 = 0;        // Silence Zone 2
                                    517 ;	assignBit
      000006 C2*03            [12]  518 	clr	_SLC2
                                    519 ;	fire_alarm_panel.c:32: __bit LISO = 0;        // Low battery silence
                                    520 ;	assignBit
      000008 C2*04            [12]  521 	clr	_LISO
                                    522 ;	fire_alarm_panel.c:33: __bit PR1 = 0;         // Zone 1 Problem
                                    523 ;	assignBit
      00000A C2*05            [12]  524 	clr	_PR1
                                    525 ;	fire_alarm_panel.c:34: __bit PR2 = 0;         // Zone 2 Problem
                                    526 ;	assignBit
      00000C C2*06            [12]  527 	clr	_PR2
                                    528 	.area GSFINAL (CODE)
      000000 02r00r49         [24]  529 	ljmp	__sdcc_program_startup
                                    530 ;--------------------------------------------------------
                                    531 ; Home
                                    532 ;--------------------------------------------------------
                                    533 	.area HOME    (CODE)
                                    534 	.area HOME    (CODE)
      000049                        535 __sdcc_program_startup:
      000049 02r00r00         [24]  536 	ljmp	_main
                                    537 ;	return from main will return to caller
                                    538 ;--------------------------------------------------------
                                    539 ; code
                                    540 ;--------------------------------------------------------
                                    541 	.area CSEG    (CODE)
                                    542 ;------------------------------------------------------------
                                    543 ;Allocation info for local variables in function 'main'
                                    544 ;------------------------------------------------------------
                                    545 ;R0            Allocated to registers r7 
                                    546 ;------------------------------------------------------------
                                    547 ;	fire_alarm_panel.c:83: void main(void)
                                    548 ;	-----------------------------------------
                                    549 ;	 function main
                                    550 ;	-----------------------------------------
      000000                        551 _main:
                           000007   552 	ar7 = 0x07
                           000006   553 	ar6 = 0x06
                           000005   554 	ar5 = 0x05
                           000004   555 	ar4 = 0x04
                           000003   556 	ar3 = 0x03
                           000002   557 	ar2 = 0x02
                           000001   558 	ar1 = 0x01
                           000000   559 	ar0 = 0x00
                                    560 ;	fire_alarm_panel.c:87: init_system();
      000000 12r02rA1         [24]  561 	lcall	_init_system
                                    562 ;	fire_alarm_panel.c:91: while(R0 < 15) {
      000003 7F 00            [12]  563 	mov	r7,#0x00
      000005                        564 00101$:
      000005 BF 0F 00         [24]  565 	cjne	r7,#0x0f,00458$
      000008                        566 00458$:
      000008 50 13            [24]  567 	jnc	00103$
                                    568 ;	fire_alarm_panel.c:92: lcd_cmd(INIT_COMMANDS);
      00000A 90r00r00         [24]  569 	mov	dptr,#_INIT_COMMANDS
      00000D 75 F0 80         [24]  570 	mov	b, #0x80
      000010 C0 07            [24]  571 	push	ar7
      000012 12r05r3C         [24]  572 	lcall	_lcd_cmd
                                    573 ;	fire_alarm_panel.c:93: delay();
      000015 12r06r1D         [24]  574 	lcall	_delay
      000018 D0 07            [24]  575 	pop	ar7
                                    576 ;	fire_alarm_panel.c:94: R0++;
      00001A 0F               [12]  577 	inc	r7
      00001B 80 E8            [24]  578 	sjmp	00101$
      00001D                        579 00103$:
                                    580 ;	fire_alarm_panel.c:98: lcd_cmd(LINE1);
      00001D 90r00r07         [24]  581 	mov	dptr,#_LINE1
      000020 75 F0 80         [24]  582 	mov	b, #0x80
      000023 12r05r3C         [24]  583 	lcall	_lcd_cmd
                                    584 ;	fire_alarm_panel.c:99: lcd_disp(TEXT2);
      000026 90r00r1E         [24]  585 	mov	dptr,#_TEXT2
      000029 75 F0 80         [24]  586 	mov	b, #0x80
      00002C 12r05r90         [24]  587 	lcall	_lcd_disp
                                    588 ;	fire_alarm_panel.c:100: delay();
      00002F 12r06r1D         [24]  589 	lcall	_delay
                                    590 ;	fire_alarm_panel.c:101: lcd_cmd(LINE2);
      000032 90r00r0B         [24]  591 	mov	dptr,#_LINE2
      000035 75 F0 80         [24]  592 	mov	b, #0x80
      000038 12r05r3C         [24]  593 	lcall	_lcd_cmd
                                    594 ;	fire_alarm_panel.c:102: lcd_disp1(TEXT1);
      00003B 90r00r0D         [24]  595 	mov	dptr,#_TEXT1
      00003E 75 F0 80         [24]  596 	mov	b, #0x80
      000041 12r05rC5         [24]  597 	lcall	_lcd_disp1
                                    598 ;	fire_alarm_panel.c:104: while(1) {
      000044                        599 00183$:
                                    600 ;	fire_alarm_panel.c:106: if(RI) {
      000044 30 98 03         [24]  601 	jnb	_RI,00105$
                                    602 ;	fire_alarm_panel.c:107: receive();
      000047 12r04r59         [24]  603 	lcall	_receive
      00004A                        604 00105$:
                                    605 ;	fire_alarm_panel.c:111: lcd_cmd(LINE1);
      00004A 90r00r07         [24]  606 	mov	dptr,#_LINE1
      00004D 75 F0 80         [24]  607 	mov	b, #0x80
      000050 12r05r3C         [24]  608 	lcall	_lcd_cmd
                                    609 ;	fire_alarm_panel.c:112: lcd_disp(TEXT1);
      000053 90r00r0D         [24]  610 	mov	dptr,#_TEXT1
      000056 75 F0 80         [24]  611 	mov	b, #0x80
      000059 12r05r90         [24]  612 	lcall	_lcd_disp
                                    613 ;	fire_alarm_panel.c:114: if(RI) {
      00005C 30 98 03         [24]  614 	jnb	_RI,00107$
                                    615 ;	fire_alarm_panel.c:115: receive();
      00005F 12r04r59         [24]  616 	lcall	_receive
      000062                        617 00107$:
                                    618 ;	fire_alarm_panel.c:119: if(!ZONE1) {
      000062 20 A4 21         [24]  619 	jb	_ZONE1,00120$
                                    620 ;	fire_alarm_panel.c:121: Z1 = 0; // Mark as healthy/not isolated
                                    621 ;	assignBit
      000065 C2*00            [12]  622 	clr	_Z1
                                    623 ;	fire_alarm_panel.c:122: PR1 = 0; // No problems
                                    624 ;	assignBit
      000067 C2*05            [12]  625 	clr	_PR1
                                    626 ;	fire_alarm_panel.c:123: lcd_cmd(LINE2);
      000069 90r00r0B         [24]  627 	mov	dptr,#_LINE2
      00006C 75 F0 80         [24]  628 	mov	b, #0x80
      00006F 12r05r3C         [24]  629 	lcall	_lcd_cmd
                                    630 ;	fire_alarm_panel.c:124: lcd_disp(ISO1H); // Show "ZONE-01 HEALTHY"
      000072 90r00rEA         [24]  631 	mov	dptr,#_ISO1H
      000075 75 F0 80         [24]  632 	mov	b, #0x80
      000078 12r05r90         [24]  633 	lcall	_lcd_disp
                                    634 ;	fire_alarm_panel.c:125: delay1();
      00007B 12r06r0A         [24]  635 	lcall	_delay1
                                    636 ;	fire_alarm_panel.c:126: if(RI) receive();
      00007E 30 98 3E         [24]  637 	jnb	_RI,00121$
      000081 12r04r59         [24]  638 	lcall	_receive
      000084 80 39            [24]  639 	sjmp	00121$
      000086                        640 00120$:
                                    641 ;	fire_alarm_panel.c:129: Z1 = 1; // Mark as isolated
                                    642 ;	assignBit
      000086 D2*00            [12]  643 	setb	_Z1
                                    644 ;	fire_alarm_panel.c:130: lcd_cmd(LINE2);
      000088 90r00r0B         [24]  645 	mov	dptr,#_LINE2
      00008B 75 F0 80         [24]  646 	mov	b, #0x80
      00008E 12r05r3C         [24]  647 	lcall	_lcd_cmd
                                    648 ;	fire_alarm_panel.c:131: lcd_disp(ISO1); // Show "ZONE-01 ISOLATE"
      000091 90r00rC8         [24]  649 	mov	dptr,#_ISO1
      000094 75 F0 80         [24]  650 	mov	b, #0x80
      000097 12r05r90         [24]  651 	lcall	_lcd_disp
                                    652 ;	fire_alarm_panel.c:132: delay1();
      00009A 12r06r0A         [24]  653 	lcall	_delay1
                                    654 ;	fire_alarm_panel.c:133: if(RI) receive();
      00009D 30 98 03         [24]  655 	jnb	_RI,00111$
      0000A0 12r04r59         [24]  656 	lcall	_receive
      0000A3                        657 00111$:
                                    658 ;	fire_alarm_panel.c:136: if(FIRE1 && OPEN1 && SHORT1) {
      0000A3 30 80 0C         [24]  659 	jnb	_FIRE1,00115$
      0000A6 30 81 09         [24]  660 	jnb	_OPEN1,00115$
      0000A9 30 82 06         [24]  661 	jnb	_SHORT1,00115$
                                    662 ;	fire_alarm_panel.c:138: PR1 = 0;
                                    663 ;	assignBit
      0000AC C2*05            [12]  664 	clr	_PR1
                                    665 ;	fire_alarm_panel.c:139: SLC1 = 0;
                                    666 ;	assignBit
      0000AE C2*02            [12]  667 	clr	_SLC1
      0000B0 80 0D            [24]  668 	sjmp	00121$
      0000B2                        669 00115$:
                                    670 ;	fire_alarm_panel.c:142: PR1 = 1;
                                    671 ;	assignBit
      0000B2 D2*05            [12]  672 	setb	_PR1
                                    673 ;	fire_alarm_panel.c:143: BL = 1;
                                    674 ;	assignBit
      0000B4 D2 A7            [12]  675 	setb	_BL
                                    676 ;	fire_alarm_panel.c:144: prz1();
      0000B6 12r02rD7         [24]  677 	lcall	_prz1
                                    678 ;	fire_alarm_panel.c:145: if(RI) receive();
      0000B9 30 98 03         [24]  679 	jnb	_RI,00121$
      0000BC 12r04r59         [24]  680 	lcall	_receive
      0000BF                        681 00121$:
                                    682 ;	fire_alarm_panel.c:150: if(!ZONE2) {
      0000BF 20 A5 21         [24]  683 	jb	_ZONE2,00134$
                                    684 ;	fire_alarm_panel.c:152: Z2 = 0; // Mark as healthy/not isolated
                                    685 ;	assignBit
      0000C2 C2*01            [12]  686 	clr	_Z2
                                    687 ;	fire_alarm_panel.c:153: PR2 = 0; // No problems
                                    688 ;	assignBit
      0000C4 C2*06            [12]  689 	clr	_PR2
                                    690 ;	fire_alarm_panel.c:154: lcd_cmd(LINE2);
      0000C6 90r00r0B         [24]  691 	mov	dptr,#_LINE2
      0000C9 75 F0 80         [24]  692 	mov	b, #0x80
      0000CC 12r05r3C         [24]  693 	lcall	_lcd_cmd
                                    694 ;	fire_alarm_panel.c:155: lcd_disp(ISO2H); // Show "ZONE-02 HEALTHY"
      0000CF 90r00rFB         [24]  695 	mov	dptr,#_ISO2H
      0000D2 75 F0 80         [24]  696 	mov	b, #0x80
      0000D5 12r05r90         [24]  697 	lcall	_lcd_disp
                                    698 ;	fire_alarm_panel.c:156: delay1();
      0000D8 12r06r0A         [24]  699 	lcall	_delay1
                                    700 ;	fire_alarm_panel.c:157: if(RI) receive();
      0000DB 30 98 3E         [24]  701 	jnb	_RI,00135$
      0000DE 12r04r59         [24]  702 	lcall	_receive
      0000E1 80 39            [24]  703 	sjmp	00135$
      0000E3                        704 00134$:
                                    705 ;	fire_alarm_panel.c:160: Z2 = 1; // Mark as isolated
                                    706 ;	assignBit
      0000E3 D2*01            [12]  707 	setb	_Z2
                                    708 ;	fire_alarm_panel.c:161: lcd_cmd(LINE2);
      0000E5 90r00r0B         [24]  709 	mov	dptr,#_LINE2
      0000E8 75 F0 80         [24]  710 	mov	b, #0x80
      0000EB 12r05r3C         [24]  711 	lcall	_lcd_cmd
                                    712 ;	fire_alarm_panel.c:162: lcd_disp(ISO2); // Show "ZONE-02 ISOLATE"
      0000EE 90r00rD9         [24]  713 	mov	dptr,#_ISO2
      0000F1 75 F0 80         [24]  714 	mov	b, #0x80
      0000F4 12r05r90         [24]  715 	lcall	_lcd_disp
                                    716 ;	fire_alarm_panel.c:163: delay1();
      0000F7 12r06r0A         [24]  717 	lcall	_delay1
                                    718 ;	fire_alarm_panel.c:164: if(RI) receive();
      0000FA 30 98 03         [24]  719 	jnb	_RI,00125$
      0000FD 12r04r59         [24]  720 	lcall	_receive
      000100                        721 00125$:
                                    722 ;	fire_alarm_panel.c:167: if(FIRE2 && OPEN2 && SHORT2) {
      000100 30 83 0C         [24]  723 	jnb	_FIRE2,00129$
      000103 30 84 09         [24]  724 	jnb	_OPEN2,00129$
      000106 30 85 06         [24]  725 	jnb	_SHORT2,00129$
                                    726 ;	fire_alarm_panel.c:169: PR2 = 0;
                                    727 ;	assignBit
      000109 C2*06            [12]  728 	clr	_PR2
                                    729 ;	fire_alarm_panel.c:170: SLC2 = 0;
                                    730 ;	assignBit
      00010B C2*03            [12]  731 	clr	_SLC2
      00010D 80 0D            [24]  732 	sjmp	00135$
      00010F                        733 00129$:
                                    734 ;	fire_alarm_panel.c:173: PR2 = 1;
                                    735 ;	assignBit
      00010F D2*06            [12]  736 	setb	_PR2
                                    737 ;	fire_alarm_panel.c:174: BL = 1;
                                    738 ;	assignBit
      000111 D2 A7            [12]  739 	setb	_BL
                                    740 ;	fire_alarm_panel.c:175: prz2();
      000113 12r03r98         [24]  741 	lcall	_prz2
                                    742 ;	fire_alarm_panel.c:176: if(RI) receive();
      000116 30 98 03         [24]  743 	jnb	_RI,00135$
      000119 12r04r59         [24]  744 	lcall	_receive
      00011C                        745 00135$:
                                    746 ;	fire_alarm_panel.c:181: if(!ZONE1 && !ZONE2) {
      00011C 20 A4 1E         [24]  747 	jb	_ZONE1,00139$
      00011F 20 A5 1B         [24]  748 	jb	_ZONE2,00139$
                                    749 ;	fire_alarm_panel.c:182: lcd_cmd(LINE2);
      000122 90r00r0B         [24]  750 	mov	dptr,#_LINE2
      000125 75 F0 80         [24]  751 	mov	b, #0x80
      000128 12r05r3C         [24]  752 	lcall	_lcd_cmd
                                    753 ;	fire_alarm_panel.c:183: lcd_disp(TEXT3);
      00012B 90r00r2F         [24]  754 	mov	dptr,#_TEXT3
      00012E 75 F0 80         [24]  755 	mov	b, #0x80
      000131 12r05r90         [24]  756 	lcall	_lcd_disp
                                    757 ;	fire_alarm_panel.c:184: delay1();
      000134 12r06r0A         [24]  758 	lcall	_delay1
                                    759 ;	fire_alarm_panel.c:185: if(RI) receive();
      000137 30 98 03         [24]  760 	jnb	_RI,00139$
      00013A 12r04r59         [24]  761 	lcall	_receive
      00013D                        762 00139$:
                                    763 ;	fire_alarm_panel.c:189: if (!PR1 && !PR2) {
      00013D 20*05 0B         [24]  764 	jb	_PR1,00142$
      000140 20*06 08         [24]  765 	jb	_PR2,00142$
                                    766 ;	fire_alarm_panel.c:190: CFLR = 0;   // Fire LED OFF
                                    767 ;	assignBit
      000143 C2 96            [12]  768 	clr	_CFLR
                                    769 ;	fire_alarm_panel.c:191: CFTLR = 0;  // Fault LED OFF
                                    770 ;	assignBit
      000145 C2 97            [12]  771 	clr	_CFTLR
                                    772 ;	fire_alarm_panel.c:192: HOT = 0;    // Hooter OFF
                                    773 ;	assignBit
      000147 C2 94            [12]  774 	clr	_HOT
                                    775 ;	fire_alarm_panel.c:193: BUZ = 0;    // Buzzer OFF
                                    776 ;	assignBit
      000149 C2 95            [12]  777 	clr	_BUZ
      00014B                        778 00142$:
                                    779 ;	fire_alarm_panel.c:197: if(!SIL) {
      00014B 20 A0 03         [24]  780 	jb	_SIL,00145$
                                    781 ;	fire_alarm_panel.c:198: silence_alarms();
      00014E 12r04rF7         [24]  782 	lcall	_silence_alarms
      000151                        783 00145$:
                                    784 ;	fire_alarm_panel.c:202: if(RI) receive();
      000151 30 98 03         [24]  785 	jnb	_RI,00147$
      000154 12r04r59         [24]  786 	lcall	_receive
      000157                        787 00147$:
                                    788 ;	fire_alarm_panel.c:204: if(!LAMP) { // Lamp test button pressed (active low)
      000157 20 A6 70         [24]  789 	jb	_LAMP,00154$
                                    790 ;	fire_alarm_panel.c:206: BL = 1;
                                    791 ;	assignBit
      00015A D2 A7            [12]  792 	setb	_BL
                                    793 ;	fire_alarm_panel.c:207: lcd_cmd(LINE1);
      00015C 90r00r07         [24]  794 	mov	dptr,#_LINE1
      00015F 75 F0 80         [24]  795 	mov	b, #0x80
      000162 12r05r3C         [24]  796 	lcall	_lcd_cmd
                                    797 ;	fire_alarm_panel.c:208: lcd_disp(TLAMP);
      000165 90r00rA6         [24]  798 	mov	dptr,#_TLAMP
      000168 75 F0 80         [24]  799 	mov	b, #0x80
      00016B 12r05r90         [24]  800 	lcall	_lcd_disp
                                    801 ;	fire_alarm_panel.c:209: lcd_cmd(LINE2);
      00016E 90r00r0B         [24]  802 	mov	dptr,#_LINE2
      000171 75 F0 80         [24]  803 	mov	b, #0x80
      000174 12r05r3C         [24]  804 	lcall	_lcd_cmd
                                    805 ;	fire_alarm_panel.c:210: lcd_disp(TZONE1);
      000177 90r00r40         [24]  806 	mov	dptr,#_TZONE1
      00017A 75 F0 80         [24]  807 	mov	b, #0x80
      00017D 12r05r90         [24]  808 	lcall	_lcd_disp
                                    809 ;	fire_alarm_panel.c:211: delay1();
      000180 12r06r0A         [24]  810 	lcall	_delay1
                                    811 ;	fire_alarm_panel.c:212: delay1();
      000183 12r06r0A         [24]  812 	lcall	_delay1
                                    813 ;	fire_alarm_panel.c:215: CFLR = 1; CFTLR = 1; HOT = 1; BUZ = 1;
                                    814 ;	assignBit
      000186 D2 96            [12]  815 	setb	_CFLR
                                    816 ;	assignBit
      000188 D2 97            [12]  817 	setb	_CFTLR
                                    818 ;	assignBit
      00018A D2 94            [12]  819 	setb	_HOT
                                    820 ;	assignBit
      00018C D2 95            [12]  821 	setb	_BUZ
                                    822 ;	fire_alarm_panel.c:216: delay1();
      00018E 12r06r0A         [24]  823 	lcall	_delay1
                                    824 ;	fire_alarm_panel.c:217: CFLR = 0; CFTLR = 0; HOT = 0; BUZ = 0;
                                    825 ;	assignBit
      000191 C2 96            [12]  826 	clr	_CFLR
                                    827 ;	assignBit
      000193 C2 97            [12]  828 	clr	_CFTLR
                                    829 ;	assignBit
      000195 C2 94            [12]  830 	clr	_HOT
                                    831 ;	assignBit
      000197 C2 95            [12]  832 	clr	_BUZ
                                    833 ;	fire_alarm_panel.c:219: lcd_cmd(LINE2);
      000199 90r00r0B         [24]  834 	mov	dptr,#_LINE2
      00019C 75 F0 80         [24]  835 	mov	b, #0x80
      00019F 12r05r3C         [24]  836 	lcall	_lcd_cmd
                                    837 ;	fire_alarm_panel.c:220: lcd_disp(TZONE2);
      0001A2 90r00r51         [24]  838 	mov	dptr,#_TZONE2
      0001A5 75 F0 80         [24]  839 	mov	b, #0x80
      0001A8 12r05r90         [24]  840 	lcall	_lcd_disp
                                    841 ;	fire_alarm_panel.c:221: delay1();
      0001AB 12r06r0A         [24]  842 	lcall	_delay1
                                    843 ;	fire_alarm_panel.c:224: CFLR = 1; CFTLR = 1; HOT = 1; BUZ = 1;
                                    844 ;	assignBit
      0001AE D2 96            [12]  845 	setb	_CFLR
                                    846 ;	assignBit
      0001B0 D2 97            [12]  847 	setb	_CFTLR
                                    848 ;	assignBit
      0001B2 D2 94            [12]  849 	setb	_HOT
                                    850 ;	assignBit
      0001B4 D2 95            [12]  851 	setb	_BUZ
                                    852 ;	fire_alarm_panel.c:225: delay1();
      0001B6 12r06r0A         [24]  853 	lcall	_delay1
                                    854 ;	fire_alarm_panel.c:226: CFLR = 0; CFTLR = 0; HOT = 0; BUZ = 0;
                                    855 ;	assignBit
      0001B9 C2 96            [12]  856 	clr	_CFLR
                                    857 ;	assignBit
      0001BB C2 97            [12]  858 	clr	_CFTLR
                                    859 ;	assignBit
      0001BD C2 94            [12]  860 	clr	_HOT
                                    861 ;	assignBit
      0001BF C2 95            [12]  862 	clr	_BUZ
                                    863 ;	fire_alarm_panel.c:229: while(!LAMP);
      0001C1                        864 00148$:
      0001C1 30 A6 FD         [24]  865 	jnb	_LAMP,00148$
                                    866 ;	fire_alarm_panel.c:230: if(RI) receive();
      0001C4 30 98 03         [24]  867 	jnb	_RI,00154$
      0001C7 12r04r59         [24]  868 	lcall	_receive
      0001CA                        869 00154$:
                                    870 ;	fire_alarm_panel.c:234: if(!EVQ) {
      0001CA 20 A1 43         [24]  871 	jb	_EVQ,00162$
                                    872 ;	fire_alarm_panel.c:235: BL = 1;
                                    873 ;	assignBit
      0001CD D2 A7            [12]  874 	setb	_BL
                                    875 ;	fire_alarm_panel.c:236: BUZ = 1;
                                    876 ;	assignBit
      0001CF D2 95            [12]  877 	setb	_BUZ
                                    878 ;	fire_alarm_panel.c:237: HOT = 1;
                                    879 ;	assignBit
      0001D1 D2 94            [12]  880 	setb	_HOT
                                    881 ;	fire_alarm_panel.c:238: CFLR = 1;
                                    882 ;	assignBit
      0001D3 D2 96            [12]  883 	setb	_CFLR
                                    884 ;	fire_alarm_panel.c:239: lcd_cmd(LINE1);
      0001D5 90r00r07         [24]  885 	mov	dptr,#_LINE1
      0001D8 75 F0 80         [24]  886 	mov	b, #0x80
      0001DB 12r05r3C         [24]  887 	lcall	_lcd_cmd
                                    888 ;	fire_alarm_panel.c:240: lcd_disp(TEVQ);
      0001DE 90r00rB7         [24]  889 	mov	dptr,#_TEVQ
      0001E1 75 F0 80         [24]  890 	mov	b, #0x80
      0001E4 12r05r90         [24]  891 	lcall	_lcd_disp
                                    892 ;	fire_alarm_panel.c:241: lcd_cmd(LINE2);
      0001E7 90r00r0B         [24]  893 	mov	dptr,#_LINE2
      0001EA 75 F0 80         [24]  894 	mov	b, #0x80
      0001ED 12r05r3C         [24]  895 	lcall	_lcd_cmd
                                    896 ;	fire_alarm_panel.c:242: lcd_disp(TEXT4);
      0001F0 90r00r95         [24]  897 	mov	dptr,#_TEXT4
      0001F3 75 F0 80         [24]  898 	mov	b, #0x80
      0001F6 12r05r90         [24]  899 	lcall	_lcd_disp
                                    900 ;	fire_alarm_panel.c:245: while(!EVQ && !RI) {
      0001F9                        901 00156$:
      0001F9 20 A1 08         [24]  902 	jb	_EVQ,00158$
      0001FC 20 98 05         [24]  903 	jb	_RI,00158$
                                    904 ;	fire_alarm_panel.c:246: delay1();
      0001FF 12r06r0A         [24]  905 	lcall	_delay1
      000202 80 F5            [24]  906 	sjmp	00156$
      000204                        907 00158$:
                                    908 ;	fire_alarm_panel.c:249: if(RI) receive();
      000204 30 98 03         [24]  909 	jnb	_RI,00160$
      000207 12r04r59         [24]  910 	lcall	_receive
      00020A                        911 00160$:
                                    912 ;	fire_alarm_panel.c:252: BUZ = 0;
                                    913 ;	assignBit
      00020A C2 95            [12]  914 	clr	_BUZ
                                    915 ;	fire_alarm_panel.c:253: HOT = 0;
                                    916 ;	assignBit
      00020C C2 94            [12]  917 	clr	_HOT
                                    918 ;	fire_alarm_panel.c:254: CFLR = 0;
                                    919 ;	assignBit
      00020E C2 96            [12]  920 	clr	_CFLR
      000210                        921 00162$:
                                    922 ;	fire_alarm_panel.c:257: delay();
      000210 12r06r1D         [24]  923 	lcall	_delay
                                    924 ;	fire_alarm_panel.c:260: if(!PR1 && !PR2) {
      000213 20*05 27         [24]  925 	jb	_PR1,00164$
      000216 20*06 24         [24]  926 	jb	_PR2,00164$
                                    927 ;	fire_alarm_panel.c:261: lcd_cmd(LINE1);
      000219 90r00r07         [24]  928 	mov	dptr,#_LINE1
      00021C 75 F0 80         [24]  929 	mov	b, #0x80
      00021F 12r05r3C         [24]  930 	lcall	_lcd_cmd
                                    931 ;	fire_alarm_panel.c:262: lcd_disp(TEXT1);
      000222 90r00r0D         [24]  932 	mov	dptr,#_TEXT1
      000225 75 F0 80         [24]  933 	mov	b, #0x80
      000228 12r05r90         [24]  934 	lcall	_lcd_disp
                                    935 ;	fire_alarm_panel.c:263: lcd_cmd(LINE2);
      00022B 90r00r0B         [24]  936 	mov	dptr,#_LINE2
      00022E 75 F0 80         [24]  937 	mov	b, #0x80
      000231 12r05r3C         [24]  938 	lcall	_lcd_cmd
                                    939 ;	fire_alarm_panel.c:264: lcd_disp(TEXT3);
      000234 90r00r2F         [24]  940 	mov	dptr,#_TEXT3
      000237 75 F0 80         [24]  941 	mov	b, #0x80
      00023A 12r05r90         [24]  942 	lcall	_lcd_disp
      00023D                        943 00164$:
                                    944 ;	fire_alarm_panel.c:268: if(BLT1 > 0) {
      00023D E5*00            [12]  945 	mov	a,_BLT1
      00023F 60 05            [24]  946 	jz	00169$
                                    947 ;	fire_alarm_panel.c:269: BLT1--;
                                    948 ;	fire_alarm_panel.c:270: if(BLT1 == 0) {
      000241 D5*00 02         [24]  949 	djnz	_BLT1,00169$
                                    950 ;	fire_alarm_panel.c:271: BL = 0;
                                    951 ;	assignBit
      000244 C2 A7            [12]  952 	clr	_BL
      000246                        953 00169$:
                                    954 ;	fire_alarm_panel.c:276: if(!LB) {
      000246 20 A2 45         [24]  955 	jb	_LB,00180$
                                    956 ;	fire_alarm_panel.c:277: CFTLR = 1;
                                    957 ;	assignBit
      000249 D2 97            [12]  958 	setb	_CFTLR
                                    959 ;	fire_alarm_panel.c:278: if(!LISO) {
      00024B 20*04 09         [24]  960 	jb	_LISO,00173$
                                    961 ;	fire_alarm_panel.c:279: BUZ = 1;
                                    962 ;	assignBit
      00024E D2 95            [12]  963 	setb	_BUZ
                                    964 ;	fire_alarm_panel.c:280: if(!SIL) {
      000250 20 A0 04         [24]  965 	jb	_SIL,00173$
                                    966 ;	fire_alarm_panel.c:282: LISO = 1;
                                    967 ;	assignBit
      000253 D2*04            [12]  968 	setb	_LISO
                                    969 ;	fire_alarm_panel.c:283: BUZ = 0;
                                    970 ;	assignBit
      000255 C2 95            [12]  971 	clr	_BUZ
      000257                        972 00173$:
                                    973 ;	fire_alarm_panel.c:287: BL = 1;
                                    974 ;	assignBit
      000257 D2 A7            [12]  975 	setb	_BL
                                    976 ;	fire_alarm_panel.c:288: lcd_cmd(LINE1);
      000259 90r00r07         [24]  977 	mov	dptr,#_LINE1
      00025C 75 F0 80         [24]  978 	mov	b, #0x80
      00025F 12r05r3C         [24]  979 	lcall	_lcd_cmd
                                    980 ;	fire_alarm_panel.c:289: lcd_disp(LOWB);
      000262 90r01r0C         [24]  981 	mov	dptr,#_LOWB
      000265 75 F0 80         [24]  982 	mov	b, #0x80
      000268 12r05r90         [24]  983 	lcall	_lcd_disp
                                    984 ;	fire_alarm_panel.c:290: lcd_cmd(LINE2);
      00026B 90r00r0B         [24]  985 	mov	dptr,#_LINE2
      00026E 75 F0 80         [24]  986 	mov	b, #0x80
      000271 12r05r3C         [24]  987 	lcall	_lcd_cmd
                                    988 ;	fire_alarm_panel.c:291: lcd_disp(LOWM);
      000274 90r01r1D         [24]  989 	mov	dptr,#_LOWM
      000277 75 F0 80         [24]  990 	mov	b, #0x80
      00027A 12r05r90         [24]  991 	lcall	_lcd_disp
                                    992 ;	fire_alarm_panel.c:292: delay1();
      00027D 12r06r0A         [24]  993 	lcall	_delay1
                                    994 ;	fire_alarm_panel.c:293: delay1();
      000280 12r06r0A         [24]  995 	lcall	_delay1
                                    996 ;	fire_alarm_panel.c:295: if(LISO) {
      000283 20*04 03         [24]  997 	jb	_LISO,00497$
      000286 02r00r44         [24]  998 	ljmp	00183$
      000289                        999 00497$:
                                   1000 ;	fire_alarm_panel.c:296: BUZ = 0; // Keep buzzer off if silenced
                                   1001 ;	assignBit
      000289 C2 95            [12] 1002 	clr	_BUZ
      00028B 02r00r44         [24] 1003 	ljmp	00183$
      00028E                       1004 00180$:
                                   1005 ;	fire_alarm_panel.c:299: LISO = 0;
                                   1006 ;	assignBit
      00028E C2*04            [12] 1007 	clr	_LISO
                                   1008 ;	fire_alarm_panel.c:301: if(!PR1 && !PR2) {
      000290 30*05 03         [24] 1009 	jnb	_PR1,00498$
      000293 02r00r44         [24] 1010 	ljmp	00183$
      000296                       1011 00498$:
      000296 30*06 03         [24] 1012 	jnb	_PR2,00499$
      000299 02r00r44         [24] 1013 	ljmp	00183$
      00029C                       1014 00499$:
                                   1015 ;	fire_alarm_panel.c:302: CFTLR = 0;
                                   1016 ;	assignBit
      00029C C2 97            [12] 1017 	clr	_CFTLR
                                   1018 ;	fire_alarm_panel.c:306: }
      00029E 02r00r44         [24] 1019 	ljmp	00183$
                                   1020 ;------------------------------------------------------------
                                   1021 ;Allocation info for local variables in function 'init_system'
                                   1022 ;------------------------------------------------------------
                                   1023 ;	fire_alarm_panel.c:308: void init_system(void)
                                   1024 ;	-----------------------------------------
                                   1025 ;	 function init_system
                                   1026 ;	-----------------------------------------
      0002A1                       1027 _init_system:
                                   1028 ;	fire_alarm_panel.c:311: P1 = 0x00; // All indicators OFF initially
      0002A1 75 90 00         [24] 1029 	mov	_P1,#0x00
                                   1030 ;	fire_alarm_panel.c:312: P0 = 0xFF;
      0002A4 75 80 FF         [24] 1031 	mov	_P0,#0xff
                                   1032 ;	fire_alarm_panel.c:313: P2 = 0xFF;
      0002A7 75 A0 FF         [24] 1033 	mov	_P2,#0xff
                                   1034 ;	fire_alarm_panel.c:314: P3 = 0xFF;
      0002AA 75 B0 FF         [24] 1035 	mov	_P3,#0xff
                                   1036 ;	fire_alarm_panel.c:317: CFLR = 0;   // Fire LED OFF
                                   1037 ;	assignBit
      0002AD C2 96            [12] 1038 	clr	_CFLR
                                   1039 ;	fire_alarm_panel.c:318: CFTLR = 0;  // Fault LED OFF  
                                   1040 ;	assignBit
      0002AF C2 97            [12] 1041 	clr	_CFTLR
                                   1042 ;	fire_alarm_panel.c:319: HOT = 0;    // Hooter OFF
                                   1043 ;	assignBit
      0002B1 C2 94            [12] 1044 	clr	_HOT
                                   1045 ;	fire_alarm_panel.c:320: BUZ = 0;    // Buzzer OFF
                                   1046 ;	assignBit
      0002B3 C2 95            [12] 1047 	clr	_BUZ
                                   1048 ;	fire_alarm_panel.c:321: BL = 0;     // Backlight OFF initially
                                   1049 ;	assignBit
      0002B5 C2 A7            [12] 1050 	clr	_BL
                                   1051 ;	fire_alarm_panel.c:324: LISO = 0;
                                   1052 ;	assignBit
      0002B7 C2*04            [12] 1053 	clr	_LISO
                                   1054 ;	fire_alarm_panel.c:325: SLC1 = 0;
                                   1055 ;	assignBit
      0002B9 C2*02            [12] 1056 	clr	_SLC1
                                   1057 ;	fire_alarm_panel.c:326: SLC2 = 0;
                                   1058 ;	assignBit
      0002BB C2*03            [12] 1059 	clr	_SLC2
                                   1060 ;	fire_alarm_panel.c:327: Z1 = 0;
                                   1061 ;	assignBit
      0002BD C2*00            [12] 1062 	clr	_Z1
                                   1063 ;	fire_alarm_panel.c:328: Z2 = 0;
                                   1064 ;	assignBit
      0002BF C2*01            [12] 1065 	clr	_Z2
                                   1066 ;	fire_alarm_panel.c:329: PR1 = 0;
                                   1067 ;	assignBit
      0002C1 C2*05            [12] 1068 	clr	_PR1
                                   1069 ;	fire_alarm_panel.c:330: PR2 = 0;
                                   1070 ;	assignBit
      0002C3 C2*06            [12] 1071 	clr	_PR2
                                   1072 ;	fire_alarm_panel.c:332: BLT1 = 30;
      0002C5 75*00 1E         [24] 1073 	mov	_BLT1,#0x1e
                                   1074 ;	fire_alarm_panel.c:333: RAP = 0;
      0002C8 75*01 00         [24] 1075 	mov	_RAP,#0x00
                                   1076 ;	fire_alarm_panel.c:336: TMOD = 0x20;
      0002CB 75 89 20         [24] 1077 	mov	_TMOD,#0x20
                                   1078 ;	fire_alarm_panel.c:337: TH1 = 253;  // -3 for 9600 baud
      0002CE 75 8D FD         [24] 1079 	mov	_TH1,#0xfd
                                   1080 ;	fire_alarm_panel.c:338: SCON = 0x50;
      0002D1 75 98 50         [24] 1081 	mov	_SCON,#0x50
                                   1082 ;	fire_alarm_panel.c:339: TR1 = 1;
                                   1083 ;	assignBit
      0002D4 D2 8E            [12] 1084 	setb	_TR1
                                   1085 ;	fire_alarm_panel.c:340: }
      0002D6 22               [24] 1086 	ret
                                   1087 ;------------------------------------------------------------
                                   1088 ;Allocation info for local variables in function 'prz1'
                                   1089 ;------------------------------------------------------------
                                   1090 ;	fire_alarm_panel.c:342: void prz1(void)
                                   1091 ;	-----------------------------------------
                                   1092 ;	 function prz1
                                   1093 ;	-----------------------------------------
      0002D7                       1094 _prz1:
                                   1095 ;	fire_alarm_panel.c:344: if(!Z1) {
      0002D7 20*00 12         [24] 1096 	jb	_Z1,00102$
                                   1097 ;	fire_alarm_panel.c:345: lcd_cmd(LINE1);
      0002DA 90r00r07         [24] 1098 	mov	dptr,#_LINE1
      0002DD 75 F0 80         [24] 1099 	mov	b, #0x80
      0002E0 12r05r3C         [24] 1100 	lcall	_lcd_cmd
                                   1101 ;	fire_alarm_panel.c:346: lcd_disp(TZONE1);
      0002E3 90r00r40         [24] 1102 	mov	dptr,#_TZONE1
      0002E6 75 F0 80         [24] 1103 	mov	b, #0x80
      0002E9 12r05r90         [24] 1104 	lcall	_lcd_disp
      0002EC                       1105 00102$:
                                   1106 ;	fire_alarm_panel.c:350: if(!SHORT1) {
      0002EC 20 82 25         [24] 1107 	jb	_SHORT1,00129$
                                   1108 ;	fire_alarm_panel.c:351: lcd_cmd(LINE2);
      0002EF 90r00r0B         [24] 1109 	mov	dptr,#_LINE2
      0002F2 75 F0 80         [24] 1110 	mov	b, #0x80
      0002F5 12r05r3C         [24] 1111 	lcall	_lcd_cmd
                                   1112 ;	fire_alarm_panel.c:352: lcd_disp(SHORT);
      0002F8 90r00r73         [24] 1113 	mov	dptr,#_SHORT
      0002FB 75 F0 80         [24] 1114 	mov	b, #0x80
      0002FE 12r05r90         [24] 1115 	lcall	_lcd_disp
                                   1116 ;	fire_alarm_panel.c:353: CFTLR = 1;  // Fault LED ON
                                   1117 ;	assignBit
      000301 D2 97            [12] 1118 	setb	_CFTLR
                                   1119 ;	fire_alarm_panel.c:354: CFLR = 0;   // Fire LED OFF
                                   1120 ;	assignBit
      000303 C2 96            [12] 1121 	clr	_CFLR
                                   1122 ;	fire_alarm_panel.c:355: HOT = 0;    // Hooter OFF
                                   1123 ;	assignBit
      000305 C2 94            [12] 1124 	clr	_HOT
                                   1125 ;	fire_alarm_panel.c:356: if(!SLC1) {
      000307 20*02 05         [24] 1126 	jb	_SLC1,00104$
                                   1127 ;	fire_alarm_panel.c:357: BUZ = 1; // Buzzer ON if not silenced
                                   1128 ;	assignBit
      00030A D2 95            [12] 1129 	setb	_BUZ
      00030C 02r03r95         [24] 1130 	ljmp	00130$
      00030F                       1131 00104$:
                                   1132 ;	fire_alarm_panel.c:359: BUZ = 0; // Buzzer OFF if silenced
                                   1133 ;	assignBit
      00030F C2 95            [12] 1134 	clr	_BUZ
      000311 02r03r95         [24] 1135 	ljmp	00130$
      000314                       1136 00129$:
                                   1137 ;	fire_alarm_panel.c:361: } else if(!FIRE1) {
      000314 20 80 2E         [24] 1138 	jb	_FIRE1,00126$
                                   1139 ;	fire_alarm_panel.c:362: lcd_cmd(LINE2);
      000317 90r00r0B         [24] 1140 	mov	dptr,#_LINE2
      00031A 75 F0 80         [24] 1141 	mov	b, #0x80
      00031D 12r05r3C         [24] 1142 	lcall	_lcd_cmd
                                   1143 ;	fire_alarm_panel.c:363: lcd_disp(FIRE);
      000320 90r00r62         [24] 1144 	mov	dptr,#_FIRE
      000323 75 F0 80         [24] 1145 	mov	b, #0x80
      000326 12r05r90         [24] 1146 	lcall	_lcd_disp
                                   1147 ;	fire_alarm_panel.c:364: CFLR = 1;   // Fire LED ON
                                   1148 ;	assignBit
      000329 D2 96            [12] 1149 	setb	_CFLR
                                   1150 ;	fire_alarm_panel.c:366: if(FIRE2 && OPEN2 && SHORT2) { // Zone 2 healthy
      00032B 30 83 08         [24] 1151 	jnb	_FIRE2,00107$
      00032E 30 84 05         [24] 1152 	jnb	_OPEN2,00107$
      000331 30 85 02         [24] 1153 	jnb	_SHORT2,00107$
                                   1154 ;	fire_alarm_panel.c:367: CFTLR = 0;
                                   1155 ;	assignBit
      000334 C2 97            [12] 1156 	clr	_CFTLR
      000336                       1157 00107$:
                                   1158 ;	fire_alarm_panel.c:369: if(!SLC1) {
      000336 20*02 06         [24] 1159 	jb	_SLC1,00111$
                                   1160 ;	fire_alarm_panel.c:370: BUZ = 1;  // Buzzer ON if not silenced
                                   1161 ;	assignBit
      000339 D2 95            [12] 1162 	setb	_BUZ
                                   1163 ;	fire_alarm_panel.c:371: HOT = 1;  // Hooter ON if not silenced
                                   1164 ;	assignBit
      00033B D2 94            [12] 1165 	setb	_HOT
      00033D 80 56            [24] 1166 	sjmp	00130$
      00033F                       1167 00111$:
                                   1168 ;	fire_alarm_panel.c:373: BUZ = 0;  // Buzzer OFF if silenced
                                   1169 ;	assignBit
      00033F C2 95            [12] 1170 	clr	_BUZ
                                   1171 ;	fire_alarm_panel.c:374: HOT = 0;  // Hooter OFF if silenced
                                   1172 ;	assignBit
      000341 C2 94            [12] 1173 	clr	_HOT
      000343 80 50            [24] 1174 	sjmp	00130$
      000345                       1175 00126$:
                                   1176 ;	fire_alarm_panel.c:376: } else if(!OPEN1) {
      000345 20 81 23         [24] 1177 	jb	_OPEN1,00123$
                                   1178 ;	fire_alarm_panel.c:377: lcd_cmd(LINE2);
      000348 90r00r0B         [24] 1179 	mov	dptr,#_LINE2
      00034B 75 F0 80         [24] 1180 	mov	b, #0x80
      00034E 12r05r3C         [24] 1181 	lcall	_lcd_cmd
                                   1182 ;	fire_alarm_panel.c:378: lcd_disp(OPEN);
      000351 90r00r84         [24] 1183 	mov	dptr,#_OPEN
      000354 75 F0 80         [24] 1184 	mov	b, #0x80
      000357 12r05r90         [24] 1185 	lcall	_lcd_disp
                                   1186 ;	fire_alarm_panel.c:379: CFTLR = 1;  // Fault LED ON
                                   1187 ;	assignBit
      00035A D2 97            [12] 1188 	setb	_CFTLR
                                   1189 ;	fire_alarm_panel.c:380: CFLR = 0;   // Fire LED OFF
                                   1190 ;	assignBit
      00035C C2 96            [12] 1191 	clr	_CFLR
                                   1192 ;	fire_alarm_panel.c:381: HOT = 0;    // Hooter OFF
                                   1193 ;	assignBit
      00035E C2 94            [12] 1194 	clr	_HOT
                                   1195 ;	fire_alarm_panel.c:382: if(!SLC1) {
      000360 20*02 04         [24] 1196 	jb	_SLC1,00114$
                                   1197 ;	fire_alarm_panel.c:383: BUZ = 1; // Buzzer ON if not silenced
                                   1198 ;	assignBit
      000363 D2 95            [12] 1199 	setb	_BUZ
      000365 80 2E            [24] 1200 	sjmp	00130$
      000367                       1201 00114$:
                                   1202 ;	fire_alarm_panel.c:385: BUZ = 0; // Buzzer OFF if silenced
                                   1203 ;	assignBit
      000367 C2 95            [12] 1204 	clr	_BUZ
      000369 80 2A            [24] 1205 	sjmp	00130$
      00036B                       1206 00123$:
                                   1207 ;	fire_alarm_panel.c:390: PR1 = 0;
                                   1208 ;	assignBit
      00036B C2*05            [12] 1209 	clr	_PR1
                                   1210 ;	fire_alarm_panel.c:391: SLC1 = 0;
                                   1211 ;	assignBit
      00036D C2*02            [12] 1212 	clr	_SLC1
                                   1213 ;	fire_alarm_panel.c:394: if(FIRE2 && OPEN2 && SHORT2) { // Zone 2 also healthy
      00036F 30 83 0E         [24] 1214 	jnb	_FIRE2,00117$
      000372 30 84 0B         [24] 1215 	jnb	_OPEN2,00117$
      000375 30 85 08         [24] 1216 	jnb	_SHORT2,00117$
                                   1217 ;	fire_alarm_panel.c:395: CFTLR = 0;
                                   1218 ;	assignBit
      000378 C2 97            [12] 1219 	clr	_CFTLR
                                   1220 ;	fire_alarm_panel.c:396: CFLR = 0;
                                   1221 ;	assignBit
      00037A C2 96            [12] 1222 	clr	_CFLR
                                   1223 ;	fire_alarm_panel.c:397: HOT = 0;
                                   1224 ;	assignBit
      00037C C2 94            [12] 1225 	clr	_HOT
                                   1226 ;	fire_alarm_panel.c:398: BUZ = 0;
                                   1227 ;	assignBit
      00037E C2 95            [12] 1228 	clr	_BUZ
      000380                       1229 00117$:
                                   1230 ;	fire_alarm_panel.c:401: if(ZONE1) { // If zone is not isolated
      000380 30 A4 12         [24] 1231 	jnb	_ZONE1,00130$
                                   1232 ;	fire_alarm_panel.c:402: lcd_cmd(LINE2);
      000383 90r00r0B         [24] 1233 	mov	dptr,#_LINE2
      000386 75 F0 80         [24] 1234 	mov	b, #0x80
      000389 12r05r3C         [24] 1235 	lcall	_lcd_cmd
                                   1236 ;	fire_alarm_panel.c:403: lcd_disp(ISO1H);
      00038C 90r00rEA         [24] 1237 	mov	dptr,#_ISO1H
      00038F 75 F0 80         [24] 1238 	mov	b, #0x80
      000392 12r05r90         [24] 1239 	lcall	_lcd_disp
      000395                       1240 00130$:
                                   1241 ;	fire_alarm_panel.c:407: delay1();
                                   1242 ;	fire_alarm_panel.c:408: }
      000395 02r06r0A         [24] 1243 	ljmp	_delay1
                                   1244 ;------------------------------------------------------------
                                   1245 ;Allocation info for local variables in function 'prz2'
                                   1246 ;------------------------------------------------------------
                                   1247 ;	fire_alarm_panel.c:410: void prz2(void)
                                   1248 ;	-----------------------------------------
                                   1249 ;	 function prz2
                                   1250 ;	-----------------------------------------
      000398                       1251 _prz2:
                                   1252 ;	fire_alarm_panel.c:412: if(!Z2) { // Fixed: should check Z2 for zone 2 testing
      000398 20*01 12         [24] 1253 	jb	_Z2,00102$
                                   1254 ;	fire_alarm_panel.c:413: lcd_cmd(LINE1);
      00039B 90r00r07         [24] 1255 	mov	dptr,#_LINE1
      00039E 75 F0 80         [24] 1256 	mov	b, #0x80
      0003A1 12r05r3C         [24] 1257 	lcall	_lcd_cmd
                                   1258 ;	fire_alarm_panel.c:414: lcd_disp(TZONE2);
      0003A4 90r00r51         [24] 1259 	mov	dptr,#_TZONE2
      0003A7 75 F0 80         [24] 1260 	mov	b, #0x80
      0003AA 12r05r90         [24] 1261 	lcall	_lcd_disp
      0003AD                       1262 00102$:
                                   1263 ;	fire_alarm_panel.c:418: if(!SHORT2) {
      0003AD 20 85 25         [24] 1264 	jb	_SHORT2,00129$
                                   1265 ;	fire_alarm_panel.c:419: lcd_cmd(LINE2);
      0003B0 90r00r0B         [24] 1266 	mov	dptr,#_LINE2
      0003B3 75 F0 80         [24] 1267 	mov	b, #0x80
      0003B6 12r05r3C         [24] 1268 	lcall	_lcd_cmd
                                   1269 ;	fire_alarm_panel.c:420: lcd_disp(SHORT);
      0003B9 90r00r73         [24] 1270 	mov	dptr,#_SHORT
      0003BC 75 F0 80         [24] 1271 	mov	b, #0x80
      0003BF 12r05r90         [24] 1272 	lcall	_lcd_disp
                                   1273 ;	fire_alarm_panel.c:421: CFTLR = 1;  // Fault LED ON
                                   1274 ;	assignBit
      0003C2 D2 97            [12] 1275 	setb	_CFTLR
                                   1276 ;	fire_alarm_panel.c:422: CFLR = 0;   // Fire LED OFF
                                   1277 ;	assignBit
      0003C4 C2 96            [12] 1278 	clr	_CFLR
                                   1279 ;	fire_alarm_panel.c:423: HOT = 0;    // Hooter OFF
                                   1280 ;	assignBit
      0003C6 C2 94            [12] 1281 	clr	_HOT
                                   1282 ;	fire_alarm_panel.c:424: if(!SLC2) {
      0003C8 20*03 05         [24] 1283 	jb	_SLC2,00104$
                                   1284 ;	fire_alarm_panel.c:425: BUZ = 1; // Buzzer ON if not silenced
                                   1285 ;	assignBit
      0003CB D2 95            [12] 1286 	setb	_BUZ
      0003CD 02r04r56         [24] 1287 	ljmp	00130$
      0003D0                       1288 00104$:
                                   1289 ;	fire_alarm_panel.c:427: BUZ = 0; // Buzzer OFF if silenced
                                   1290 ;	assignBit
      0003D0 C2 95            [12] 1291 	clr	_BUZ
      0003D2 02r04r56         [24] 1292 	ljmp	00130$
      0003D5                       1293 00129$:
                                   1294 ;	fire_alarm_panel.c:429: } else if(!FIRE2) {
      0003D5 20 83 2E         [24] 1295 	jb	_FIRE2,00126$
                                   1296 ;	fire_alarm_panel.c:430: lcd_cmd(LINE2);
      0003D8 90r00r0B         [24] 1297 	mov	dptr,#_LINE2
      0003DB 75 F0 80         [24] 1298 	mov	b, #0x80
      0003DE 12r05r3C         [24] 1299 	lcall	_lcd_cmd
                                   1300 ;	fire_alarm_panel.c:431: lcd_disp(FIRE);
      0003E1 90r00r62         [24] 1301 	mov	dptr,#_FIRE
      0003E4 75 F0 80         [24] 1302 	mov	b, #0x80
      0003E7 12r05r90         [24] 1303 	lcall	_lcd_disp
                                   1304 ;	fire_alarm_panel.c:432: CFLR = 1;   // Fire LED ON
                                   1305 ;	assignBit
      0003EA D2 96            [12] 1306 	setb	_CFLR
                                   1307 ;	fire_alarm_panel.c:434: if(FIRE1 && OPEN1 && SHORT1) { // Zone 1 healthy
      0003EC 30 80 08         [24] 1308 	jnb	_FIRE1,00107$
      0003EF 30 81 05         [24] 1309 	jnb	_OPEN1,00107$
      0003F2 30 82 02         [24] 1310 	jnb	_SHORT1,00107$
                                   1311 ;	fire_alarm_panel.c:435: CFTLR = 0;
                                   1312 ;	assignBit
      0003F5 C2 97            [12] 1313 	clr	_CFTLR
      0003F7                       1314 00107$:
                                   1315 ;	fire_alarm_panel.c:437: if(!SLC2) {
      0003F7 20*03 06         [24] 1316 	jb	_SLC2,00111$
                                   1317 ;	fire_alarm_panel.c:438: BUZ = 1;  // Buzzer ON if not silenced
                                   1318 ;	assignBit
      0003FA D2 95            [12] 1319 	setb	_BUZ
                                   1320 ;	fire_alarm_panel.c:439: HOT = 1;  // Hooter ON if not silenced
                                   1321 ;	assignBit
      0003FC D2 94            [12] 1322 	setb	_HOT
      0003FE 80 56            [24] 1323 	sjmp	00130$
      000400                       1324 00111$:
                                   1325 ;	fire_alarm_panel.c:441: BUZ = 0;  // Buzzer OFF if silenced
                                   1326 ;	assignBit
      000400 C2 95            [12] 1327 	clr	_BUZ
                                   1328 ;	fire_alarm_panel.c:442: HOT = 0;  // Hooter OFF if silenced
                                   1329 ;	assignBit
      000402 C2 94            [12] 1330 	clr	_HOT
      000404 80 50            [24] 1331 	sjmp	00130$
      000406                       1332 00126$:
                                   1333 ;	fire_alarm_panel.c:444: } else if(!OPEN2) {
      000406 20 84 23         [24] 1334 	jb	_OPEN2,00123$
                                   1335 ;	fire_alarm_panel.c:445: lcd_cmd(LINE2);
      000409 90r00r0B         [24] 1336 	mov	dptr,#_LINE2
      00040C 75 F0 80         [24] 1337 	mov	b, #0x80
      00040F 12r05r3C         [24] 1338 	lcall	_lcd_cmd
                                   1339 ;	fire_alarm_panel.c:446: lcd_disp(OPEN);
      000412 90r00r84         [24] 1340 	mov	dptr,#_OPEN
      000415 75 F0 80         [24] 1341 	mov	b, #0x80
      000418 12r05r90         [24] 1342 	lcall	_lcd_disp
                                   1343 ;	fire_alarm_panel.c:447: CFTLR = 1;  // Fault LED ON
                                   1344 ;	assignBit
      00041B D2 97            [12] 1345 	setb	_CFTLR
                                   1346 ;	fire_alarm_panel.c:448: CFLR = 0;   // Fire LED OFF
                                   1347 ;	assignBit
      00041D C2 96            [12] 1348 	clr	_CFLR
                                   1349 ;	fire_alarm_panel.c:449: HOT = 0;    // Hooter OFF
                                   1350 ;	assignBit
      00041F C2 94            [12] 1351 	clr	_HOT
                                   1352 ;	fire_alarm_panel.c:450: if(!SLC2) {
      000421 20*03 04         [24] 1353 	jb	_SLC2,00114$
                                   1354 ;	fire_alarm_panel.c:451: BUZ = 1; // Buzzer ON if not silenced
                                   1355 ;	assignBit
      000424 D2 95            [12] 1356 	setb	_BUZ
      000426 80 2E            [24] 1357 	sjmp	00130$
      000428                       1358 00114$:
                                   1359 ;	fire_alarm_panel.c:453: BUZ = 0; // Buzzer OFF if silenced
                                   1360 ;	assignBit
      000428 C2 95            [12] 1361 	clr	_BUZ
      00042A 80 2A            [24] 1362 	sjmp	00130$
      00042C                       1363 00123$:
                                   1364 ;	fire_alarm_panel.c:458: PR2 = 0;
                                   1365 ;	assignBit
      00042C C2*06            [12] 1366 	clr	_PR2
                                   1367 ;	fire_alarm_panel.c:459: SLC2 = 0;
                                   1368 ;	assignBit
      00042E C2*03            [12] 1369 	clr	_SLC2
                                   1370 ;	fire_alarm_panel.c:462: if(FIRE1 && OPEN1 && SHORT1) { // Zone 1 also healthy
      000430 30 80 0E         [24] 1371 	jnb	_FIRE1,00117$
      000433 30 81 0B         [24] 1372 	jnb	_OPEN1,00117$
      000436 30 82 08         [24] 1373 	jnb	_SHORT1,00117$
                                   1374 ;	fire_alarm_panel.c:463: CFTLR = 0;
                                   1375 ;	assignBit
      000439 C2 97            [12] 1376 	clr	_CFTLR
                                   1377 ;	fire_alarm_panel.c:464: CFLR = 0;
                                   1378 ;	assignBit
      00043B C2 96            [12] 1379 	clr	_CFLR
                                   1380 ;	fire_alarm_panel.c:465: HOT = 0;
                                   1381 ;	assignBit
      00043D C2 94            [12] 1382 	clr	_HOT
                                   1383 ;	fire_alarm_panel.c:466: BUZ = 0;
                                   1384 ;	assignBit
      00043F C2 95            [12] 1385 	clr	_BUZ
      000441                       1386 00117$:
                                   1387 ;	fire_alarm_panel.c:469: if(ZONE2) { // If zone is not isolated
      000441 30 A5 12         [24] 1388 	jnb	_ZONE2,00130$
                                   1389 ;	fire_alarm_panel.c:470: lcd_cmd(LINE2);
      000444 90r00r0B         [24] 1390 	mov	dptr,#_LINE2
      000447 75 F0 80         [24] 1391 	mov	b, #0x80
      00044A 12r05r3C         [24] 1392 	lcall	_lcd_cmd
                                   1393 ;	fire_alarm_panel.c:471: lcd_disp(ISO2H);
      00044D 90r00rFB         [24] 1394 	mov	dptr,#_ISO2H
      000450 75 F0 80         [24] 1395 	mov	b, #0x80
      000453 12r05r90         [24] 1396 	lcall	_lcd_disp
      000456                       1397 00130$:
                                   1398 ;	fire_alarm_panel.c:475: delay1();
                                   1399 ;	fire_alarm_panel.c:476: }
      000456 02r06r0A         [24] 1400 	ljmp	_delay1
                                   1401 ;------------------------------------------------------------
                                   1402 ;Allocation info for local variables in function 'receive'
                                   1403 ;------------------------------------------------------------
                                   1404 ;received_data Allocated to registers r7 
                                   1405 ;------------------------------------------------------------
                                   1406 ;	fire_alarm_panel.c:478: void receive(void)
                                   1407 ;	-----------------------------------------
                                   1408 ;	 function receive
                                   1409 ;	-----------------------------------------
      000459                       1410 _receive:
                                   1411 ;	fire_alarm_panel.c:482: received_data = SBUF;
      000459 AF 99            [24] 1412 	mov	r7,_SBUF
                                   1413 ;	fire_alarm_panel.c:483: RI = 0;
                                   1414 ;	assignBit
      00045B C2 98            [12] 1415 	clr	_RI
                                   1416 ;	fire_alarm_panel.c:484: SBUF = received_data;
      00045D 8F 99            [24] 1417 	mov	_SBUF,r7
                                   1418 ;	fire_alarm_panel.c:485: while(!TI);
      00045F                       1419 00101$:
                                   1420 ;	fire_alarm_panel.c:486: TI = 0;
                                   1421 ;	assignBit
      00045F 10 99 02         [24] 1422 	jbc	_TI,00281$
      000462 80 FB            [24] 1423 	sjmp	00101$
      000464                       1424 00281$:
                                   1425 ;	fire_alarm_panel.c:488: switch(received_data) {
      000464 BF 00 02         [24] 1426 	cjne	r7,#0x00,00282$
      000467 80 32            [24] 1427 	sjmp	00106$
      000469                       1428 00282$:
      000469 BF 01 02         [24] 1429 	cjne	r7,#0x01,00283$
      00046C 80 3C            [24] 1430 	sjmp	00110$
      00046E                       1431 00283$:
      00046E BF 02 02         [24] 1432 	cjne	r7,#0x02,00284$
      000471 80 46            [24] 1433 	sjmp	00114$
      000473                       1434 00284$:
      000473 BF 03 02         [24] 1435 	cjne	r7,#0x03,00285$
      000476 80 55            [24] 1436 	sjmp	00122$
      000478                       1437 00285$:
      000478 BF 40 02         [24] 1438 	cjne	r7,#0x40,00286$
      00047B 80 46            [24] 1439 	sjmp	00118$
      00047D                       1440 00286$:
      00047D BF AA 02         [24] 1441 	cjne	r7,#0xaa,00287$
      000480 80 0A            [24] 1442 	sjmp	00104$
      000482                       1443 00287$:
      000482 BF BB 02         [24] 1444 	cjne	r7,#0xbb,00288$
      000485 80 0B            [24] 1445 	sjmp	00105$
      000487                       1446 00288$:
                                   1447 ;	fire_alarm_panel.c:489: case 0xAA:
      000487 BF FF 5C         [24] 1448 	cjne	r7,#0xff,00130$
      00048A 80 50            [24] 1449 	sjmp	00126$
      00048C                       1450 00104$:
                                   1451 ;	fire_alarm_panel.c:490: send_data(P2);
      00048C 85 A0 82         [24] 1452 	mov	dpl, _P2
                                   1453 ;	fire_alarm_panel.c:491: break;
                                   1454 ;	fire_alarm_panel.c:493: case 0xBB:
      00048F 02r04rEE         [24] 1455 	ljmp	_send_data
      000492                       1456 00105$:
                                   1457 ;	fire_alarm_panel.c:494: send_data(P0 | 0xC0);
      000492 74 C0            [12] 1458 	mov	a,#0xc0
      000494 45 80            [12] 1459 	orl	a,_P0
      000496 F5 82            [12] 1460 	mov	dpl,a
                                   1461 ;	fire_alarm_panel.c:495: break;
                                   1462 ;	fire_alarm_panel.c:497: case 0x00:
      000498 02r04rEE         [24] 1463 	ljmp	_send_data
      00049B                       1464 00106$:
                                   1465 ;	fire_alarm_panel.c:498: silence_alarms();
      00049B C0 07            [24] 1466 	push	ar7
      00049D 12r04rF7         [24] 1467 	lcall	_silence_alarms
      0004A0 D0 07            [24] 1468 	pop	ar7
                                   1469 ;	fire_alarm_panel.c:499: SBUF = received_data;
      0004A2 8F 99            [24] 1470 	mov	_SBUF,r7
                                   1471 ;	fire_alarm_panel.c:500: while(!TI);
      0004A4                       1472 00107$:
                                   1473 ;	fire_alarm_panel.c:501: TI = 0;
                                   1474 ;	assignBit
      0004A4 10 99 02         [24] 1475 	jbc	_TI,00290$
      0004A7 80 FB            [24] 1476 	sjmp	00107$
      0004A9                       1477 00290$:
                                   1478 ;	fire_alarm_panel.c:502: break;
                                   1479 ;	fire_alarm_panel.c:504: case 0x01:
      0004A9 22               [24] 1480 	ret
      0004AA                       1481 00110$:
                                   1482 ;	fire_alarm_panel.c:505: silence_alarms();
      0004AA C0 07            [24] 1483 	push	ar7
      0004AC 12r04rF7         [24] 1484 	lcall	_silence_alarms
      0004AF D0 07            [24] 1485 	pop	ar7
                                   1486 ;	fire_alarm_panel.c:506: SBUF = received_data;
      0004B1 8F 99            [24] 1487 	mov	_SBUF,r7
                                   1488 ;	fire_alarm_panel.c:507: while(!TI);
      0004B3                       1489 00111$:
                                   1490 ;	fire_alarm_panel.c:508: TI = 0;
                                   1491 ;	assignBit
      0004B3 10 99 02         [24] 1492 	jbc	_TI,00291$
      0004B6 80 FB            [24] 1493 	sjmp	00111$
      0004B8                       1494 00291$:
                                   1495 ;	fire_alarm_panel.c:509: break;
                                   1496 ;	fire_alarm_panel.c:511: case 0x02:
      0004B8 22               [24] 1497 	ret
      0004B9                       1498 00114$:
                                   1499 ;	fire_alarm_panel.c:512: EVQ = 0;
                                   1500 ;	assignBit
      0004B9 C2 A1            [12] 1501 	clr	_EVQ
                                   1502 ;	fire_alarm_panel.c:513: SBUF = received_data;
      0004BB 8F 99            [24] 1503 	mov	_SBUF,r7
                                   1504 ;	fire_alarm_panel.c:514: while(!TI);
      0004BD                       1505 00115$:
                                   1506 ;	fire_alarm_panel.c:515: TI = 0;
                                   1507 ;	assignBit
      0004BD 10 99 02         [24] 1508 	jbc	_TI,00292$
      0004C0 80 FB            [24] 1509 	sjmp	00115$
      0004C2                       1510 00292$:
                                   1511 ;	fire_alarm_panel.c:516: break;
                                   1512 ;	fire_alarm_panel.c:518: case 0x40:
      0004C2 22               [24] 1513 	ret
      0004C3                       1514 00118$:
                                   1515 ;	fire_alarm_panel.c:519: Z2 = 1;
                                   1516 ;	assignBit
      0004C3 D2*01            [12] 1517 	setb	_Z2
                                   1518 ;	fire_alarm_panel.c:520: SBUF = received_data;
      0004C5 8F 99            [24] 1519 	mov	_SBUF,r7
                                   1520 ;	fire_alarm_panel.c:521: while(!TI);
      0004C7                       1521 00119$:
                                   1522 ;	fire_alarm_panel.c:522: TI = 0;
                                   1523 ;	assignBit
      0004C7 10 99 02         [24] 1524 	jbc	_TI,00293$
      0004CA 80 FB            [24] 1525 	sjmp	00119$
      0004CC                       1526 00293$:
                                   1527 ;	fire_alarm_panel.c:523: break;
                                   1528 ;	fire_alarm_panel.c:525: case 0x03:
      0004CC 22               [24] 1529 	ret
      0004CD                       1530 00122$:
                                   1531 ;	fire_alarm_panel.c:526: silence_alarms();
      0004CD C0 07            [24] 1532 	push	ar7
      0004CF 12r04rF7         [24] 1533 	lcall	_silence_alarms
      0004D2 D0 07            [24] 1534 	pop	ar7
                                   1535 ;	fire_alarm_panel.c:527: SBUF = received_data;
      0004D4 8F 99            [24] 1536 	mov	_SBUF,r7
                                   1537 ;	fire_alarm_panel.c:528: while(!TI);
      0004D6                       1538 00123$:
                                   1539 ;	fire_alarm_panel.c:529: TI = 0;
                                   1540 ;	assignBit
      0004D6 10 99 02         [24] 1541 	jbc	_TI,00294$
      0004D9 80 FB            [24] 1542 	sjmp	00123$
      0004DB                       1543 00294$:
                                   1544 ;	fire_alarm_panel.c:530: break;
                                   1545 ;	fire_alarm_panel.c:532: case 0xFF:
      0004DB 22               [24] 1546 	ret
      0004DC                       1547 00126$:
                                   1548 ;	fire_alarm_panel.c:533: SBUF = received_data;
      0004DC 8F 99            [24] 1549 	mov	_SBUF,r7
                                   1550 ;	fire_alarm_panel.c:534: while(!TI);
      0004DE                       1551 00127$:
                                   1552 ;	fire_alarm_panel.c:535: TI = 0;
                                   1553 ;	assignBit
      0004DE 10 99 02         [24] 1554 	jbc	_TI,00295$
      0004E1 80 FB            [24] 1555 	sjmp	00127$
      0004E3                       1556 00295$:
                                   1557 ;	fire_alarm_panel.c:537: init_system();
                                   1558 ;	fire_alarm_panel.c:538: break;
                                   1559 ;	fire_alarm_panel.c:540: default:
      0004E3 02r02rA1         [24] 1560 	ljmp	_init_system
      0004E6                       1561 00130$:
                                   1562 ;	fire_alarm_panel.c:542: SBUF = received_data;
      0004E6 8F 99            [24] 1563 	mov	_SBUF,r7
                                   1564 ;	fire_alarm_panel.c:543: while(!TI);
      0004E8                       1565 00131$:
                                   1566 ;	fire_alarm_panel.c:544: TI = 0;
                                   1567 ;	assignBit
      0004E8 10 99 02         [24] 1568 	jbc	_TI,00296$
      0004EB 80 FB            [24] 1569 	sjmp	00131$
      0004ED                       1570 00296$:
                                   1571 ;	fire_alarm_panel.c:546: }
                                   1572 ;	fire_alarm_panel.c:547: }
      0004ED 22               [24] 1573 	ret
                                   1574 ;------------------------------------------------------------
                                   1575 ;Allocation info for local variables in function 'send_data'
                                   1576 ;------------------------------------------------------------
                                   1577 ;data          Allocated to registers 
                                   1578 ;------------------------------------------------------------
                                   1579 ;	fire_alarm_panel.c:549: void send_data(unsigned char data)
                                   1580 ;	-----------------------------------------
                                   1581 ;	 function send_data
                                   1582 ;	-----------------------------------------
      0004EE                       1583 _send_data:
      0004EE 85 82 99         [24] 1584 	mov	_SBUF,dpl
                                   1585 ;	fire_alarm_panel.c:552: while(!TI);
      0004F1                       1586 00101$:
                                   1587 ;	fire_alarm_panel.c:553: TI = 0;
                                   1588 ;	assignBit
      0004F1 10 99 02         [24] 1589 	jbc	_TI,00118$
      0004F4 80 FB            [24] 1590 	sjmp	00101$
      0004F6                       1591 00118$:
                                   1592 ;	fire_alarm_panel.c:554: }
      0004F6 22               [24] 1593 	ret
                                   1594 ;------------------------------------------------------------
                                   1595 ;Allocation info for local variables in function 'silence_alarms'
                                   1596 ;------------------------------------------------------------
                                   1597 ;	fire_alarm_panel.c:556: void silence_alarms(void)
                                   1598 ;	-----------------------------------------
                                   1599 ;	 function silence_alarms
                                   1600 ;	-----------------------------------------
      0004F7                       1601 _silence_alarms:
                                   1602 ;	fire_alarm_panel.c:558: SLC1 = 1;
                                   1603 ;	assignBit
      0004F7 D2*02            [12] 1604 	setb	_SLC1
                                   1605 ;	fire_alarm_panel.c:559: SLC2 = 1;
                                   1606 ;	assignBit
      0004F9 D2*03            [12] 1607 	setb	_SLC2
                                   1608 ;	fire_alarm_panel.c:560: LISO = 1;
                                   1609 ;	assignBit
      0004FB D2*04            [12] 1610 	setb	_LISO
                                   1611 ;	fire_alarm_panel.c:561: BUZ = 0;
                                   1612 ;	assignBit
      0004FD C2 95            [12] 1613 	clr	_BUZ
                                   1614 ;	fire_alarm_panel.c:562: HOT = 0;
                                   1615 ;	assignBit
      0004FF C2 94            [12] 1616 	clr	_HOT
                                   1617 ;	fire_alarm_panel.c:563: }
      000501 22               [24] 1618 	ret
                                   1619 ;------------------------------------------------------------
                                   1620 ;Allocation info for local variables in function 'spliter'
                                   1621 ;------------------------------------------------------------
                                   1622 ;data          Allocated to registers r7 
                                   1623 ;------------------------------------------------------------
                                   1624 ;	fire_alarm_panel.c:565: void spliter(unsigned char data)
                                   1625 ;	-----------------------------------------
                                   1626 ;	 function spliter
                                   1627 ;	-----------------------------------------
      000502                       1628 _spliter:
      000502 AF 82            [24] 1629 	mov	r7, dpl
                                   1630 ;	fire_alarm_panel.c:567: L = data & 0x0F;
      000504 74 0F            [12] 1631 	mov	a,#0x0f
      000506 5F               [12] 1632 	anl	a,r7
      000507 F5*03            [12] 1633 	mov	_L,a
                                   1634 ;	fire_alarm_panel.c:568: U = (data >> 4) & 0x0F;
      000509 EF               [12] 1635 	mov	a,r7
      00050A C4               [12] 1636 	swap	a
      00050B 54 0F            [12] 1637 	anl	a,#0x0f
      00050D F5*02            [12] 1638 	mov	_U,a
                                   1639 ;	fire_alarm_panel.c:569: }
      00050F 22               [24] 1640 	ret
                                   1641 ;------------------------------------------------------------
                                   1642 ;Allocation info for local variables in function 'move'
                                   1643 ;------------------------------------------------------------
                                   1644 ;data          Allocated to registers r7 
                                   1645 ;------------------------------------------------------------
                                   1646 ;	fire_alarm_panel.c:571: void move(unsigned char data)
                                   1647 ;	-----------------------------------------
                                   1648 ;	 function move
                                   1649 ;	-----------------------------------------
      000510                       1650 _move:
      000510 AF 82            [24] 1651 	mov	r7, dpl
                                   1652 ;	fire_alarm_panel.c:573: P1 = (P1 & 0xF0) | data;
      000512 E5 90            [12] 1653 	mov	a,_P1
      000514 54 F0            [12] 1654 	anl	a,#0xf0
      000516 4F               [12] 1655 	orl	a,r7
      000517 F5 90            [12] 1656 	mov	_P1,a
                                   1657 ;	fire_alarm_panel.c:574: EN = 1;
                                   1658 ;	assignBit
      000519 D2 87            [12] 1659 	setb	_EN
                                   1660 ;	fire_alarm_panel.c:575: delay();
      00051B 12r06r1D         [24] 1661 	lcall	_delay
                                   1662 ;	fire_alarm_panel.c:576: EN = 0;
                                   1663 ;	assignBit
      00051E C2 87            [12] 1664 	clr	_EN
                                   1665 ;	fire_alarm_panel.c:577: delay();
                                   1666 ;	fire_alarm_panel.c:578: }
      000520 02r06r1D         [24] 1667 	ljmp	_delay
                                   1668 ;------------------------------------------------------------
                                   1669 ;Allocation info for local variables in function 'move1'
                                   1670 ;------------------------------------------------------------
                                   1671 ;data          Allocated to registers r7 
                                   1672 ;------------------------------------------------------------
                                   1673 ;	fire_alarm_panel.c:580: void move1(unsigned char data)
                                   1674 ;	-----------------------------------------
                                   1675 ;	 function move1
                                   1676 ;	-----------------------------------------
      000523                       1677 _move1:
      000523 AF 82            [24] 1678 	mov	r7, dpl
                                   1679 ;	fire_alarm_panel.c:582: P1 = (P1 & 0xF0) | data;
      000525 E5 90            [12] 1680 	mov	a,_P1
      000527 54 F0            [12] 1681 	anl	a,#0xf0
      000529 4F               [12] 1682 	orl	a,r7
      00052A F5 90            [12] 1683 	mov	_P1,a
                                   1684 ;	fire_alarm_panel.c:583: EN = 1;
                                   1685 ;	assignBit
      00052C D2 87            [12] 1686 	setb	_EN
                                   1687 ;	fire_alarm_panel.c:587: __endasm;
      00052E 00               [12] 1688 	nop
                                   1689 ;	fire_alarm_panel.c:588: EN = 0;
                                   1690 ;	assignBit
      00052F C2 87            [12] 1691 	clr	_EN
                                   1692 ;	fire_alarm_panel.c:598: __endasm;
      000531 00               [12] 1693 	nop
      000532 00               [12] 1694 	nop
      000533 00               [12] 1695 	nop
      000534 00               [12] 1696 	nop
      000535 00               [12] 1697 	nop
      000536 00               [12] 1698 	nop
      000537 00               [12] 1699 	nop
      000538 00               [12] 1700 	nop
                                   1701 ;	fire_alarm_panel.c:599: EN = 1;
                                   1702 ;	assignBit
      000539 D2 87            [12] 1703 	setb	_EN
                                   1704 ;	fire_alarm_panel.c:600: }
      00053B 22               [24] 1705 	ret
                                   1706 ;------------------------------------------------------------
                                   1707 ;Allocation info for local variables in function 'lcd_cmd'
                                   1708 ;------------------------------------------------------------
                                   1709 ;cmd_ptr       Allocated to registers r5 r6 r7 
                                   1710 ;cmd           Allocated to registers r3 
                                   1711 ;i             Allocated to registers r4 
                                   1712 ;------------------------------------------------------------
                                   1713 ;	fire_alarm_panel.c:602: void lcd_cmd(unsigned char *cmd_ptr)
                                   1714 ;	-----------------------------------------
                                   1715 ;	 function lcd_cmd
                                   1716 ;	-----------------------------------------
      00053C                       1717 _lcd_cmd:
      00053C AD 82            [24] 1718 	mov	r5, dpl
      00053E AE 83            [24] 1719 	mov	r6, dph
      000540 AF F0            [24] 1720 	mov	r7, b
                                   1721 ;	fire_alarm_panel.c:607: while((cmd = cmd_ptr[i]) != 0) {
      000542 7C 00            [12] 1722 	mov	r4,#0x00
      000544                       1723 00101$:
      000544 EC               [12] 1724 	mov	a,r4
      000545 2D               [12] 1725 	add	a, r5
      000546 F9               [12] 1726 	mov	r1,a
      000547 E4               [12] 1727 	clr	a
      000548 3E               [12] 1728 	addc	a, r6
      000549 FA               [12] 1729 	mov	r2,a
      00054A 8F 03            [24] 1730 	mov	ar3,r7
      00054C 89 82            [24] 1731 	mov	dpl,r1
      00054E 8A 83            [24] 1732 	mov	dph,r2
      000550 8B F0            [24] 1733 	mov	b,r3
      000552 12r00r00         [24] 1734 	lcall	__gptrget
      000555 FB               [12] 1735 	mov	r3,a
      000556 60 26            [24] 1736 	jz	00104$
                                   1737 ;	fire_alarm_panel.c:608: i++;
      000558 0C               [12] 1738 	inc	r4
                                   1739 ;	fire_alarm_panel.c:609: RS = 0;
                                   1740 ;	assignBit
      000559 C2 86            [12] 1741 	clr	_RS
                                   1742 ;	fire_alarm_panel.c:610: spliter(cmd);
      00055B 8B 82            [24] 1743 	mov	dpl, r3
      00055D C0 07            [24] 1744 	push	ar7
      00055F C0 06            [24] 1745 	push	ar6
      000561 C0 05            [24] 1746 	push	ar5
      000563 C0 04            [24] 1747 	push	ar4
      000565 12r05r02         [24] 1748 	lcall	_spliter
                                   1749 ;	fire_alarm_panel.c:611: move(U);
      000568 85*02 82         [24] 1750 	mov	dpl, _U
      00056B 12r05r10         [24] 1751 	lcall	_move
                                   1752 ;	fire_alarm_panel.c:612: move(L);
      00056E 85*03 82         [24] 1753 	mov	dpl, _L
      000571 12r05r10         [24] 1754 	lcall	_move
      000574 D0 04            [24] 1755 	pop	ar4
      000576 D0 05            [24] 1756 	pop	ar5
      000578 D0 06            [24] 1757 	pop	ar6
      00057A D0 07            [24] 1758 	pop	ar7
      00057C 80 C6            [24] 1759 	sjmp	00101$
      00057E                       1760 00104$:
                                   1761 ;	fire_alarm_panel.c:614: }
      00057E 22               [24] 1762 	ret
                                   1763 ;------------------------------------------------------------
                                   1764 ;Allocation info for local variables in function 'lcd_data'
                                   1765 ;------------------------------------------------------------
                                   1766 ;data          Allocated to registers 
                                   1767 ;------------------------------------------------------------
                                   1768 ;	fire_alarm_panel.c:616: void lcd_data(unsigned char data)
                                   1769 ;	-----------------------------------------
                                   1770 ;	 function lcd_data
                                   1771 ;	-----------------------------------------
      00057F                       1772 _lcd_data:
                                   1773 ;	fire_alarm_panel.c:618: RS = 1;
                                   1774 ;	assignBit
      00057F D2 86            [12] 1775 	setb	_RS
                                   1776 ;	fire_alarm_panel.c:619: spliter(data);
      000581 12r05r02         [24] 1777 	lcall	_spliter
                                   1778 ;	fire_alarm_panel.c:620: move1(U);
      000584 85*02 82         [24] 1779 	mov	dpl, _U
      000587 12r05r23         [24] 1780 	lcall	_move1
                                   1781 ;	fire_alarm_panel.c:621: move1(L);
      00058A 85*03 82         [24] 1782 	mov	dpl, _L
                                   1783 ;	fire_alarm_panel.c:622: }
      00058D 02r05r23         [24] 1784 	ljmp	_move1
                                   1785 ;------------------------------------------------------------
                                   1786 ;Allocation info for local variables in function 'lcd_disp'
                                   1787 ;------------------------------------------------------------
                                   1788 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1789 ;ch            Allocated to registers r3 
                                   1790 ;i             Allocated to registers r4 
                                   1791 ;------------------------------------------------------------
                                   1792 ;	fire_alarm_panel.c:624: void lcd_disp(unsigned char *text_ptr)
                                   1793 ;	-----------------------------------------
                                   1794 ;	 function lcd_disp
                                   1795 ;	-----------------------------------------
      000590                       1796 _lcd_disp:
      000590 AD 82            [24] 1797 	mov	r5, dpl
      000592 AE 83            [24] 1798 	mov	r6, dph
      000594 AF F0            [24] 1799 	mov	r7, b
                                   1800 ;	fire_alarm_panel.c:629: while((ch = text_ptr[i]) != 0) {
      000596 7C 00            [12] 1801 	mov	r4,#0x00
      000598                       1802 00101$:
      000598 EC               [12] 1803 	mov	a,r4
      000599 2D               [12] 1804 	add	a, r5
      00059A F9               [12] 1805 	mov	r1,a
      00059B E4               [12] 1806 	clr	a
      00059C 3E               [12] 1807 	addc	a, r6
      00059D FA               [12] 1808 	mov	r2,a
      00059E 8F 03            [24] 1809 	mov	ar3,r7
      0005A0 89 82            [24] 1810 	mov	dpl,r1
      0005A2 8A 83            [24] 1811 	mov	dph,r2
      0005A4 8B F0            [24] 1812 	mov	b,r3
      0005A6 12r00r00         [24] 1813 	lcall	__gptrget
      0005A9 FB               [12] 1814 	mov	r3,a
      0005AA 60 18            [24] 1815 	jz	00104$
                                   1816 ;	fire_alarm_panel.c:630: i++;
      0005AC 0C               [12] 1817 	inc	r4
                                   1818 ;	fire_alarm_panel.c:631: lcd_data(ch);
      0005AD 8B 82            [24] 1819 	mov	dpl, r3
      0005AF C0 07            [24] 1820 	push	ar7
      0005B1 C0 06            [24] 1821 	push	ar6
      0005B3 C0 05            [24] 1822 	push	ar5
      0005B5 C0 04            [24] 1823 	push	ar4
      0005B7 12r05r7F         [24] 1824 	lcall	_lcd_data
      0005BA D0 04            [24] 1825 	pop	ar4
      0005BC D0 05            [24] 1826 	pop	ar5
      0005BE D0 06            [24] 1827 	pop	ar6
      0005C0 D0 07            [24] 1828 	pop	ar7
      0005C2 80 D4            [24] 1829 	sjmp	00101$
      0005C4                       1830 00104$:
                                   1831 ;	fire_alarm_panel.c:633: }
      0005C4 22               [24] 1832 	ret
                                   1833 ;------------------------------------------------------------
                                   1834 ;Allocation info for local variables in function 'lcd_disp1'
                                   1835 ;------------------------------------------------------------
                                   1836 ;text_ptr      Allocated to registers r5 r6 r7 
                                   1837 ;ch            Allocated to registers r3 
                                   1838 ;i             Allocated to registers r4 
                                   1839 ;------------------------------------------------------------
                                   1840 ;	fire_alarm_panel.c:635: void lcd_disp1(unsigned char *text_ptr)
                                   1841 ;	-----------------------------------------
                                   1842 ;	 function lcd_disp1
                                   1843 ;	-----------------------------------------
      0005C5                       1844 _lcd_disp1:
      0005C5 AD 82            [24] 1845 	mov	r5, dpl
      0005C7 AE 83            [24] 1846 	mov	r6, dph
      0005C9 AF F0            [24] 1847 	mov	r7, b
                                   1848 ;	fire_alarm_panel.c:640: while((ch = text_ptr[i]) != 0) {
      0005CB 7C 00            [12] 1849 	mov	r4,#0x00
      0005CD                       1850 00101$:
      0005CD EC               [12] 1851 	mov	a,r4
      0005CE 2D               [12] 1852 	add	a, r5
      0005CF F9               [12] 1853 	mov	r1,a
      0005D0 E4               [12] 1854 	clr	a
      0005D1 3E               [12] 1855 	addc	a, r6
      0005D2 FA               [12] 1856 	mov	r2,a
      0005D3 8F 03            [24] 1857 	mov	ar3,r7
      0005D5 89 82            [24] 1858 	mov	dpl,r1
      0005D7 8A 83            [24] 1859 	mov	dph,r2
      0005D9 8B F0            [24] 1860 	mov	b,r3
      0005DB 12r00r00         [24] 1861 	lcall	__gptrget
      0005DE FB               [12] 1862 	mov	r3,a
      0005DF 60 1B            [24] 1863 	jz	00104$
                                   1864 ;	fire_alarm_panel.c:641: i++;
      0005E1 0C               [12] 1865 	inc	r4
                                   1866 ;	fire_alarm_panel.c:642: lcd_data(ch);
      0005E2 8B 82            [24] 1867 	mov	dpl, r3
      0005E4 C0 07            [24] 1868 	push	ar7
      0005E6 C0 06            [24] 1869 	push	ar6
      0005E8 C0 05            [24] 1870 	push	ar5
      0005EA C0 04            [24] 1871 	push	ar4
      0005EC 12r05r7F         [24] 1872 	lcall	_lcd_data
                                   1873 ;	fire_alarm_panel.c:643: delay2();
      0005EF 12r05rFD         [24] 1874 	lcall	_delay2
      0005F2 D0 04            [24] 1875 	pop	ar4
      0005F4 D0 05            [24] 1876 	pop	ar5
      0005F6 D0 06            [24] 1877 	pop	ar6
      0005F8 D0 07            [24] 1878 	pop	ar7
      0005FA 80 D1            [24] 1879 	sjmp	00101$
      0005FC                       1880 00104$:
                                   1881 ;	fire_alarm_panel.c:645: }
      0005FC 22               [24] 1882 	ret
                                   1883 ;------------------------------------------------------------
                                   1884 ;Allocation info for local variables in function 'delay2'
                                   1885 ;------------------------------------------------------------
                                   1886 ;R5            Allocated to registers r7 
                                   1887 ;R6            Allocated to registers r5 
                                   1888 ;R7            Allocated to registers r6 
                                   1889 ;------------------------------------------------------------
                                   1890 ;	fire_alarm_panel.c:647: void delay2(void)
                                   1891 ;	-----------------------------------------
                                   1892 ;	 function delay2
                                   1893 ;	-----------------------------------------
      0005FD                       1894 _delay2:
                                   1895 ;	fire_alarm_panel.c:651: for(R5 = 1; R5 > 0; R5--) {
      0005FD 7F 01            [12] 1896 	mov	r7,#0x01
                                   1897 ;	fire_alarm_panel.c:652: for(R7 = 255; R7 > 0; R7--) {
      0005FF                       1898 00121$:
      0005FF 7E FF            [12] 1899 	mov	r6,#0xff
                                   1900 ;	fire_alarm_panel.c:653: for(R6 = 255; R6 > 0; R6--);
      000601                       1901 00119$:
      000601 7D FF            [12] 1902 	mov	r5,#0xff
      000603                       1903 00105$:
      000603 DD FE            [24] 1904 	djnz	r5,00105$
                                   1905 ;	fire_alarm_panel.c:652: for(R7 = 255; R7 > 0; R7--) {
      000605 DE FA            [24] 1906 	djnz	r6,00119$
                                   1907 ;	fire_alarm_panel.c:651: for(R5 = 1; R5 > 0; R5--) {
      000607 DF F6            [24] 1908 	djnz	r7,00121$
                                   1909 ;	fire_alarm_panel.c:656: }
      000609 22               [24] 1910 	ret
                                   1911 ;------------------------------------------------------------
                                   1912 ;Allocation info for local variables in function 'delay1'
                                   1913 ;------------------------------------------------------------
                                   1914 ;R5            Allocated to registers r7 
                                   1915 ;R6            Allocated to registers r5 
                                   1916 ;R7            Allocated to registers r6 
                                   1917 ;------------------------------------------------------------
                                   1918 ;	fire_alarm_panel.c:658: void delay1(void)
                                   1919 ;	-----------------------------------------
                                   1920 ;	 function delay1
                                   1921 ;	-----------------------------------------
      00060A                       1922 _delay1:
                                   1923 ;	fire_alarm_panel.c:662: for(R5 = 8; R5 > 0; R5--) {
      00060A 7F 08            [12] 1924 	mov	r7,#0x08
                                   1925 ;	fire_alarm_panel.c:663: for(R7 = 255; R7 > 0; R7--) {
      00060C                       1926 00123$:
      00060C 7E FF            [12] 1927 	mov	r6,#0xff
                                   1928 ;	fire_alarm_panel.c:664: for(R6 = 255; R6 > 0; R6--);
      00060E                       1929 00121$:
      00060E 7D FF            [12] 1930 	mov	r5,#0xff
      000610                       1931 00107$:
      000610 DD FE            [24] 1932 	djnz	r5,00107$
                                   1933 ;	fire_alarm_panel.c:663: for(R7 = 255; R7 > 0; R7--) {
      000612 DE FA            [24] 1934 	djnz	r6,00121$
                                   1935 ;	fire_alarm_panel.c:662: for(R5 = 8; R5 > 0; R5--) {
      000614 DF F6            [24] 1936 	djnz	r7,00123$
                                   1937 ;	fire_alarm_panel.c:668: if(RI) {
      000616 30 98 03         [24] 1938 	jnb	_RI,00112$
                                   1939 ;	fire_alarm_panel.c:669: receive();
                                   1940 ;	fire_alarm_panel.c:671: }
      000619 02r04r59         [24] 1941 	ljmp	_receive
      00061C                       1942 00112$:
      00061C 22               [24] 1943 	ret
                                   1944 ;------------------------------------------------------------
                                   1945 ;Allocation info for local variables in function 'delay'
                                   1946 ;------------------------------------------------------------
                                   1947 ;R6            Allocated to registers r6 
                                   1948 ;R7            Allocated to registers r7 
                                   1949 ;------------------------------------------------------------
                                   1950 ;	fire_alarm_panel.c:673: void delay(void)
                                   1951 ;	-----------------------------------------
                                   1952 ;	 function delay
                                   1953 ;	-----------------------------------------
      00061D                       1954 _delay:
                                   1955 ;	fire_alarm_panel.c:677: for(R7 = 7; R7 > 0; R7--) {
      00061D 7F 07            [12] 1956 	mov	r7,#0x07
                                   1957 ;	fire_alarm_panel.c:678: for(R6 = 15; R6 > 0; R6--);
      00061F                       1958 00114$:
      00061F 7E 0F            [12] 1959 	mov	r6,#0x0f
      000621                       1960 00104$:
      000621 DE FE            [24] 1961 	djnz	r6,00104$
                                   1962 ;	fire_alarm_panel.c:677: for(R7 = 7; R7 > 0; R7--) {
      000623 DF FA            [24] 1963 	djnz	r7,00114$
                                   1964 ;	fire_alarm_panel.c:680: } 
      000625 22               [24] 1965 	ret
                                   1966 	.area CSEG    (CODE)
                                   1967 	.area CONST   (CODE)
                                   1968 	.area CONST   (CODE)
      000000                       1969 _INIT_COMMANDS:
      000000 20                    1970 	.db #0x20	; 32
      000001 28                    1971 	.db #0x28	; 40
      000002 0C                    1972 	.db #0x0c	; 12
      000003 01                    1973 	.db #0x01	; 1
      000004 06                    1974 	.db #0x06	; 6
      000005 80                    1975 	.db #0x80	; 128
      000006 00                    1976 	.db #0x00	; 0
                                   1977 	.area CSEG    (CODE)
                                   1978 	.area CONST   (CODE)
      000007                       1979 _LINE1:
      000007 01                    1980 	.db #0x01	; 1
      000008 06                    1981 	.db #0x06	; 6
      000009 80                    1982 	.db #0x80	; 128
      00000A 00                    1983 	.db #0x00	; 0
                                   1984 	.area CSEG    (CODE)
                                   1985 	.area CONST   (CODE)
      00000B                       1986 _LINE2:
      00000B C0                    1987 	.db #0xc0	; 192
      00000C 00                    1988 	.db #0x00	; 0
                                   1989 	.area CSEG    (CODE)
                                   1990 	.area CONST   (CODE)
      00000D                       1991 _TEXT1:
      00000D 20 41 47 4E 49 20 50  1992 	.ascii " AGNI PROTECTION"
             52 4F 54 45 43 54 49
             4F 4E
      00001D 00                    1993 	.db 0x00
                                   1994 	.area CSEG    (CODE)
                                   1995 	.area CONST   (CODE)
      00001E                       1996 _TEXT2:
      00001E 20 57 45 4C 43 4F 4D  1997 	.ascii " WELCOME TO ...."
             45 20 54 4F 20 2E 2E
             2E 2E
      00002E 00                    1998 	.db 0x00
                                   1999 	.area CSEG    (CODE)
                                   2000 	.area CONST   (CODE)
      00002F                       2001 _TEXT3:
      00002F 46 49 52 45 20 41 4C  2002 	.ascii "FIRE ALARM PANEL"
             41 52 4D 20 50 41 4E
             45 4C
      00003F 00                    2003 	.db 0x00
                                   2004 	.area CSEG    (CODE)
                                   2005 	.area CONST   (CODE)
      000040                       2006 _TZONE1:
      000040 20 5A 4F 4E 45 20 2D  2007 	.ascii " ZONE - 01      "
             20 30 31 20 20 20 20
             20 20
      000050 00                    2008 	.db 0x00
                                   2009 	.area CSEG    (CODE)
                                   2010 	.area CONST   (CODE)
      000051                       2011 _TZONE2:
      000051 20 5A 4F 4E 45 20 2D  2012 	.ascii " ZONE - 02      "
             20 30 32 20 20 20 20
             20 20
      000061 00                    2013 	.db 0x00
                                   2014 	.area CSEG    (CODE)
                                   2015 	.area CONST   (CODE)
      000062                       2016 _FIRE:
      000062 20 46 49 52 45 20 44  2017 	.ascii " FIRE DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000072 00                    2018 	.db 0x00
                                   2019 	.area CSEG    (CODE)
                                   2020 	.area CONST   (CODE)
      000073                       2021 _SHORT:
      000073 20 53 48 4F 52 54 20  2022 	.ascii " SHORT DETECTED "
             44 45 54 45 43 54 45
             44 20
      000083 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      000084                       2026 _OPEN:
      000084 20 4F 50 45 4E 20 44  2027 	.ascii " OPEN DETECTED  "
             45 54 45 43 54 45 44
             20 20
      000094 00                    2028 	.db 0x00
                                   2029 	.area CSEG    (CODE)
                                   2030 	.area CONST   (CODE)
      000095                       2031 _TEXT4:
      000095 20 41 4C 4C 20 54 48  2032 	.ascii " ALL THE AREA   "
             45 20 41 52 45 41 20
             20 20
      0000A5 00                    2033 	.db 0x00
                                   2034 	.area CSEG    (CODE)
                                   2035 	.area CONST   (CODE)
      0000A6                       2036 _TLAMP:
      0000A6 50 41 4E 45 4C 20 54  2037 	.ascii "PANEL TESTING ON"
             45 53 54 49 4E 47 20
             4F 4E
      0000B6 00                    2038 	.db 0x00
                                   2039 	.area CSEG    (CODE)
                                   2040 	.area CONST   (CODE)
      0000B7                       2041 _TEVQ:
      0000B7 20 50 4C 45 41 53 45  2042 	.ascii " PLEASE EVACUATE"
             20 45 56 41 43 55 41
             54 45
      0000C7 00                    2043 	.db 0x00
                                   2044 	.area CSEG    (CODE)
                                   2045 	.area CONST   (CODE)
      0000C8                       2046 _ISO1:
      0000C8 5A 4F 4E 45 2D 20 30  2047 	.ascii "ZONE- 01 ISOLATE"
             31 20 49 53 4F 4C 41
             54 45
      0000D8 00                    2048 	.db 0x00
                                   2049 	.area CSEG    (CODE)
                                   2050 	.area CONST   (CODE)
      0000D9                       2051 _ISO2:
      0000D9 5A 4F 4E 45 2D 20 30  2052 	.ascii "ZONE- 02 ISOLATE"
             32 20 49 53 4F 4C 41
             54 45
      0000E9 00                    2053 	.db 0x00
                                   2054 	.area CSEG    (CODE)
                                   2055 	.area CONST   (CODE)
      0000EA                       2056 _ISO1H:
      0000EA 5A 4F 4E 45 2D 20 30  2057 	.ascii "ZONE- 01 HEALTHY"
             31 20 48 45 41 4C 54
             48 59
      0000FA 00                    2058 	.db 0x00
                                   2059 	.area CSEG    (CODE)
                                   2060 	.area CONST   (CODE)
      0000FB                       2061 _ISO2H:
      0000FB 5A 4F 4E 45 2D 20 30  2062 	.ascii "ZONE- 02 HEALTHY"
             32 20 48 45 41 4C 54
             48 59
      00010B 00                    2063 	.db 0x00
                                   2064 	.area CSEG    (CODE)
                                   2065 	.area CONST   (CODE)
      00010C                       2066 _LOWB:
      00010C 20 20 42 41 54 54 45  2067 	.ascii "  BATTERY LOW   "
             52 59 20 4C 4F 57 20
             20 20
      00011C 00                    2068 	.db 0x00
                                   2069 	.area CSEG    (CODE)
                                   2070 	.area CONST   (CODE)
      00011D                       2071 _LOWM:
      00011D 20 43 48 45 43 4B 20  2072 	.ascii " CHECK AC SUPPLY"
             41 43 20 53 55 50 50
             4C 59
      00012D 00                    2073 	.db 0x00
                                   2074 	.area CSEG    (CODE)
                                   2075 	.area XINIT   (CODE)
                                   2076 	.area CABS    (ABS,CODE)
